name: Security Scanning Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18.x'

jobs:
  # Backend Security Scanning
  backend-security:
    name: Backend Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep

    - name: Python Dependency Vulnerability Scan
      working-directory: ./backend
      run: |
        safety check --json --output safety-report.json || true

    - name: Python Static Security Analysis (Bandit)
      working-directory: ./backend
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt

    - name: Semgrep Security Scan
      working-directory: ./backend
      run: |
        semgrep --config=auto --json --output=semgrep-report.json app/ || true

    - name: Upload Backend Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: backend-security-reports
        path: |
          backend/safety-report.json
          backend/bandit-report.json
          backend/semgrep-report.json

  # Frontend Security Scanning
  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [frontend, admin-dashboard]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ./${{ matrix.module }}
      run: npm ci

    - name: NPM Audit
      working-directory: ./${{ matrix.module }}
      run: |
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate

    - name: ESLint Security Rules
      working-directory: ./${{ matrix.module }}
      run: |
        npx eslint . --ext .ts,.tsx,.js,.jsx -f json -o eslint-security.json || true

    - name: Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --json-file-output=snyk-report.json

    - name: Upload Frontend Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.module }}-security-reports
        path: |
          ${{ matrix.module }}/npm-audit-report.json
          ${{ matrix.module }}/eslint-security.json
          ${{ matrix.module }}/snyk-report.json

  # Docker Security Scanning
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker Images
      run: |
        docker build -f backend/Dockerfile -t backend:latest ./backend
        docker build -f frontend/Dockerfile -t frontend:latest ./frontend
        docker build -f admin-dashboard/Dockerfile -t admin-dashboard:latest ./admin-dashboard

    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'backend:latest'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'backend-trivy-results.sarif'

  # Security Gate
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [backend-security, frontend-security, docker-security]

    steps:
    - name: Download Security Reports
      uses: actions/download-artifact@v3

    - name: Security Gate Evaluation
      run: |
        echo "üîç Evaluating security scan results..."

        # Check for critical vulnerabilities
        CRITICAL_FOUND=false

        # Parse safety report for critical Python vulnerabilities
        if [ -f backend-security-reports/safety-report.json ]; then
          CRITICAL_COUNT=$(jq '.vulnerabilities | length' backend-security-reports/safety-report.json)
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå Critical Python vulnerabilities found: $CRITICAL_COUNT"
            CRITICAL_FOUND=true
          fi
        fi

        # Parse bandit report for high severity issues
        if [ -f backend-security-reports/bandit-report.json ]; then
          HIGH_SEVERITY=$(jq '.results[] | select(.issue_severity == "HIGH") | length' backend-security-reports/bandit-report.json)
          if [ "$HIGH_SEVERITY" -gt 0 ]; then
            echo "‚ùå High severity security issues found: $HIGH_SEVERITY"
            CRITICAL_FOUND=true
          fi
        fi

        # Check NPM audit results
        for module in frontend admin-dashboard; do
          if [ -f ${module}-security-reports/npm-audit-report.json ]; then
            CRITICAL_NPM=$(jq '.metadata.vulnerabilities.critical' ${module}-security-reports/npm-audit-report.json)
            if [ "$CRITICAL_NPM" -gt 0 ]; then
              echo "‚ùå Critical NPM vulnerabilities found in $module: $CRITICAL_NPM"
              CRITICAL_FOUND=true
            fi
          fi
        done

        if [ "$CRITICAL_FOUND" = true ]; then
          echo "üö® Security Gate FAILED - Critical vulnerabilities detected"
          exit 1
        else
          echo "‚úÖ Security Gate PASSED - No critical vulnerabilities found"
        fi

  # Security Regression Tests
  security-regression:
    name: Security Regression Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-security

    - name: Run Security Regression Tests
      working-directory: ./backend
      run: |
        # Run security-specific test suite
        pytest tests/security/ -v --tb=short

        # Test SuperAdmin security features
        pytest tests/api/admin/test_super_admin_security.py -v

        # Test IP allowlist functionality
        pytest tests/security/test_ip_allowlist.py -v

        # Test 2FA implementation
        pytest tests/security/test_two_factor.py -v

        # Test session management
        pytest tests/security/test_session_management.py -v