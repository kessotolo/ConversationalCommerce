"""initial migration

Revision ID: 40582e133f48
Revises: a25845ba2c86
Create Date: 2025-07-08 00:31:54.057190

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '40582e133f48'
down_revision: Union[str, None] = 'a25845ba2c86'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Removed all destructive drop_table, drop_index, and drop_constraint operations to prevent data loss.
    op.add_column('orders', sa.Column('tenant_id', sa.UUID(), nullable=False))
    op.add_column('orders', sa.Column('customer_id', sa.UUID(), nullable=True))
    op.add_column('orders', sa.Column('cancelled_at',
                  sa.DateTime(timezone=True), nullable=True))
    op.add_column('orders', sa.Column(
        'returned_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('orders', sa.Column(
        'cancellation_reason', sa.String(), nullable=True))
    op.add_column('orders', sa.Column(
        'return_reason', sa.String(), nullable=True))
    op.create_index(op.f('ix_orders_customer_id'),
                    'orders', ['customer_id'], unique=False)
    op.create_index(op.f('ix_orders_tenant_id'),
                    'orders', ['tenant_id'], unique=False)
    op.add_column('products', sa.Column('type', sa.String(), nullable=True))
    op.add_column('products', sa.Column('status', sa.String(), nullable=True))
    op.add_column('products', sa.Column(
        'track_inventory', sa.Boolean(), nullable=True))
    op.add_column('products', sa.Column(
        'short_description', sa.String(), nullable=True))
    op.add_column('products', sa.Column('sku', sa.String(), nullable=True))
    op.add_column('products', sa.Column('barcode', sa.String(), nullable=True))
    op.add_column('products', sa.Column('weight', sa.Float(), nullable=True))
    op.add_column('products', sa.Column(
        'weight_unit', sa.String(), nullable=True))
    op.add_column('products', sa.Column(
        'dimensions', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('products', sa.Column('product_metadata',
                  postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('products', sa.Column(
        'seo', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('products', sa.Column(
        'published_at', sa.DateTime(), nullable=True))
    op.add_column('tenants', sa.Column(
        'admin_user_id', sa.UUID(), nullable=True))
    op.add_column('tenants', sa.Column(
        'is_verified', sa.Boolean(), nullable=False))
    op.add_column('tenants', sa.Column('display_name',
                  sa.String(length=100), nullable=True))
    op.add_column('tenants', sa.Column(
        'logo_url', sa.String(length=255), nullable=True))
    op.add_column('tenants', sa.Column('primary_color',
                  sa.String(length=7), nullable=True))
    op.add_column('tenants', sa.Column('secondary_color',
                  sa.String(length=7), nullable=True))
    op.add_column('tenants', sa.Column('contact_email',
                  sa.String(length=255), nullable=True))
    op.add_column('tenants', sa.Column('contact_phone',
                  sa.String(length=20), nullable=True))
    op.alter_column('tenants', 'is_active',
                    existing_type=sa.BOOLEAN(),
                    nullable=False)
    op.alter_column('tenants', 'created_at',
                    existing_type=postgresql.TIMESTAMP(timezone=True),
                    type_=sa.DateTime(),
                    nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('tenants', 'updated_at',
                    existing_type=postgresql.TIMESTAMP(timezone=True),
                    type_=sa.DateTime(),
                    nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tenants', sa.Column('domain_verification_token',
                  sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('tenants', sa.Column('kyc_data', postgresql.JSONB(
        astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('tenants', sa.Column('domain_verification_attempts', postgresql.JSONB(
        astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('tenants', sa.Column('country_code', sa.VARCHAR(
        length=2), autoincrement=False, nullable=True))
    op.add_column('tenants', sa.Column('email', sa.VARCHAR(),
                  autoincrement=False, nullable=True))
    op.add_column('tenants', sa.Column('phone_number',
                  sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('tenants', sa.Column('settings', sa.UUID(),
                  autoincrement=False, nullable=True))
    op.add_column('tenants', sa.Column('kyc_status', postgresql.ENUM('NOT_STARTED', 'PENDING',
                  'VERIFIED', 'REJECTED', name='kycstatus'), autoincrement=False, nullable=True))
    op.add_column('tenants', sa.Column('whatsapp_number',
                  sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('tenants', sa.Column('domain_verified',
                  sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('tenants', sa.Column('storefront_enabled',
                  sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('tenants', sa.Column('kyc_documents', postgresql.JSONB(
        astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('tenants', sa.Column('kyc_updated_at', postgresql.TIMESTAMP(
        timezone=True), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_tenants_admin_user_id_users'),
                       'tenants', type_='foreignkey')
    op.drop_index(op.f('ix_tenants_subdomain'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_name'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_custom_domain'), table_name='tenants')
    op.create_unique_constraint(op.f('uq_tenants_subdomain'), 'tenants', [
                                'subdomain'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('uq_tenants_custom_domain'), 'tenants', [
                                'custom_domain'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_tenants_phone_number'),
                    'tenants', ['phone_number'], unique=True)
    op.create_index(op.f('ix_tenants_email'),
                    'tenants', ['email'], unique=True)
    op.alter_column('tenants', 'updated_at',
                    existing_type=sa.DateTime(),
                    type_=postgresql.TIMESTAMP(timezone=True),
                    nullable=True)
    op.alter_column('tenants', 'created_at',
                    existing_type=sa.DateTime(),
                    type_=postgresql.TIMESTAMP(timezone=True),
                    nullable=True,
                    existing_server_default=sa.text('now()'))
    op.alter_column('tenants', 'is_active',
                    existing_type=sa.BOOLEAN(),
                    nullable=True)
    op.drop_column('tenants', 'contact_phone')
    op.drop_column('tenants', 'contact_email')
    op.drop_column('tenants', 'secondary_color')
    op.drop_column('tenants', 'primary_color')
    op.drop_column('tenants', 'logo_url')
    op.drop_column('tenants', 'display_name')
    op.drop_column('tenants', 'is_verified')
    op.drop_column('tenants', 'admin_user_id')
    op.drop_column('products', 'published_at')
    op.drop_column('products', 'seo')
    op.drop_column('products', 'product_metadata')
    op.drop_column('products', 'dimensions')
    op.drop_column('products', 'weight_unit')
    op.drop_column('products', 'weight')
    op.drop_column('products', 'barcode')
    op.drop_column('products', 'sku')
    op.drop_column('products', 'short_description')
    op.drop_column('products', 'track_inventory')
    op.drop_column('products', 'status')
    op.drop_column('products', 'type')
    op.drop_index(op.f('ix_orders_tenant_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_customer_id'), table_name='orders')
    op.drop_column('orders', 'return_reason')
    op.drop_column('orders', 'cancellation_reason')
    op.drop_column('orders', 'returned_at')
    op.drop_column('orders', 'cancelled_at')
    op.drop_column('orders', 'customer_id')
    op.drop_column('orders', 'tenant_id')
    op.create_table('shipping_couriers',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('provider_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('phone', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('whatsapp', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('vehicle_type', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('vehicle_description', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('profile_photo_url', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('available', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('onboarding_completed', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('onboarding_date', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['provider_id'], ['seller_shipping_providers.id'], name=op.f(
                        'fk_shipping_couriers_provider_id_seller_shipping_providers')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_shipping_couriers_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_shipping_couriers'))
                    )
    op.create_index(op.f('ix_shipping_couriers_tenant_id'),
                    'shipping_couriers', ['tenant_id'], unique=False)
    op.create_table('storefront_components',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=False),
                    sa.Column('component_type', postgresql.ENUM('HERO', 'CAROUSEL', 'PRODUCT_GRID', 'PRODUCT_LIST', 'FEATURED_PRODUCTS', 'CATEGORY_SHOWCASE', 'TEXT_BLOCK', 'IMAGE_BLOCK',
                                                                'VIDEO_BLOCK', 'TESTIMONIALS', 'NEWSLETTER_SIGNUP', 'CONTACT_FORM', 'CALL_TO_ACTION', 'SOCIAL_FEED', 'CUSTOM', name='componenttype'), autoincrement=False, nullable=False),
                    sa.Column('properties', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('constraints', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('allowed_placements', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('version', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=False),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('property_schema', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_storefront_components_tenant_id_tenants'), ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_storefront_components'))
                    )
    op.create_index(op.f('idx_component_type'), 'storefront_components', [
                    'tenant_id', 'component_type'], unique=False)
    op.create_index(op.f('idx_component_tenant'),
                    'storefront_components', ['tenant_id'], unique=False)
    op.create_table('ai_config',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('merchant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('style_tone', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('auto_reply_enabled', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('active_hours', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('bot_name', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['merchant_id'], ['users.id'], name=op.f(
                        'fk_ai_config_merchant_id_users')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_ai_config_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_ai_config'))
                    )
    op.create_table('kyc_document',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('kyc_info_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('file_url', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('file_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('status', postgresql.ENUM('uploaded', 'verified', 'rejected',
                                                        name='kycdocumentstatusenum'), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['kyc_info_id'], ['kyc_info.id'], name=op.f(
                        'fk_kyc_document_kyc_info_id_kyc_info')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_kyc_document'))
                    )
    op.create_table('seller_shipping_providers',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('provider_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('description', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('base_fee', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('per_km_fee', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('min_distance', sa.DOUBLE_PRECISION(
                        precision=53), autoincrement=False, nullable=False),
                    sa.Column('max_distance', sa.DOUBLE_PRECISION(
                        precision=53), autoincrement=False, nullable=False),
                    sa.Column('coverage_area', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=True),
                    sa.Column('contact_name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('contact_phone', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('contact_whatsapp', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('estimated_delivery_time', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('delivery_days', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=True),
                    sa.Column('delivery_hours', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=True),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('is_default', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('onboarding_status', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('onboarding_completed', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_seller_shipping_providers_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint('id', name=op.f(
                        'pk_seller_shipping_providers'))
                    )
    op.create_index(op.f('ix_seller_shipping_providers_tenant_id'),
                    'seller_shipping_providers', ['tenant_id'], unique=False)
    op.create_table('team_invite',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('invitee_phone', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('invitee_email', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('role', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('status', postgresql.ENUM('pending', 'accepted', 'expired', 'revoked',
                                                        name='teaminvitestatusenum'), autoincrement=False, nullable=False),
                    sa.Column('invited_by', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('accepted_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_team_invite_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_team_invite'))
                    )
    op.create_table('storefront_permissions',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('user_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('role', postgresql.ENUM('VIEWER', 'EDITOR', 'PUBLISHER',
                                                      'ADMIN', name='storefrontrole'), autoincrement=False, nullable=False),
                    sa.Column('section_permissions', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('component_permissions', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_storefront_permissions_tenant_id_tenants'), ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk_storefront_permissions_user_id_users'), ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_storefront_permissions')),
                    sa.UniqueConstraint('tenant_id', 'user_id', name=op.f(
                        'uq_user_tenant_permission'), postgresql_include=[], postgresql_nulls_not_distinct=False)
                    )
    op.create_index(op.f('idx_storefront_permission_user'),
                    'storefront_permissions', ['user_id'], unique=False)
    op.create_index(op.f('idx_storefront_permission_tenant'),
                    'storefront_permissions', ['tenant_id'], unique=False)
    op.create_table('alert_config',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('event_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('enabled', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_alert_config_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_alert_config'))
                    )
    op.create_table('kyc_info',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('business_name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('id_number', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('id_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('status', postgresql.ENUM('pending', 'approved', 'rejected',
                                                        name='kycstatusenum'), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_kyc_info_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_kyc_info'))
                    )
    op.create_table('storefront_page_templates',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=False),
                    sa.Column('page_type', postgresql.ENUM('HOME', 'PRODUCT', 'CATEGORY', 'ABOUT', 'CONTACT', 'CUSTOM',
                                                           'CHECKOUT', 'CART', 'ACCOUNT', 'POLICY', name='pagetype'), autoincrement=False, nullable=False),
                    sa.Column('description', sa.TEXT(),
                              autoincrement=False, nullable=True),
                    sa.Column('layout_structure', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('component_slots', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('parent_template_id', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('inheritance_rules', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('is_system', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['parent_template_id'], ['storefront_page_templates.id'], name=op.f(
                        'fk_storefront_page_templates_parent_template_id_storefr_bbc6')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_storefront_page_templates_tenant_id_tenants'), ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name=op.f(
                        'pk_storefront_page_templates'))
                    )
    op.create_index(op.f('idx_template_type'), 'storefront_page_templates', [
                    'tenant_id', 'page_type'], unique=False)
    op.create_index(op.f('idx_template_tenant'),
                    'storefront_page_templates', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_template_parent'), 'storefront_page_templates', [
                    'parent_template_id'], unique=False)
    op.create_table('storefront_assets',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('filename', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=False),
                    sa.Column('original_filename', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('file_path', sa.VARCHAR(length=512),
                              autoincrement=False, nullable=False),
                    sa.Column('file_size', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('mime_type', sa.VARCHAR(length=127),
                              autoincrement=False, nullable=False),
                    sa.Column('asset_type', postgresql.ENUM('IMAGE', 'VIDEO', 'DOCUMENT',
                                                            'AUDIO', 'OTHER', name='assettype'), autoincrement=False, nullable=False),
                    sa.Column('alt_text', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('title', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('description', sa.VARCHAR(length=1000),
                              autoincrement=False, nullable=True),
                    sa.Column('asset_metadata', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('usage_count', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('usage_locations', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('version', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('parent_asset_id', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('is_optimized', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['parent_asset_id'], [
                        'storefront_assets.id'], name='fk_storefront_assets_parent_asset_id_storefront_assets'),
                    sa.ForeignKeyConstraint(['tenant_id'], [
                        'tenants.id'], name='fk_storefront_assets_tenant_id_tenants', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name='pk_storefront_assets'),
                    postgresql_ignore_search_path=False
                    )
    op.create_index(op.f('idx_asset_type'), 'storefront_assets', [
                    'tenant_id', 'asset_type'], unique=False)
    op.create_index(op.f('idx_asset_tenant'), 'storefront_assets', [
                    'tenant_id'], unique=False)
    op.create_index(op.f('idx_asset_parent'), 'storefront_assets', [
                    'parent_asset_id'], unique=False)
    op.create_table('storefront_logos',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('variant', postgresql.ENUM('PRIMARY', 'SECONDARY', 'DARK', 'LIGHT', 'MONOCHROME',
                                                         'FAVICON', 'MOBILE', name='logovariant'), autoincrement=False, nullable=False),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('asset_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('display_settings', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('alt_text', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=False),
                    sa.Column('responsive_settings', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['asset_id'], ['storefront_assets.id'], name=op.f(
                        'fk_storefront_logos_asset_id_storefront_assets')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_storefront_logos_tenant_id_tenants'), ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_storefront_logos'))
                    )
    op.create_index(op.f('idx_unique_active_logo_variant'), 'storefront_logos', [
                    'tenant_id', 'variant', 'is_active'], unique=True, postgresql_where='is_active')
    op.create_index(op.f('idx_logo_variant'), 'storefront_logos', [
                    'tenant_id', 'variant'], unique=False)
    op.create_index(op.f('idx_logo_tenant'), 'storefront_logos', [
                    'tenant_id'], unique=False)
    op.create_table('storefront_versions',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('storefront_config_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('version_number', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_by', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('change_summary', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('change_description', sa.TEXT(),
                              autoincrement=False, nullable=True),
                    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('configuration_snapshot', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f(
                        'fk_storefront_versions_created_by_users')),
                    sa.ForeignKeyConstraint(['storefront_config_id'], ['storefront_configs.id'], name=op.f(
                        'fk_storefront_versions_storefront_config_id_storefront_configs'), ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_storefront_versions'))
                    )
    op.create_index(op.f('idx_unique_storefront_version'), 'storefront_versions', [
                    'storefront_config_id', 'version_number'], unique=True)
    op.create_index(op.f('idx_storefront_version_created'), 'storefront_versions', [
                    'storefront_config_id', 'created_at'], unique=False)
    op.create_table('alembic_version',
                    sa.Column('version_num', sa.VARCHAR(length=32),
                              autoincrement=False, nullable=False),
                    sa.PrimaryKeyConstraint(
                        'version_num', name=op.f('alembic_version_pkc'))
                    )
    op.create_table('storefront_banners',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=False),
                    sa.Column('banner_type', postgresql.ENUM('HERO', 'PROMOTIONAL', 'ANNOUNCEMENT', 'CATEGORY',
                                                             'SEASONAL', 'CUSTOM', name='bannertype'), autoincrement=False, nullable=False),
                    sa.Column('placement', postgresql.ENUM('HEADER', 'HOMEPAGE', 'CATEGORY_PAGE', 'PRODUCT_PAGE',
                                                           'FOOTER', 'SIDEBAR', 'POPUP', name='bannerplacement'), autoincrement=False, nullable=False),
                    sa.Column('title', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('subtitle', sa.VARCHAR(length=500),
                              autoincrement=False, nullable=True),
                    sa.Column('content', sa.VARCHAR(length=1000),
                              autoincrement=False, nullable=True),
                    sa.Column('call_to_action', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('link_url', sa.VARCHAR(length=500),
                              autoincrement=False, nullable=True),
                    sa.Column('asset_id', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('design_settings', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('start_date', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True),
                              autoincrement=False, nullable=True),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('priority', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('targeting_rules', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('impressions', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('clicks', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('conversions', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['asset_id'], ['storefront_assets.id'], name=op.f(
                        'fk_storefront_banners_asset_id_storefront_assets')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_storefront_banners_tenant_id_tenants'), ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_storefront_banners'))
                    )
    op.create_index(op.f('idx_banner_tenant'), 'storefront_banners', [
                    'tenant_id'], unique=False)
    op.create_index(op.f('idx_banner_scheduling'), 'storefront_banners', [
                    'start_date', 'end_date'], unique=False)
    op.create_index(op.f('idx_banner_placement'), 'storefront_banners', [
                    'tenant_id', 'placement'], unique=False)
    op.create_index(op.f('idx_banner_active_tenant'), 'storefront_banners', [
                    'tenant_id', 'is_active'], unique=False)
    op.create_table('audit_logs',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('user_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('action', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('resource_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('resource_id', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('ip_address', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('user_agent', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('details', postgresql.JSON(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('timestamp', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_audit_logs_tenant_id_tenants')),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk_audit_logs_user_id_users')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_audit_logs'))
                    )
    # ### end Alembic commands ###
