"""final_schema_with_all_uuid_foreign_keys

Revision ID: 457474329562
Revises: 07b5527603c1
Create Date: 2025-06-26 16:41:53.406555

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '457474329562'
down_revision: Union[str, None] = '07b5527603c1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('address_book',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('customer_id', sa.UUID(), nullable=False),
                    sa.Column('street', sa.String(), nullable=False),
                    sa.Column('city', sa.String(), nullable=False),
                    sa.Column('state', sa.String(), nullable=True),
                    sa.Column('postal_code', sa.String(), nullable=True),
                    sa.Column('country', sa.String(), nullable=False),
                    sa.Column('apartment', sa.String(), nullable=True),
                    sa.Column('landmark', sa.String(), nullable=True),
                    sa.Column('coordinates', sa.JSON(), nullable=True),
                    sa.Column('is_default', sa.Boolean(), nullable=True),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name=op.f(
                        'fk_address_book_customer_id_customers')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_address_book'))
                    )
    op.create_index(op.f('ix_address_book_customer_id'),
                    'address_book', ['customer_id'], unique=False)
    op.create_table('notification_preferences',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('customer_id', sa.UUID(), nullable=False),
                    sa.Column('preferences', sa.JSON(), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name=op.f(
                        'fk_notification_preferences_customer_id_customers')),
                    sa.PrimaryKeyConstraint('id', name=op.f(
                        'pk_notification_preferences'))
                    )
    op.create_index(op.f('ix_notification_preferences_customer_id'),
                    'notification_preferences', ['customer_id'], unique=False)
    op.create_table('payment_settings',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('tenant_id', sa.UUID(), nullable=False),
                    sa.Column('online_payments_enabled',
                              sa.Boolean(), nullable=True),
                    sa.Column('platform_fee_percentage',
                              sa.Float(), nullable=True),
                    sa.Column('auto_calculate_payout',
                              sa.Boolean(), nullable=True),
                    sa.Column('fraud_detection_enabled',
                              sa.Boolean(), nullable=True),
                    sa.Column('rate_limiting_enabled',
                              sa.Boolean(), nullable=True),
                    sa.Column('webhook_security_enabled',
                              sa.Boolean(), nullable=True),
                    sa.Column('_bank_name', sa.String(
                        length=500), nullable=True),
                    sa.Column('_account_name', sa.String(
                        length=500), nullable=True),
                    sa.Column('_account_number', sa.String(
                        length=500), nullable=True),
                    sa.Column('bank_instructions', sa.Text(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_payment_settings_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_payment_settings')),
                    sa.UniqueConstraint('tenant_id', name=op.f(
                        'uq_payment_settings_tenant_id'))
                    )
    op.create_table('payment_split_rules',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('tenant_id', sa.UUID(), nullable=False),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.Column('platform_percentage',
                              sa.Float(), nullable=False),
                    sa.Column('platform_flat_fee', sa.Float(), nullable=True),
                    sa.Column('bearer', sa.String(length=20), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_payment_split_rules_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_payment_split_rules'))
                    )
    op.create_table('storefront_themes',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.Column('tenant_id', sa.UUID(), nullable=False),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('is_default', sa.Boolean(), nullable=True),
                    sa.Column('colors', sa.JSON(), nullable=False),
                    sa.Column('typography', sa.JSON(), nullable=False),
                    sa.Column('layout', sa.JSON(), nullable=False),
                    sa.Column('component_styles', sa.JSON(), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_storefront_themes_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_storefront_themes'))
                    )
    op.create_index('idx_theme_tenant', 'storefront_themes',
                    ['tenant_id'], unique=False)
    op.create_table('payment_provider_configurations',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('settings_id', sa.Integer(), nullable=False),
                    sa.Column('provider', sa.String(
                        length=50), nullable=False),
                    sa.Column('enabled', sa.Boolean(), nullable=True),
                    sa.Column('is_default', sa.Boolean(), nullable=True),
                    sa.Column('_public_key', sa.String(
                        length=1000), nullable=True),
                    sa.Column('_secret_key', sa.String(
                        length=1000), nullable=True),
                    sa.Column('_encryption_key', sa.String(
                        length=1000), nullable=True),
                    sa.Column('webhook_secret', sa.String(
                        length=1000), nullable=True),
                    sa.Column('webhook_url', sa.String(
                        length=500), nullable=True),
                    sa.Column('additional_settings', sa.JSON(), nullable=True),
                    sa.Column('keys_last_rotated',
                              sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['settings_id'], ['payment_settings.id'], name=op.f(
                        'fk_payment_provider_configurations_settings_id_payment_settings')),
                    sa.PrimaryKeyConstraint('id', name=op.f(
                        'pk_payment_provider_configurations'))
                    )
    op.create_table('payment_rate_limit_logs',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('ip_address', sa.String(
                        length=45), nullable=False),
                    sa.Column('user_id', sa.UUID(), nullable=True),
                    sa.Column('endpoint', sa.String(
                        length=255), nullable=False),
                    sa.Column('request_count', sa.Integer(), nullable=True),
                    sa.Column('first_request_at',
                              sa.DateTime(), nullable=True),
                    sa.Column('last_request_at', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk_payment_rate_limit_logs_user_id_users')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_payment_rate_limit_logs'))
                    )
    op.create_index(op.f('ix_payment_rate_limit_logs_ip_address'),
                    'payment_rate_limit_logs', ['ip_address'], unique=False)
    op.create_index(op.f('ix_payment_rate_limit_logs_user_id'),
                    'payment_rate_limit_logs', ['user_id'], unique=False)
    op.create_table('seller_profiles',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('user_id', sa.UUID(), nullable=True),
                    sa.Column('store_name', sa.String(), nullable=True),
                    sa.Column('slug', sa.String(), nullable=True),
                    sa.Column('bio', sa.String(), nullable=True),
                    sa.Column('logo_url', sa.String(), nullable=True),
                    sa.Column('banner_url', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk_seller_profiles_user_id_users')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_seller_profiles')),
                    sa.UniqueConstraint('slug', name=op.f(
                        'uq_seller_profiles_slug'))
                    )
    op.create_table('conversation_events',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('conversation_id', sa.UUID(), nullable=True),
                    sa.Column('user_id', sa.UUID(), nullable=True),
                    sa.Column('event_type', sa.Enum('message_sent', 'message_read', 'product_clicked', 'order_placed', 'conversation_started',
                                                    'user_joined', 'user_left', 'conversation_closed', name='conversationeventtype'), nullable=False),
                    sa.Column('payload', postgresql.JSONB(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('tenant_id', sa.UUID(), nullable=False),
                    sa.Column('event_metadata', postgresql.JSONB(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('customer_id', sa.UUID(), nullable=True),
                    sa.Column('channel', sa.String(), nullable=True),
                    sa.Column('source', sa.String(), nullable=True),
                    sa.Column('product_id', sa.UUID(), nullable=True),
                    sa.Column('order_id', sa.UUID(), nullable=True),
                    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name=op.f(
                        'fk_conversation_events_customer_id_customers')),
                    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name=op.f(
                        'fk_conversation_events_order_id_orders')),
                    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f(
                        'fk_conversation_events_product_id_products')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_conversation_events_tenant_id_tenants')),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk_conversation_events_user_id_users')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_conversation_events'))
                    )
    op.create_table('payments',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('order_id', sa.UUID(), nullable=False),
                    sa.Column('reference', sa.String(
                        length=255), nullable=False),
                    sa.Column('amount', sa.Float(), nullable=False),
                    sa.Column('currency', sa.String(length=3), nullable=False),
                    sa.Column('provider', sa.String(
                        length=50), nullable=False),
                    sa.Column('status', sa.String(length=50), nullable=False),
                    sa.Column('customer_email', sa.String(
                        length=255), nullable=False),
                    sa.Column('customer_name', sa.String(
                        length=255), nullable=True),
                    sa.Column('payment_method', sa.String(
                        length=50), nullable=True),
                    sa.Column('transaction_date', sa.String(
                        length=50), nullable=True),
                    sa.Column('provider_reference', sa.String(
                        length=255), nullable=True),
                    sa.Column('payment_metadata', sa.JSON(), nullable=True),
                    sa.Column('verified_at', sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('idempotency_key', sa.String(
                        length=255), nullable=True),
                    sa.Column('ip_address', sa.String(
                        length=45), nullable=True),
                    sa.Column('user_agent', sa.String(
                        length=255), nullable=True),
                    sa.Column('risk_score', sa.Float(), nullable=True),
                    sa.ForeignKeyConstraint(['order_id'], ['orders.id'],
                                            name=op.f('fk_payments_order_id_orders')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_payments'))
                    )
    op.create_index(op.f('ix_payments_idempotency_key'),
                    'payments', ['idempotency_key'], unique=True)
    op.create_index(op.f('ix_payments_order_id'),
                    'payments', ['order_id'], unique=False)
    op.create_index(op.f('ix_payments_reference'),
                    'payments', ['reference'], unique=True)
    op.create_table('manual_payment_proofs',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('payment_id', sa.UUID(), nullable=False),
                    sa.Column('reference', sa.String(
                        length=255), nullable=False),
                    sa.Column('transfer_date', sa.String(
                        length=10), nullable=False),
                    sa.Column('bank_name', sa.String(
                        length=255), nullable=True),
                    sa.Column('account_name', sa.String(
                        length=255), nullable=True),
                    sa.Column('screenshot_url', sa.String(
                        length=500), nullable=True),
                    sa.Column('notes', sa.Text(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], name=op.f(
                        'fk_manual_payment_proofs_payment_id_payments')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_manual_payment_proofs')),
                    sa.UniqueConstraint('payment_id', name=op.f(
                        'uq_manual_payment_proofs_payment_id'))
                    )
    op.create_table('payment_audit_logs',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('payment_id', sa.UUID(), nullable=False),
                    sa.Column('action', sa.String(length=50), nullable=False),
                    sa.Column('previous_status', sa.String(
                        length=50), nullable=True),
                    sa.Column('new_status', sa.String(
                        length=50), nullable=True),
                    sa.Column('user_id', sa.UUID(), nullable=True),
                    sa.Column('ip_address', sa.String(
                        length=45), nullable=True),
                    sa.Column('changes', sa.JSON(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], name=op.f(
                        'fk_payment_audit_logs_payment_id_payments')),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk_payment_audit_logs_user_id_users')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_payment_audit_logs'))
                    )
    # op.drop_table('kyc_info')
    # op.drop_index('idx_template_parent',
    #               table_name='storefront_page_templates')
    # op.drop_index('idx_template_tenant',
    #               table_name='storefront_page_templates')
    # op.drop_index('idx_template_type', table_name='storefront_page_templates')
    # op.drop_table('storefront_page_templates')
    # op.drop_index('idx_storefront_permission_tenant',
    #               table_name='storefront_permissions')
    # op.drop_index('idx_storefront_permission_user',
    #               table_name='storefront_permissions')
    # op.drop_table('storefront_permissions')
    # op.drop_table('alembic_version')
    # op.drop_table('order_channel_meta')
    # op.drop_table('team_invite')
    # op.drop_table('audit_logs')
    # op.drop_table('content_analysis_results')
    # op.drop_index('idx_storefront_version_created',
    #               table_name='storefront_versions')
    # op.drop_index('idx_unique_storefront_version',
    #               table_name='storefront_versions')
    # op.drop_table('storefront_versions')
    # op.drop_index('idx_component_tenant', table_name='storefront_components')
    # op.drop_index('idx_component_type', table_name='storefront_components')
    # op.drop_table('storefront_components')
    # op.drop_table('order_items')
    # op.drop_table('alert_config')
    # op.drop_table('content_filter_rules')
    # op.drop_table('behavior_patterns')
    # op.drop_table('pattern_detections')
    # op.drop_table('violations')
    # op.drop_table('kyc_document')
    # op.drop_index('ix_shipping_couriers_tenant_id',
    #               table_name='shipping_couriers')
    # op.drop_table('shipping_couriers')
    # op.drop_table('evidence')
    # op.drop_index('idx_logo_tenant', table_name='storefront_logos')
    # op.drop_index('idx_logo_variant', table_name='storefront_logos')
    # op.drop_index('idx_unique_active_logo_variant',
    #               table_name='storefront_logos', postgresql_where='is_active')
    # op.drop_table('storefront_logos')
    # op.drop_table('ai_config')
    # op.drop_index('idx_asset_parent', table_name='storefront_assets')
    # op.drop_index('idx_asset_tenant', table_name='storefront_assets')
    # op.drop_index('idx_asset_type', table_name='storefront_assets')
    # op.drop_table('storefront_assets')
    # op.drop_index('ix_seller_shipping_providers_tenant_id',
    #               table_name='seller_shipping_providers')
    # op.drop_table('seller_shipping_providers')
    # op.drop_table('conversation_history')
    # op.drop_index('idx_banner_active_tenant', table_name='storefront_banners')
    # op.drop_index('idx_banner_placement', table_name='storefront_banners')
    # op.drop_index('idx_banner_scheduling', table_name='storefront_banners')
    # op.drop_index('idx_banner_tenant', table_name='storefront_banners')
    # op.drop_table('storefront_banners')
    # op.drop_index('idx_draft_storefront_config',
    #               table_name='storefront_drafts')
    # op.drop_table('storefront_drafts')
    op.create_foreign_key(op.f('fk_complaints_user_id_users'),
                          'complaints', 'users', ['user_id'], ['id'])
    op.create_foreign_key(op.f('fk_complaints_order_id_orders'),
                          'complaints', 'orders', ['order_id'], ['id'])
    op.create_foreign_key(op.f('fk_complaints_tenant_id_tenants'),
                          'complaints', 'tenants', ['tenant_id'], ['id'])
    op.create_foreign_key(op.f('fk_complaints_product_id_products'),
                          'complaints', 'products', ['product_id'], ['id'])
    op.create_index(op.f('ix_customers_instagram_handle'),
                    'customers', ['instagram_handle'], unique=True)
    op.create_index(op.f('ix_customers_whatsapp_id'),
                    'customers', ['whatsapp_id'], unique=True)
    op.drop_index('ix_products_tenant_id', table_name='products')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('ix_products_tenant_id', 'products',
                    ['tenant_id'], unique=False)
    op.drop_index(op.f('ix_customers_whatsapp_id'), table_name='customers')
    op.drop_index(op.f('ix_customers_instagram_handle'),
                  table_name='customers')
    op.drop_constraint(op.f('fk_complaints_product_id_products'),
                       'complaints', type_='foreignkey')
    op.drop_constraint(op.f('fk_complaints_tenant_id_tenants'),
                       'complaints', type_='foreignkey')
    op.drop_constraint(op.f('fk_complaints_order_id_orders'),
                       'complaints', type_='foreignkey')
    op.drop_constraint(op.f('fk_complaints_user_id_users'),
                       'complaints', type_='foreignkey')
    op.create_table('storefront_drafts',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('storefront_config_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_by', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('expires_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.Column('subdomain_name', sa.VARCHAR(length=63),
                              autoincrement=False, nullable=False),
                    sa.Column('custom_domain', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('meta_title', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('meta_description', sa.VARCHAR(length=500),
                              autoincrement=False, nullable=True),
                    sa.Column('theme_settings', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('layout_config', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('social_links', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'],
                                            name='fk_storefront_drafts_created_by_users'),
                    sa.ForeignKeyConstraint(['storefront_config_id'], ['storefront_configs.id'],
                                            name='fk_storefront_drafts_storefront_config_id_storefront_configs', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name='pk_storefront_drafts')
                    )
    op.create_index('idx_draft_storefront_config', 'storefront_drafts', [
                    'storefront_config_id'], unique=False)
    op.create_table('storefront_banners',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=False),
                    sa.Column('banner_type', postgresql.ENUM('HERO', 'PROMOTIONAL', 'ANNOUNCEMENT', 'CATEGORY',
                                                             'SEASONAL', 'CUSTOM', name='bannertype'), autoincrement=False, nullable=False),
                    sa.Column('placement', postgresql.ENUM('HEADER', 'HOMEPAGE', 'CATEGORY_PAGE', 'PRODUCT_PAGE',
                                                           'FOOTER', 'SIDEBAR', 'POPUP', name='bannerplacement'), autoincrement=False, nullable=False),
                    sa.Column('title', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('subtitle', sa.VARCHAR(length=500),
                              autoincrement=False, nullable=True),
                    sa.Column('content', sa.VARCHAR(length=1000),
                              autoincrement=False, nullable=True),
                    sa.Column('call_to_action', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('link_url', sa.VARCHAR(length=500),
                              autoincrement=False, nullable=True),
                    sa.Column('asset_id', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('design_settings', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('start_date', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True),
                              autoincrement=False, nullable=True),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('priority', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('targeting_rules', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('impressions', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('clicks', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('conversions', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['asset_id'], ['storefront_assets.id'],
                                            name='fk_storefront_banners_asset_id_storefront_assets'),
                    sa.ForeignKeyConstraint(['tenant_id'], [
                        'tenants.id'], name='fk_storefront_banners_tenant_id_tenants', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name='pk_storefront_banners')
                    )
    op.create_index('idx_banner_tenant', 'storefront_banners',
                    ['tenant_id'], unique=False)
    op.create_index('idx_banner_scheduling', 'storefront_banners', [
                    'start_date', 'end_date'], unique=False)
    op.create_index('idx_banner_placement', 'storefront_banners', [
                    'tenant_id', 'placement'], unique=False)
    op.create_index('idx_banner_active_tenant', 'storefront_banners', [
                    'tenant_id', 'is_active'], unique=False)
    op.create_table('conversation_history',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('order_id', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('message', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('sender_type', postgresql.ENUM('merchant', 'customer',
                                                             'bot', name='sendertype'), autoincrement=False, nullable=False),
                    sa.Column('channel', postgresql.ENUM('whatsapp', 'instagram', 'storefront',
                                                         name='channeltype'), autoincrement=False, nullable=False),
                    sa.Column('timestamp', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['order_id'], ['orders.id'],
                                            name='fk_conversation_history_order_id_orders'),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_conversation_history_tenant_id_tenants'),
                    sa.PrimaryKeyConstraint(
                        'id', name='pk_conversation_history')
                    )
    op.create_table('seller_shipping_providers',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('provider_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('description', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('base_fee', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('per_km_fee', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('min_distance', sa.DOUBLE_PRECISION(
                        precision=53), autoincrement=False, nullable=False),
                    sa.Column('max_distance', sa.DOUBLE_PRECISION(
                        precision=53), autoincrement=False, nullable=False),
                    sa.Column('coverage_area', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=True),
                    sa.Column('contact_name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('contact_phone', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('contact_whatsapp', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('estimated_delivery_time', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('delivery_days', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=True),
                    sa.Column('delivery_hours', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=True),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('is_default', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('onboarding_status', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('onboarding_completed', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_seller_shipping_providers_tenant_id_tenants'),
                    sa.PrimaryKeyConstraint(
                        'id', name='pk_seller_shipping_providers'),
                    postgresql_ignore_search_path=False
                    )
    op.create_index('ix_seller_shipping_providers_tenant_id',
                    'seller_shipping_providers', ['tenant_id'], unique=False)
    op.create_table('storefront_assets',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('filename', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=False),
                    sa.Column('original_filename', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('file_path', sa.VARCHAR(length=512),
                              autoincrement=False, nullable=False),
                    sa.Column('file_size', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('mime_type', sa.VARCHAR(length=127),
                              autoincrement=False, nullable=False),
                    sa.Column('asset_type', postgresql.ENUM('IMAGE', 'VIDEO', 'DOCUMENT',
                                                            'AUDIO', 'OTHER', name='assettype'), autoincrement=False, nullable=False),
                    sa.Column('alt_text', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('title', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('description', sa.VARCHAR(length=1000),
                              autoincrement=False, nullable=True),
                    sa.Column('asset_metadata', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('usage_count', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('usage_locations', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('version', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('parent_asset_id', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('is_optimized', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['parent_asset_id'], ['storefront_assets.id'],
                                            name='fk_storefront_assets_parent_asset_id_storefront_assets'),
                    sa.ForeignKeyConstraint(['tenant_id'], [
                        'tenants.id'], name='fk_storefront_assets_tenant_id_tenants', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name='pk_storefront_assets'),
                    postgresql_ignore_search_path=False
                    )
    op.create_index('idx_asset_type', 'storefront_assets', [
                    'tenant_id', 'asset_type'], unique=False)
    op.create_index('idx_asset_tenant', 'storefront_assets',
                    ['tenant_id'], unique=False)
    op.create_index('idx_asset_parent', 'storefront_assets',
                    ['parent_asset_id'], unique=False)
    op.create_table('ai_config',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('merchant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('style_tone', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('auto_reply_enabled', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('active_hours', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('bot_name', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['merchant_id'], ['users.id'],
                                            name='fk_ai_config_merchant_id_users'),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_ai_config_tenant_id_tenants'),
                    sa.PrimaryKeyConstraint('id', name='pk_ai_config')
                    )
    op.create_table('storefront_logos',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('variant', postgresql.ENUM('PRIMARY', 'SECONDARY', 'DARK', 'LIGHT', 'MONOCHROME',
                                                         'FAVICON', 'MOBILE', name='logovariant'), autoincrement=False, nullable=False),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('asset_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('display_settings', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('alt_text', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=False),
                    sa.Column('responsive_settings', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['asset_id'], ['storefront_assets.id'],
                                            name='fk_storefront_logos_asset_id_storefront_assets'),
                    sa.ForeignKeyConstraint(['tenant_id'], [
                        'tenants.id'], name='fk_storefront_logos_tenant_id_tenants', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name='pk_storefront_logos')
                    )
    op.create_index('idx_unique_active_logo_variant', 'storefront_logos', [
                    'tenant_id', 'variant', 'is_active'], unique=True, postgresql_where='is_active')
    op.create_index('idx_logo_variant', 'storefront_logos',
                    ['tenant_id', 'variant'], unique=False)
    op.create_index('idx_logo_tenant', 'storefront_logos',
                    ['tenant_id'], unique=False)
    op.create_table('evidence',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('detection_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('evidence_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('source', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('data', postgresql.JSON(astext_type=sa.Text()),
                              autoincrement=False, nullable=False),
                    sa.Column('collected_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['detection_id'], [
                        'pattern_detections.id'], name='fk_evidence_detection_id_pattern_detections'),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_evidence_tenant_id_tenants'),
                    sa.PrimaryKeyConstraint('id', name='pk_evidence')
                    )
    op.create_table('shipping_couriers',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('provider_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('phone', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('whatsapp', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('vehicle_type', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('vehicle_description', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('profile_photo_url', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('available', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('onboarding_completed', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('onboarding_date', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['provider_id'], ['seller_shipping_providers.id'],
                                            name='fk_shipping_couriers_provider_id_seller_shipping_providers'),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_shipping_couriers_tenant_id_tenants'),
                    sa.PrimaryKeyConstraint('id', name='pk_shipping_couriers')
                    )
    op.create_index('ix_shipping_couriers_tenant_id',
                    'shipping_couriers', ['tenant_id'], unique=False)
    op.create_table('kyc_document',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('kyc_info_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('file_url', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('file_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('status', postgresql.ENUM('uploaded', 'verified', 'rejected',
                                                        name='kycdocumentstatusenum'), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(
                        ['kyc_info_id'], ['kyc_info.id'], name='fk_kyc_document_kyc_info_id_kyc_info'),
                    sa.PrimaryKeyConstraint('id', name='pk_kyc_document')
                    )
    op.create_table('violations',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('user_id', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('detection_id', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('severity', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('action', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('status', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('reason', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('details', postgresql.JSON(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('start_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('end_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['detection_id'], [
                        'pattern_detections.id'], name='fk_violations_detection_id_pattern_detections'),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_violations_tenant_id_tenants'),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'],
                                            name='fk_violations_user_id_users'),
                    sa.PrimaryKeyConstraint('id', name='pk_violations')
                    )
    op.create_table('pattern_detections',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('pattern_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('user_id', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('detection_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('confidence_score', sa.DOUBLE_PRECISION(
                        precision=53), autoincrement=False, nullable=False),
                    sa.Column('status', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('review_status', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('reviewed_by', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('reviewed_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('resolution_notes', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['pattern_id'], ['behavior_patterns.id'],
                                            name='fk_pattern_detections_pattern_id_behavior_patterns'),
                    sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'],
                                            name='fk_pattern_detections_reviewed_by_users'),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_pattern_detections_tenant_id_tenants'),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'],
                                            name='fk_pattern_detections_user_id_users'),
                    sa.PrimaryKeyConstraint('id', name='pk_pattern_detections')
                    )
    op.create_table('behavior_patterns',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('description', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('pattern_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('conditions', postgresql.JSON(astext_type=sa.Text()),
                              autoincrement=False, nullable=False),
                    sa.Column('severity', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('threshold', sa.DOUBLE_PRECISION(precision=53),
                              autoincrement=False, nullable=False),
                    sa.Column('cooldown_minutes', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('enabled', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_behavior_patterns_tenant_id_tenants'),
                    sa.PrimaryKeyConstraint('id', name='pk_behavior_patterns')
                    )
    op.create_table('content_filter_rules',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('description', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('content_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('field', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('condition', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('value', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('severity', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('action', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('enabled', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_content_filter_rules_tenant_id_tenants'),
                    sa.PrimaryKeyConstraint(
                        'id', name='pk_content_filter_rules'),
                    postgresql_ignore_search_path=False
                    )
    op.create_table('alert_config',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('event_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('enabled', sa.BOOLEAN(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_alert_config_tenant_id_tenants'),
                    sa.PrimaryKeyConstraint('id', name='pk_alert_config')
                    )
    op.create_table('order_items',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('order_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('product_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('quantity', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('price', sa.DOUBLE_PRECISION(precision=53),
                              autoincrement=False, nullable=False),
                    sa.Column('subtotal', sa.DOUBLE_PRECISION(precision=53),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', sa.VARCHAR(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['order_id'], ['orders.id'],
                                            name='fk_order_items_order_id_orders'),
                    sa.ForeignKeyConstraint(['product_id'], ['products.id'],
                                            name='fk_order_items_product_id_products'),
                    sa.PrimaryKeyConstraint('id', name='pk_order_items')
                    )
    op.create_table('storefront_components',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=False),
                    sa.Column('component_type', postgresql.ENUM('HERO', 'CAROUSEL', 'PRODUCT_GRID', 'PRODUCT_LIST', 'FEATURED_PRODUCTS', 'CATEGORY_SHOWCASE', 'TEXT_BLOCK', 'IMAGE_BLOCK',
                                                                'VIDEO_BLOCK', 'TESTIMONIALS', 'NEWSLETTER_SIGNUP', 'CONTACT_FORM', 'CALL_TO_ACTION', 'SOCIAL_FEED', 'CUSTOM', name='componenttype'), autoincrement=False, nullable=False),
                    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=False),
                    sa.Column('constraints', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=False),
                    sa.Column('allowed_placements', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('version', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=False),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('property_schema', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], [
                        'tenants.id'], name='fk_storefront_components_tenant_id_tenants', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint(
                        'id', name='pk_storefront_components')
                    )
    op.create_index('idx_component_type', 'storefront_components', [
                    'tenant_id', 'component_type'], unique=False)
    op.create_index('idx_component_tenant', 'storefront_components', [
                    'tenant_id'], unique=False)
    op.create_table('storefront_versions',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('storefront_config_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('version_number', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_by', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('change_summary', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('change_description', sa.TEXT(),
                              autoincrement=False, nullable=True),
                    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('configuration_snapshot', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'],
                                            name='fk_storefront_versions_created_by_users'),
                    sa.ForeignKeyConstraint(['storefront_config_id'], ['storefront_configs.id'],
                                            name='fk_storefront_versions_storefront_config_id_storefront_configs', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint(
                        'id', name='pk_storefront_versions')
                    )
    op.create_index('idx_unique_storefront_version', 'storefront_versions', [
                    'storefront_config_id', 'version_number'], unique=True)
    op.create_index('idx_storefront_version_created', 'storefront_versions', [
                    'storefront_config_id', 'created_at'], unique=False)
    op.create_table('content_analysis_results',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('rule_id', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('content_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('content_id', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('field', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('original_content', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('analysis_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('result', postgresql.JSON(astext_type=sa.Text()),
                              autoincrement=False, nullable=False),
                    sa.Column('status', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('review_status', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('reviewed_by', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('reviewed_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'],
                                            name='fk_content_analysis_results_reviewed_by_users'),
                    sa.ForeignKeyConstraint(['rule_id'], ['content_filter_rules.id'],
                                            name='fk_content_analysis_results_rule_id_content_filter_rules'),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_content_analysis_results_tenant_id_tenants'),
                    sa.PrimaryKeyConstraint(
                        'id', name='pk_content_analysis_results')
                    )
    op.create_table('audit_logs',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('user_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('action', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('resource_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('resource_id', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('ip_address', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('user_agent', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('details', postgresql.JSON(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('timestamp', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_audit_logs_tenant_id_tenants'),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'],
                                            name='fk_audit_logs_user_id_users'),
                    sa.PrimaryKeyConstraint('id', name='pk_audit_logs')
                    )
    op.create_table('team_invite',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('invitee_phone', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('invitee_email', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('role', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('status', postgresql.ENUM('pending', 'accepted', 'expired', 'revoked',
                                                        name='teaminvitestatusenum'), autoincrement=False, nullable=False),
                    sa.Column('invited_by', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('accepted_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_team_invite_tenant_id_tenants'),
                    sa.PrimaryKeyConstraint('id', name='pk_team_invite')
                    )
    op.create_table('order_channel_meta',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('order_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('channel', postgresql.ENUM('whatsapp', 'instagram', 'storefront',
                                                         name='channeltype'), autoincrement=False, nullable=False),
                    sa.Column('message_id', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('chat_session_id', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('user_response_log', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['order_id'], ['orders.id'],
                                            name='fk_order_channel_meta_order_id_orders'),
                    sa.PrimaryKeyConstraint('id', name='pk_order_channel_meta')
                    )
    op.create_table('alembic_version',
                    sa.Column('version_num', sa.VARCHAR(length=32),
                              autoincrement=False, nullable=False),
                    sa.PrimaryKeyConstraint(
                        'version_num', name='alembic_version_pkc')
                    )
    op.create_table('storefront_permissions',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('user_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('role', postgresql.ENUM('VIEWER', 'EDITOR', 'PUBLISHER',
                                                      'ADMIN', name='storefrontrole'), autoincrement=False, nullable=False),
                    sa.Column('section_permissions', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('component_permissions', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], [
                        'tenants.id'], name='fk_storefront_permissions_tenant_id_tenants', ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], [
                        'users.id'], name='fk_storefront_permissions_user_id_users', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint(
                        'id', name='pk_storefront_permissions'),
                    sa.UniqueConstraint('tenant_id', 'user_id',
                                        name='uq_user_tenant_permission')
                    )
    op.create_index('idx_storefront_permission_user',
                    'storefront_permissions', ['user_id'], unique=False)
    op.create_index('idx_storefront_permission_tenant',
                    'storefront_permissions', ['tenant_id'], unique=False)
    op.create_table('storefront_page_templates',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=False),
                    sa.Column('page_type', postgresql.ENUM('HOME', 'PRODUCT', 'CATEGORY', 'ABOUT', 'CONTACT', 'CUSTOM',
                                                           'CHECKOUT', 'CART', 'ACCOUNT', 'POLICY', name='pagetype'), autoincrement=False, nullable=False),
                    sa.Column('description', sa.TEXT(),
                              autoincrement=False, nullable=True),
                    sa.Column('layout_structure', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('component_slots', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('parent_template_id', sa.UUID(),
                              autoincrement=False, nullable=True),
                    sa.Column('inheritance_rules', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('is_system', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('is_active', sa.BOOLEAN(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['parent_template_id'], ['storefront_page_templates.id'],
                                            name='fk_storefront_page_templates_parent_template_id_storefr_bbc6'),
                    sa.ForeignKeyConstraint(['tenant_id'], [
                        'tenants.id'], name='fk_storefront_page_templates_tenant_id_tenants', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint(
                        'id', name='pk_storefront_page_templates')
                    )
    op.create_index('idx_template_type', 'storefront_page_templates', [
                    'tenant_id', 'page_type'], unique=False)
    op.create_index('idx_template_tenant', 'storefront_page_templates', [
                    'tenant_id'], unique=False)
    op.create_index('idx_template_parent', 'storefront_page_templates', [
                    'parent_template_id'], unique=False)
    op.create_table('kyc_info',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('tenant_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('business_name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('id_number', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('id_type', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('status', postgresql.ENUM('pending', 'approved', 'rejected',
                                                        name='kycstatusenum'), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), autoincrement=False, nullable=True),
                    sa.Column('updated_at', postgresql.TIMESTAMP(
                        timezone=True), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'],
                                            name='fk_kyc_info_tenant_id_tenants'),
                    sa.PrimaryKeyConstraint('id', name='pk_kyc_info')
                    )
    op.drop_table('payment_audit_logs')
    op.drop_table('manual_payment_proofs')
    op.drop_index(op.f('ix_payments_reference'), table_name='payments')
    op.drop_index(op.f('ix_payments_order_id'), table_name='payments')
    op.drop_index(op.f('ix_payments_idempotency_key'), table_name='payments')
    op.drop_table('payments')
    op.drop_table('conversation_events')
    op.drop_table('seller_profiles')
    op.drop_index(op.f('ix_payment_rate_limit_logs_user_id'),
                  table_name='payment_rate_limit_logs')
    op.drop_index(op.f('ix_payment_rate_limit_logs_ip_address'),
                  table_name='payment_rate_limit_logs')
    op.drop_table('payment_rate_limit_logs')
    op.drop_table('payment_provider_configurations')
    op.drop_index('idx_theme_tenant', table_name='storefront_themes')
    op.drop_table('storefront_themes')
    op.drop_table('payment_split_rules')
    op.drop_table('payment_settings')
    op.drop_index(op.f('ix_notification_preferences_customer_id'),
                  table_name='notification_preferences')
    op.drop_table('notification_preferences')
    op.drop_index(op.f('ix_address_book_customer_id'),
                  table_name='address_book')
    op.drop_table('address_book')
    # ### end Alembic commands ###
