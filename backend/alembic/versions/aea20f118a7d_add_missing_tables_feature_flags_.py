"""add missing tables feature flags settings returns analytics security

Revision ID: aea20f118a7d
Revises: 20250630_add_super_admin_rbac_tables
Create Date: 2025-01-27 10:30:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'aea20f118a7d'
down_revision = '20250630_admin_rbac'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create feature_flags table
    op.create_table('feature_flags',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('key', sa.String(length=100), nullable=False),
                    sa.Column('name', sa.String(length=200), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('is_enabled', sa.Boolean(), nullable=False),
                    sa.Column('feature_type', sa.String(
                        length=50), nullable=False),
                    sa.Column('config', postgresql.JSON(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('created_by', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('updated_by', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f(
                        'fk_feature_flags_created_by_users')),
                    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f(
                        'fk_feature_flags_updated_by_users')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_feature_flags')),
                    sa.UniqueConstraint(
                        'key', name=op.f('uq_feature_flags_key'))
                    )
    op.create_index(op.f('ix_feature_flags_key'),
                    'feature_flags', ['key'], unique=False)

    # Create tenant_feature_flag_overrides table
    op.create_table('tenant_feature_flag_overrides',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('feature_flag_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('tenant_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('is_enabled', sa.Boolean(), nullable=False),
                    sa.Column('config_override', postgresql.JSON(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('created_by', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('updated_by', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['feature_flag_id'], ['feature_flags.id'], name=op.f(
                        'fk_tenant_feature_flag_overrides_feature_flag_id_feature_flags')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_tenant_feature_flag_overrides_tenant_id_tenants')),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f(
                        'fk_tenant_feature_flag_overrides_created_by_users')),
                    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f(
                        'fk_tenant_feature_flag_overrides_updated_by_users')),
                    sa.PrimaryKeyConstraint('id', name=op.f(
                        'pk_tenant_feature_flag_overrides')),
                    sa.UniqueConstraint('tenant_id', 'feature_flag_id', name=op.f(
                        'uq_tenant_feature_flag_overrides_tenant_id_feature_flag_id'))
                    )

    # Create settings_domains table
    op.create_table('settings_domains',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('name', sa.String(length=64), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('icon', sa.String(length=64), nullable=True),
                    sa.Column('order', sa.Integer(), nullable=False),
                    sa.Column('tenant_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('is_system', sa.Boolean(), nullable=False),
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_settings_domains_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_settings_domains')),
                    sa.UniqueConstraint('name', 'tenant_id', name=op.f(
                        'uq_settings_domains_name_tenant_id'))
                    )

    # Create settings table
    op.create_table('settings',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('key', sa.String(length=128), nullable=False),
                    sa.Column('value', postgresql.JSON(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('value_type', sa.String(
                        length=32), nullable=False),
                    sa.Column('schema', postgresql.JSON(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('domain_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('tenant_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('is_encrypted', sa.Boolean(), nullable=False),
                    sa.Column('is_system', sa.Boolean(), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('default_value', postgresql.JSON(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('is_required', sa.Boolean(), nullable=False),
                    sa.Column('ui_component', sa.String(
                        length=64), nullable=True),
                    sa.Column('ui_order', sa.Integer(), nullable=False),
                    sa.Column('validation_rules', postgresql.JSON(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('last_modified_by', sa.String(
                        length=36), nullable=True),
                    sa.Column('last_modified_at',
                              sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.ForeignKeyConstraint(['domain_id'], ['settings_domains.id'], name=op.f(
                        'fk_settings_domain_id_settings_domains')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_settings_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_settings')),
                    sa.UniqueConstraint('key', 'domain_id', 'tenant_id', name=op.f(
                        'uq_settings_key_domain_id_tenant_id'))
                    )

    # Create return_requests table
    op.create_table('return_requests',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('tenant_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('order_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('customer_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('return_number', sa.String(), nullable=False),
                    sa.Column('status', sa.String(), nullable=False),
                    sa.Column('reason', sa.String(), nullable=False),
                    sa.Column('explanation', sa.Text(), nullable=True),
                    sa.Column('requested_at', sa.DateTime(), nullable=False),
                    sa.Column('processed_at', sa.DateTime(), nullable=True),
                    sa.Column('completed_at', sa.DateTime(), nullable=True),
                    sa.Column('return_shipping_required',
                              sa.Boolean(), nullable=False),
                    sa.Column('return_shipping_method',
                              sa.String(), nullable=True),
                    sa.Column('return_shipping_carrier',
                              sa.String(), nullable=True),
                    sa.Column('tracking_number', sa.String(), nullable=True),
                    sa.Column('tracking_url', sa.String(), nullable=True),
                    sa.Column('return_address', postgresql.JSONB(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('refund_method', sa.String(), nullable=True),
                    sa.Column('refund_amount', sa.Integer(), nullable=True),
                    sa.Column('refund_currency', sa.String(), nullable=False),
                    sa.Column('refund_processed_at',
                              sa.DateTime(), nullable=True),
                    sa.Column('refund_transaction_id',
                              sa.String(), nullable=True),
                    sa.Column('approved_by', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('rejection_reason', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['customer_id'], ['users.id'], name=op.f(
                        'fk_return_requests_customer_id_users')),
                    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name=op.f(
                        'fk_return_requests_order_id_orders')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_return_requests_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_return_requests'))
                    )
    op.create_index(op.f('ix_return_requests_tenant_id'),
                    'return_requests', ['tenant_id'], unique=False)

    # Create return_items table
    op.create_table('return_items',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('return_request_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('order_item_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('tenant_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('quantity', sa.Integer(), nullable=False),
                    sa.Column('reason', sa.String(), nullable=False),
                    sa.Column('item_condition', sa.String(), nullable=True),
                    sa.Column('status', sa.String(), nullable=False),
                    sa.Column('refund_amount', sa.Integer(), nullable=True),
                    sa.Column('refund_tax_amount',
                              sa.Integer(), nullable=True),
                    sa.Column('refund_shipping_amount',
                              sa.Integer(), nullable=True),
                    sa.Column('restocked', sa.Boolean(), nullable=False),
                    sa.Column('restocked_quantity',
                              sa.Integer(), nullable=False),
                    sa.Column('restocked_at', sa.DateTime(), nullable=True),
                    sa.Column('store_notes', sa.Text(), nullable=True),
                    sa.Column('customer_notes', sa.Text(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['order_item_id'], ['order_items.id'], name=op.f(
                        'fk_return_items_order_item_id_order_items')),
                    sa.ForeignKeyConstraint(['return_request_id'], ['return_requests.id'], name=op.f(
                        'fk_return_items_return_request_id_return_requests')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_return_items_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_return_items'))
                    )
    op.create_index(op.f('ix_return_items_tenant_id'),
                    'return_items', ['tenant_id'], unique=False)

    # Create analytics_events table
    op.create_table('analytics_events',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('tenant_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('event_type', sa.String(
                        length=50), nullable=False),
                    sa.Column('event_category', sa.String(
                        length=50), nullable=False),
                    sa.Column('event_name', sa.String(
                        length=100), nullable=False),
                    sa.Column('event_value', sa.Float(), nullable=True),
                    sa.Column('event_data', postgresql.JSON(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('user_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('session_id', sa.String(
                        length=100), nullable=True),
                    sa.Column('ip_address', sa.String(
                        length=50), nullable=True),
                    sa.Column('user_agent', sa.String(
                        length=255), nullable=True),
                    sa.Column('referrer', sa.String(
                        length=255), nullable=True),
                    sa.Column('page_url', sa.String(
                        length=255), nullable=True),
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_analytics_events_tenant_id_tenants')),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk_analytics_events_user_id_users')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_analytics_events'))
                    )
    op.create_index(op.f('ix_analytics_events_id'),
                    'analytics_events', ['id'], unique=False)
    op.create_index(op.f('ix_analytics_events_event_type'),
                    'analytics_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_analytics_events_event_category'),
                    'analytics_events', ['event_category'], unique=False)
    op.create_index(op.f('ix_analytics_events_event_name'),
                    'analytics_events', ['event_name'], unique=False)
    op.create_index(op.f('ix_analytics_events_session_id'),
                    'analytics_events', ['session_id'], unique=False)

    # Create analytics_reports table
    op.create_table('analytics_reports',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('tenant_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('name', sa.String(length=100), nullable=False),
                    sa.Column('description', sa.String(
                        length=255), nullable=True),
                    sa.Column('report_type', sa.String(
                        length=50), nullable=False),
                    sa.Column('filters', postgresql.JSON(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('metrics', postgresql.JSON(
                        astext_type=sa.Text()), nullable=False),
                    sa.Column('dimensions', postgresql.JSON(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('date_range', postgresql.JSON(
                        astext_type=sa.Text()), nullable=False),
                    sa.Column('visualization_type', sa.String(
                        length=50), nullable=False),
                    sa.Column('visualization_config', postgresql.JSON(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('is_scheduled', sa.Boolean(), nullable=False),
                    sa.Column('schedule_config', postgresql.JSON(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('created_by', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f(
                        'fk_analytics_reports_created_by_users')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_analytics_reports_tenant_id_tenants')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_analytics_reports'))
                    )
    op.create_index(op.f('ix_analytics_reports_id'),
                    'analytics_reports', ['id'], unique=False)

    # Create ip_allowlist_entries table
    op.create_table('ip_allowlist_entries',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('ip_range', postgresql.CIDR(), nullable=False),
                    sa.Column('description', sa.String(
                        length=255), nullable=True),
                    sa.Column('expires_at', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('user_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('role_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('tenant_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('is_global', sa.Boolean(), nullable=False),
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('created_by', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('updated_by', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.ForeignKeyConstraint(['role_id'], ['admin_roles.id'], name=op.f(
                        'fk_ip_allowlist_entries_role_id_admin_roles')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_ip_allowlist_entries_tenant_id_tenants')),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk_ip_allowlist_entries_user_id_users')),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f(
                        'fk_ip_allowlist_entries_created_by_users')),
                    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f(
                        'fk_ip_allowlist_entries_updated_by_users')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_ip_allowlist_entries'))
                    )

    # Create ip_allowlist_settings table
    op.create_table('ip_allowlist_settings',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('tenant_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('role_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('is_enforced', sa.Boolean(), nullable=False),
                    sa.Column('allow_temporary_bypass',
                              sa.Boolean(), nullable=False),
                    sa.Column('temporary_bypass_duration_minutes',
                              sa.Integer(), nullable=False),
                    sa.Column('geo_restrict_countries', postgresql.ARRAY(
                        sa.String(length=2)), nullable=True),
                    sa.Column('geo_block_countries', postgresql.ARRAY(
                        sa.String(length=2)), nullable=True),
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('created_by', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('updated_by', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f(
                        'fk_ip_allowlist_settings_created_by_users')),
                    sa.ForeignKeyConstraint(['role_id'], ['admin_roles.id'], name=op.f(
                        'fk_ip_allowlist_settings_role_id_admin_roles')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_ip_allowlist_settings_tenant_id_tenants')),
                    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f(
                        'fk_ip_allowlist_settings_updated_by_users')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_ip_allowlist_settings'))
                    )

    # Create ip_temporary_bypass table
    op.create_table('ip_temporary_bypass',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('user_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('ip_address', postgresql.INET(), nullable=False),
                    sa.Column('reason', sa.String(length=255), nullable=False),
                    sa.Column('expires_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('created_by', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f(
                        'fk_ip_temporary_bypass_created_by_users')),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk_ip_temporary_bypass_user_id_users')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_ip_temporary_bypass'))
                    )

    # Create login_attempts table
    op.create_table('login_attempts',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('user_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('email', sa.String(length=255), nullable=False),
                    sa.Column('ip_address', postgresql.INET(), nullable=False),
                    sa.Column('user_agent', sa.String(
                        length=500), nullable=True),
                    sa.Column('result', sa.Enum('SUCCESS', 'FAILED_PASSWORD', 'FAILED_2FA', 'LOCKED_OUT',
                                                'RATE_LIMITED', 'SUSPICIOUS', 'INVALID_USER', name='loginattemptresult'), nullable=False),
                    sa.Column('attempted_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('successful', sa.Boolean(), nullable=False),
                    sa.Column('failure_reason', sa.String(
                        length=255), nullable=True),
                    sa.Column('metadata', postgresql.JSONB(
                        astext_type=sa.Text()), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk_login_attempts_user_id_users')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_login_attempts'))
                    )
    op.create_index(op.f('ix_login_attempts_email'),
                    'login_attempts', ['email'], unique=False)
    op.create_index(op.f('ix_login_attempts_ip_address'),
                    'login_attempts', ['ip_address'], unique=False)
    op.create_index(op.f('ix_login_attempts_result'),
                    'login_attempts', ['result'], unique=False)
    op.create_index(op.f('ix_login_attempts_attempted_at'),
                    'login_attempts', ['attempted_at'], unique=False)

    # Create account_lockouts table
    op.create_table('account_lockouts',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('user_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('email', sa.String(length=255), nullable=False),
                    sa.Column('ip_address', postgresql.INET(), nullable=False),
                    sa.Column('lockout_reason', sa.String(
                        length=255), nullable=False),
                    sa.Column('lockout_until', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('attempt_count', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk_account_lockouts_user_id_users')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_account_lockouts'))
                    )
    op.create_index(op.f('ix_account_lockouts_email'),
                    'account_lockouts', ['email'], unique=False)
    op.create_index(op.f('ix_account_lockouts_ip_address'),
                    'account_lockouts', ['ip_address'], unique=False)
    op.create_index(op.f('ix_account_lockouts_lockout_until'),
                    'account_lockouts', ['lockout_until'], unique=False)

    # Create rate_limit_rules table
    op.create_table('rate_limit_rules',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('name', sa.String(length=100), nullable=False),
                    sa.Column('endpoint', sa.String(
                        length=255), nullable=True),
                    sa.Column('requests_per_second',
                              sa.Integer(), nullable=True),
                    sa.Column('requests_per_minute',
                              sa.Integer(), nullable=True),
                    sa.Column('requests_per_hour',
                              sa.Integer(), nullable=True),
                    sa.Column('block_duration_seconds',
                              sa.Integer(), nullable=False),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('applies_to_admins',
                              sa.Boolean(), nullable=False),
                    sa.Column('applies_to_authenticated',
                              sa.Boolean(), nullable=False),
                    sa.Column('applies_to_anonymous',
                              sa.Boolean(), nullable=False),
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('created_by', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f(
                        'fk_rate_limit_rules_created_by_users')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_rate_limit_rules')),
                    sa.UniqueConstraint('name', name=op.f(
                        'uq_rate_limit_rules_name'))
                    )
    op.create_index(op.f('ix_rate_limit_rules_endpoint'),
                    'rate_limit_rules', ['endpoint'], unique=False)
    op.create_index(op.f('ix_rate_limit_rules_is_active'),
                    'rate_limit_rules', ['is_active'], unique=False)

    # Create theme_versions table
    op.create_table('theme_versions',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('theme_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('tenant_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('version_number', sa.String(
                        length=50), nullable=False),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('colors', postgresql.JSONB(
                        astext_type=sa.Text()), nullable=False),
                    sa.Column('typography', postgresql.JSONB(
                        astext_type=sa.Text()), nullable=False),
                    sa.Column('layout', postgresql.JSONB(
                        astext_type=sa.Text()), nullable=False),
                    sa.Column('component_styles', postgresql.JSONB(
                        astext_type=sa.Text()), nullable=False),
                    sa.Column('created_by', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('is_published', sa.Boolean(), nullable=False),
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f(
                        'fk_theme_versions_created_by_users')),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f(
                        'fk_theme_versions_tenant_id_tenants')),
                    sa.ForeignKeyConstraint(['theme_id'], ['storefront_themes.id'], name=op.f(
                        'fk_theme_versions_theme_id_storefront_themes')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_theme_versions'))
                    )
    op.create_index(op.f('ix_theme_versions_theme_id'),
                    'theme_versions', ['theme_id'], unique=False)
    op.create_index(op.f('ix_theme_versions_tenant_id'),
                    'theme_versions', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_theme_versions_created_at'),
                    'theme_versions', ['created_at'], unique=False)

    # Create storefront_theme_versions table
    op.create_table('storefront_theme_versions',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('theme_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('version_number', sa.String(
                        length=32), nullable=False),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('colors', postgresql.JSON(
                        astext_type=sa.Text()), nullable=False),
                    sa.Column('typography', postgresql.JSON(
                        astext_type=sa.Text()), nullable=False),
                    sa.Column('layout', postgresql.JSON(
                        astext_type=sa.Text()), nullable=False),
                    sa.Column('component_styles', postgresql.JSON(
                        astext_type=sa.Text()), nullable=False),
                    sa.Column('is_published', sa.Boolean(), nullable=False),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('change_notes', sa.Text(), nullable=True),
                    sa.Column('created_by', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f(
                        'fk_storefront_theme_versions_created_by_users')),
                    sa.ForeignKeyConstraint(['theme_id'], ['storefront_themes.id'], name=op.f(
                        'fk_storefront_theme_versions_theme_id_storefront_themes')),
                    sa.PrimaryKeyConstraint('id', name=op.f(
                        'pk_storefront_theme_versions'))
                    )
    op.create_index(op.f('ix_storefront_theme_versions_theme_id'),
                    'storefront_theme_versions', ['theme_id'], unique=False)
    op.create_index(op.f('ix_storefront_theme_versions_theme_id_version_number'),
                    'storefront_theme_versions', ['theme_id', 'version_number'], unique=False)

    # Create audit_logs table
    op.create_table('audit_logs',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('user_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('ip_address', sa.String(
                        length=45), nullable=True),
                    sa.Column('user_agent', sa.String(
                        length=255), nullable=True),
                    sa.Column('timestamp', sa.DateTime(), nullable=False),
                    sa.Column('action', sa.String(length=100), nullable=False),
                    sa.Column('status', sa.String(length=20),
                              nullable=False, server_default='success'),
                    sa.Column('resource_type', sa.String(
                        length=100), nullable=False),
                    sa.Column('resource_id', sa.String(
                        length=100), nullable=True),
                    sa.Column('tenant_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('details', postgresql.JSON(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('message', sa.Text(), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_storefront_theme_versions_theme_id_version_number'),
                  table_name='storefront_theme_versions')
    op.drop_index(op.f('ix_storefront_theme_versions_theme_id'),
                  table_name='storefront_theme_versions')
    op.drop_table('storefront_theme_versions')
    op.drop_index(op.f('ix_theme_versions_created_at'),
                  table_name='theme_versions')
    op.drop_index(op.f('ix_theme_versions_tenant_id'),
                  table_name='theme_versions')
    op.drop_index(op.f('ix_theme_versions_theme_id'),
                  table_name='theme_versions')
    op.drop_table('theme_versions')
    op.drop_index(op.f('ix_rate_limit_rules_is_active'),
                  table_name='rate_limit_rules')
    op.drop_index(op.f('ix_rate_limit_rules_endpoint'),
                  table_name='rate_limit_rules')
    op.drop_table('rate_limit_rules')
    op.drop_index(op.f('ix_account_lockouts_lockout_until'),
                  table_name='account_lockouts')
    op.drop_index(op.f('ix_account_lockouts_ip_address'),
                  table_name='account_lockouts')
    op.drop_index(op.f('ix_account_lockouts_email'),
                  table_name='account_lockouts')
    op.drop_table('account_lockouts')
    op.drop_index(op.f('ix_login_attempts_attempted_at'),
                  table_name='login_attempts')
    op.drop_index(op.f('ix_login_attempts_result'),
                  table_name='login_attempts')
    op.drop_index(op.f('ix_login_attempts_ip_address'),
                  table_name='login_attempts')
    op.drop_index(op.f('ix_login_attempts_email'), table_name='login_attempts')
    op.drop_table('login_attempts')
    op.drop_table('ip_temporary_bypass')
    op.drop_table('ip_allowlist_settings')
    op.drop_table('ip_allowlist_entries')
    op.drop_index(op.f('ix_analytics_reports_id'),
                  table_name='analytics_reports')
    op.drop_table('analytics_reports')
    op.drop_index(op.f('ix_analytics_events_session_id'),
                  table_name='analytics_events')
    op.drop_index(op.f('ix_analytics_events_event_name'),
                  table_name='analytics_events')
    op.drop_index(op.f('ix_analytics_events_event_category'),
                  table_name='analytics_events')
    op.drop_index(op.f('ix_analytics_events_event_type'),
                  table_name='analytics_events')
    op.drop_index(op.f('ix_analytics_events_id'),
                  table_name='analytics_events')
    op.drop_table('analytics_events')
    op.drop_index(op.f('ix_return_items_tenant_id'), table_name='return_items')
    op.drop_table('return_items')
    op.drop_index(op.f('ix_return_requests_tenant_id'),
                  table_name='return_requests')
    op.drop_table('return_requests')
    op.drop_table('settings')
    op.drop_table('settings_domains')
    op.drop_table('tenant_feature_flag_overrides')
    op.drop_index(op.f('ix_feature_flags_key'), table_name='feature_flags')
    op.drop_table('feature_flags')
    op.drop_table('audit_logs')
    # ### end Alembic commands ###
