============================= test session starts ==============================
platform darwin -- Python 3.11.13, pytest-8.0.0, pluggy-1.6.0
rootdir: /Users/kess/Projects/ConversationalCommerce/backend
configfile: pytest.ini
plugins: asyncio-0.23.5, anyio-4.9.0, cov-4.1.0
asyncio: mode=Mode.STRICT
collected 240 items

app/api/v1/endpoints/tests/test_onboarding_endpoints.py FFFFF            [  2%]
app/core/tests/integration/test_example_integration.py .                 [  2%]
app/core/tests/unit/test_example.py .                                    [  2%]
app/domain/events/test_order_event_handlers.py ...F.F..F.                [  7%]
app/services/tests/test_seller_onboarding_service.py EEEEEE              [  9%]
app/services/tests/test_storefront_config_service.py F..                 [ 10%]
app/services/tests/test_storefront_draft_service.py .                    [ 11%]
app/tests/integration/admin/test_access_control.py sFFFFFFF.F.F.F.FFF... [ 20%]
.                                                                        [ 20%]
app/tests/services/test_sendy_shipping.py EEEEE                          [ 22%]
app/tests/test_permissions_refactor.py EEEFF                             [ 24%]
app/tests/test_share_service.py F.F                                      [ 25%]
tests/api/test_address_book.py EF                                        [ 26%]
tests/api/test_buyer_orders.py FFE                                       [ 27%]
tests/api/test_create_order.py EEEEEEEFEEEEEEE                           [ 30%]
tests/api/test_cross_domain_auth.py FEEEEEEEEEEEEE                       [ 33%]
tests/api/test_dashboard_stats.py FEFEFE                                 [ 35%]
tests/api/test_impersonation_flow.py EEEEEEEEEEEE                        [ 37%]
tests/api/test_order_error_handling.py FEFEFEFE                          [ 39%]
tests/api/test_order_operations.py FEFEFEFEFEFEFEFEFEFEFEFEEEFEFEFEEE    [ 46%]
tests/api/test_orders.py FEFEFEFEFEFEFEFE                                [ 49%]
tests/api/test_payments.py FF.FFFFF.                                     [ 53%]
tests/api/test_products.py FEFEFEFEFEFEFEFEFEFE.FEFEFEFEFE               [ 60%]
tests/api/test_products_parameterized.py FEFEFEFEFEFEFEFEFEFEFEFEFE      [ 65%]
tests/api/test_webhook_handlers.py F..F                                  [ 67%]
tests/api/test_whatsapp_orders.py FEFEFEFEFEFEFE                         [ 70%]
tests/conversation/test_order_intent_handler.py E                        [ 70%]
tests/core/test_redis_cache.py ............                              [ 75%]
tests/core/test_response_optimization.py ......FF                        [ 78%]
tests/integration/test_migration_order_channel_meta.py .                 [ 79%]
tests/integration/test_tenant_rls.py FF                                  [ 80%]
tests/integration/test_whatsapp_webhook_order_flow.py EE                 [ 80%]
tests/middleware/test_domain_verification.py .........                   [ 84%]
tests/middleware/test_subdomain.py F.....                                [ 86%]
tests/migration/test_migrations.py FFF                                   [ 87%]
tests/security/test_security_regression.py EEEEEFEFEFEFEEF.              [ 92%]
tests/services/test_order_service_web.py E                               [ 93%]
tests/services/test_order_service_whatsapp.py E                          [ 93%]
tests/test_auth.py FEFEFEFEFEFE                                          [ 96%]
tests/test_db.py E.                                                      [ 97%]
tests/test_db_schema_validation.py ...                                   [ 98%]
tests/test_permissions_refactor.py ...                                   [ 99%]
tests/test_smoke.py .                                                    [100%]

==================================== ERRORS ====================================
______________ ERROR at setup of test_start_onboarding_happy_path ______________
file /Users/kess/Projects/ConversationalCommerce/backend/app/services/tests/test_seller_onboarding_service.py, line 13
  @pytest.mark.asyncio
  async def test_start_onboarding_happy_path(async_session: AsyncSession):
      service = SellerOnboardingService()
      tenant_id = uuid4()
      merchant_data = {
          "business_name": "Test Merchant",
          "subdomain": f"test{tenant_id.hex[:6]}",
          "phone": "+1234567890"
      }
      result = await service.start_onboarding(tenant_id, merchant_data, async_session)
      assert result["status"] == "success"
      tenant = await async_session.get(Tenant, tenant_id)
      assert tenant is not None
      assert tenant.name == merchant_data["business_name"]
E       fixture 'async_session' not found
>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/tenant::<event_loop>, app/services/tests/test_seller_onboarding_service.py::<event_loop>, async_client, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/app/services/tests/test_seller_onboarding_service.py:13
___________ ERROR at setup of test_start_onboarding_domain_conflict ____________
file /Users/kess/Projects/ConversationalCommerce/backend/app/services/tests/test_seller_onboarding_service.py, line 29
  @pytest.mark.asyncio
  async def test_start_onboarding_domain_conflict(async_session: AsyncSession):
      service = SellerOnboardingService()
      tenant_id1 = uuid4()
      tenant_id2 = uuid4()
      subdomain = f"conflict{tenant_id1.hex[:6]}"
      merchant_data1 = {"business_name": "Merchant1",
                        "subdomain": subdomain, "phone": "+123"}
      merchant_data2 = {"business_name": "Merchant2",
                        "subdomain": subdomain, "phone": "+456"}
      await service.start_onboarding(tenant_id1, merchant_data1, async_session)
      with pytest.raises(DomainConflictError):
          await service.start_onboarding(tenant_id2, merchant_data2, async_session)
E       fixture 'async_session' not found
>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/tenant::<event_loop>, app/services/tests/test_seller_onboarding_service.py::<event_loop>, async_client, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/app/services/tests/test_seller_onboarding_service.py:29
____________ ERROR at setup of test_submit_kyc_creates_and_updates _____________
file /Users/kess/Projects/ConversationalCommerce/backend/app/services/tests/test_seller_onboarding_service.py, line 44
  @pytest.mark.asyncio
  async def test_submit_kyc_creates_and_updates(async_session: AsyncSession):
      service = SellerOnboardingService()
      tenant_id = uuid4()
      merchant_data = {"business_name": "Test Merchant",
                       "subdomain": f"kyc{tenant_id.hex[:6]}", "phone": "+123"}
      await service.start_onboarding(tenant_id, merchant_data, async_session)
      kyc_data = {"business_name": "Test Merchant",
                  "id_number": "A1234567", "id_type": "passport"}
      result = await service.submit_kyc(tenant_id, kyc_data, async_session)
      assert result["status"] == "success"
      kyc = (await async_session.execute(
          KYCInfo.__table__.select().where(KYCInfo.tenant_id == tenant_id)
      )).first()
      assert kyc is not None
      # Update KYC
      kyc_data2 = {"business_name": "Test Merchant Updated",
                   "id_number": "B7654321", "id_type": "national"}
      result2 = await service.submit_kyc(tenant_id, kyc_data2, async_session)
      assert result2["status"] == "success"
E       fixture 'async_session' not found
>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/tenant::<event_loop>, app/services/tests/test_seller_onboarding_service.py::<event_loop>, async_client, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/app/services/tests/test_seller_onboarding_service.py:44
__________________ ERROR at setup of test_invite_team_member ___________________
file /Users/kess/Projects/ConversationalCommerce/backend/app/services/tests/test_seller_onboarding_service.py, line 66
  @pytest.mark.asyncio
  async def test_invite_team_member(async_session: AsyncSession):
      service = SellerOnboardingService()
      tenant_id = uuid4()
      merchant_data = {"business_name": "Team Merchant",
                       "subdomain": f"team{tenant_id.hex[:6]}", "phone": "+123"}
      await service.start_onboarding(tenant_id, merchant_data, async_session)
      invite_data = {"invitee_phone": "+2345678901", "role": "manager"}
      result = await service.invite_team_member(tenant_id, invite_data, async_session)
      assert result["status"] == "success"
      invites = (await async_session.execute(
          TeamInvite.__table__.select().where(TeamInvite.tenant_id == tenant_id)
      )).all()
      assert invites
E       fixture 'async_session' not found
>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/tenant::<event_loop>, app/services/tests/test_seller_onboarding_service.py::<event_loop>, async_client, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/app/services/tests/test_seller_onboarding_service.py:66
______________ ERROR at setup of test_event_logging_on_onboarding ______________
file /Users/kess/Projects/ConversationalCommerce/backend/app/services/tests/test_seller_onboarding_service.py, line 82
  @pytest.mark.asyncio
  async def test_event_logging_on_onboarding(async_session: AsyncSession):
      service = SellerOnboardingService()
      tenant_id = uuid4()
      merchant_data = {"business_name": "Event Merchant",
                       "subdomain": f"event{tenant_id.hex[:6]}", "phone": "+123"}
      await service.start_onboarding(tenant_id, merchant_data, async_session)
      events = (await async_session.execute(
          ConversationEvent.__table__.select().where(
              ConversationEvent.tenant_id == tenant_id)
      )).all()
      assert events, "No ConversationEvent logged for onboarding"
E       fixture 'async_session' not found
>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/tenant::<event_loop>, app/services/tests/test_seller_onboarding_service.py::<event_loop>, async_client, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/app/services/tests/test_seller_onboarding_service.py:82
___________________ ERROR at setup of test_tenant_isolation ____________________
file /Users/kess/Projects/ConversationalCommerce/backend/app/services/tests/test_seller_onboarding_service.py, line 96
  @pytest.mark.asyncio
  async def test_tenant_isolation(async_session: AsyncSession):
      service = SellerOnboardingService()
      tenant_id1 = uuid4()
      tenant_id2 = uuid4()
      merchant_data1 = {"business_name": "Tenant1",
                        "subdomain": f"iso{tenant_id1.hex[:6]}", "phone": "+123"}
      merchant_data2 = {"business_name": "Tenant2",
                        "subdomain": f"iso{tenant_id2.hex[:6]}", "phone": "+456"}
      await service.start_onboarding(tenant_id1, merchant_data1, async_session)
      await service.start_onboarding(tenant_id2, merchant_data2, async_session)
      # Add KYC for tenant 1 only
      kyc_data = {"business_name": "Tenant1",
                  "id_number": "A123", "id_type": "passport"}
      await service.submit_kyc(tenant_id1, kyc_data, async_session)
      # Ensure tenant 2 has no KYC
      kyc2 = (await async_session.execute(
          KYCInfo.__table__.select().where(KYCInfo.tenant_id == tenant_id2)
      )).first()
      assert kyc2 is None, "Tenant isolation failed: tenant 2 should not see tenant 1's KYC"
E       fixture 'async_session' not found
>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/tenant::<event_loop>, app/services/tests/test_seller_onboarding_service.py::<event_loop>, async_client, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/app/services/tests/test_seller_onboarding_service.py:96
_______ ERROR at setup of TestSendyShippingPlugin.test_get_quote_success _______

self = <test_sendy_shipping.TestSendyShippingPlugin object at 0x145e38150>

    def setup_method(self):
        """Set up test fixtures before each test method."""
        # Create a mock instance of the SendyShippingPlugin with mocked API call
        self.plugin = SendyShippingPlugin()
    
        # Sample shipping details for testing
        self.address = Address(
            street="Ngong Road",
            city="Nairobi",
            state="Nairobi",
            country="Kenya",
            postal_code="00100",
            latitude="-1.319680",
            longitude="36.838228"
        )
    
>       self.shipping_details = ShippingDetails(
            recipient_name="Test Customer",
            recipient_email="test@example.com",
            recipient_phone="+254700000000",
            address=self.address,
            shipping_method="express"
        )
E       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ShippingDetails
E       method
E         Field required [type=missing, input_value={'recipient_name': 'Test ...ping_method': 'express'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       shipping_cost
E         Field required [type=missing, input_value={'recipient_name': 'Test ...ping_method': 'express'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

app/tests/services/test_sendy_shipping.py:29: ValidationError
________ ERROR at setup of TestSendyShippingPlugin.test_get_quote_error ________

self = <test_sendy_shipping.TestSendyShippingPlugin object at 0x145e38950>

    def setup_method(self):
        """Set up test fixtures before each test method."""
        # Create a mock instance of the SendyShippingPlugin with mocked API call
        self.plugin = SendyShippingPlugin()
    
        # Sample shipping details for testing
        self.address = Address(
            street="Ngong Road",
            city="Nairobi",
            state="Nairobi",
            country="Kenya",
            postal_code="00100",
            latitude="-1.319680",
            longitude="36.838228"
        )
    
>       self.shipping_details = ShippingDetails(
            recipient_name="Test Customer",
            recipient_email="test@example.com",
            recipient_phone="+254700000000",
            address=self.address,
            shipping_method="express"
        )
E       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ShippingDetails
E       method
E         Field required [type=missing, input_value={'recipient_name': 'Test ...ping_method': 'express'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       shipping_cost
E         Field required [type=missing, input_value={'recipient_name': 'Test ...ping_method': 'express'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

app/tests/services/test_sendy_shipping.py:29: ValidationError
____ ERROR at setup of TestSendyShippingPlugin.test_create_shipment_success ____

self = <test_sendy_shipping.TestSendyShippingPlugin object at 0x145e386d0>

    def setup_method(self):
        """Set up test fixtures before each test method."""
        # Create a mock instance of the SendyShippingPlugin with mocked API call
        self.plugin = SendyShippingPlugin()
    
        # Sample shipping details for testing
        self.address = Address(
            street="Ngong Road",
            city="Nairobi",
            state="Nairobi",
            country="Kenya",
            postal_code="00100",
            latitude="-1.319680",
            longitude="36.838228"
        )
    
>       self.shipping_details = ShippingDetails(
            recipient_name="Test Customer",
            recipient_email="test@example.com",
            recipient_phone="+254700000000",
            address=self.address,
            shipping_method="express"
        )
E       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ShippingDetails
E       method
E         Field required [type=missing, input_value={'recipient_name': 'Test ...ping_method': 'express'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       shipping_cost
E         Field required [type=missing, input_value={'recipient_name': 'Test ...ping_method': 'express'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

app/tests/services/test_sendy_shipping.py:29: ValidationError
________ ERROR at setup of TestSendyShippingPlugin.test_track_shipment _________

self = <test_sendy_shipping.TestSendyShippingPlugin object at 0x145e390d0>

    def setup_method(self):
        """Set up test fixtures before each test method."""
        # Create a mock instance of the SendyShippingPlugin with mocked API call
        self.plugin = SendyShippingPlugin()
    
        # Sample shipping details for testing
        self.address = Address(
            street="Ngong Road",
            city="Nairobi",
            state="Nairobi",
            country="Kenya",
            postal_code="00100",
            latitude="-1.319680",
            longitude="36.838228"
        )
    
>       self.shipping_details = ShippingDetails(
            recipient_name="Test Customer",
            recipient_email="test@example.com",
            recipient_phone="+254700000000",
            address=self.address,
            shipping_method="express"
        )
E       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ShippingDetails
E       method
E         Field required [type=missing, input_value={'recipient_name': 'Test ...ping_method': 'express'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       shipping_cost
E         Field required [type=missing, input_value={'recipient_name': 'Test ...ping_method': 'express'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

app/tests/services/test_sendy_shipping.py:29: ValidationError
_ ERROR at setup of TestSendyShippingPlugin.test_shipping_service_registration _

self = <test_sendy_shipping.TestSendyShippingPlugin object at 0x145e395d0>

    def setup_method(self):
        """Set up test fixtures before each test method."""
        # Create a mock instance of the SendyShippingPlugin with mocked API call
        self.plugin = SendyShippingPlugin()
    
        # Sample shipping details for testing
        self.address = Address(
            street="Ngong Road",
            city="Nairobi",
            state="Nairobi",
            country="Kenya",
            postal_code="00100",
            latitude="-1.319680",
            longitude="36.838228"
        )
    
>       self.shipping_details = ShippingDetails(
            recipient_name="Test Customer",
            recipient_email="test@example.com",
            recipient_phone="+254700000000",
            address=self.address,
            shipping_method="express"
        )
E       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ShippingDetails
E       method
E         Field required [type=missing, input_value={'recipient_name': 'Test ...ping_method': 'express'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       shipping_cost
E         Field required [type=missing, input_value={'recipient_name': 'Test ...ping_method': 'express'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

app/tests/services/test_sendy_shipping.py:29: ValidationError
_________ ERROR at setup of TestPermissionsRefactor.test_role_service __________
file /Users/kess/Projects/ConversationalCommerce/backend/app/tests/test_permissions_refactor.py, line 28
      @pytest.mark.asyncio
      async def test_role_service(self, async_db_session: AsyncSession):
          """Test the role service"""
          # Create test UUIDs
          tenant_id = uuid.uuid4()
          user_id = uuid.uuid4()
          admin_id = uuid.uuid4()

          # These are just for testing - in a real test, we'd set up actual database records
          # But here we'll mock these calls since we're focused on testing the structure

          try:
              # Test orchestrator method delegates to role service
              permission = await StorefrontPermissionsService.assign_role(
                  db=async_db_session,
                  tenant_id=tenant_id,
                  user_id=user_id,
                  role=StorefrontRole.EDITOR,
                  assigned_by=admin_id
              )

              # In a real test, we would assert permission values here
              print("Role assignment test completed")

          except HTTPException as e:
              # In testing environment, we expect an error since we don't have real DB records
              # In production code with real DB records, this shouldn't error
              print(f"Expected test exception: {e.detail}")
E       fixture 'async_db_session' not found
>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/role::<event_loop>, app/tests/test_permissions_refactor.py::<event_loop>, app/tests/test_permissions_refactor.py::TestPermissionsRefactor::<event_loop>, async_client, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/app/tests/test_permissions_refactor.py:28
______ ERROR at setup of TestPermissionsRefactor.test_section_permissions ______
file /Users/kess/Projects/ConversationalCommerce/backend/app/tests/test_permissions_refactor.py, line 57
      @pytest.mark.asyncio
      async def test_section_permissions(self, async_db_session: AsyncSession):
          """Test the section permissions service"""
          # Create test UUIDs
          tenant_id = uuid.uuid4()
          user_id = uuid.uuid4()
          admin_id = uuid.uuid4()

          try:
              # Test orchestrator method delegates to section permissions service
              permission = await StorefrontPermissionsService.set_section_permission(
                  db=async_db_session,
                  tenant_id=tenant_id,
                  user_id=user_id,
                  section=StorefrontSectionType.THEME,
                  permissions=["view", "edit"],
                  assigned_by=admin_id
              )

              # In a real test, we would assert permission values here
              print("Section permission test completed")

          except HTTPException as e:
              # In testing environment, we expect an error since we don't have real DB records
              print(f"Expected test exception: {e.detail}")
E       fixture 'async_db_session' not found
>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/role::<event_loop>, app/tests/test_permissions_refactor.py::<event_loop>, app/tests/test_permissions_refactor.py::TestPermissionsRefactor::<event_loop>, async_client, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/app/tests/test_permissions_refactor.py:57
_____ ERROR at setup of TestPermissionsRefactor.test_component_permissions _____
file /Users/kess/Projects/ConversationalCommerce/backend/app/tests/test_permissions_refactor.py, line 83
      @pytest.mark.asyncio
      async def test_component_permissions(self, async_db_session: AsyncSession):
          """Test the component permissions service"""
          # Create test UUIDs
          tenant_id = uuid.uuid4()
          user_id = uuid.uuid4()
          admin_id = uuid.uuid4()
          component_id = uuid.uuid4()

          try:
              # Test orchestrator method delegates to component permissions service
              permission = await StorefrontPermissionsService.set_component_permission(
                  db=async_db_session,
                  tenant_id=tenant_id,
                  user_id=user_id,
                  component_id=component_id,
                  permissions=["view", "edit"],
                  assigned_by=admin_id
              )

              # In a real test, we would assert permission values here
              print("Component permission test completed")

          except HTTPException as e:
              # In testing environment, we expect an error since we don't have real DB records
              print(f"Expected test exception: {e.detail}")
E       fixture 'async_db_session' not found
>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/role::<event_loop>, app/tests/test_permissions_refactor.py::<event_loop>, app/tests/test_permissions_refactor.py::TestPermissionsRefactor::<event_loop>, async_client, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/app/tests/test_permissions_refactor.py:83
___________________ ERROR at setup of test_address_book_crud ___________________

buyer_customer = <coroutine object buyer_customer at 0x147117bc0>
test_tenant = <app.models.tenant.Tenant object at 0x146df4e50>

    @pytest.fixture
    def buyer_auth_headers(buyer_customer, test_tenant):
>       token = create_test_token(subject=str(buyer_customer.id), tenant_id=str(test_tenant.id))
E       AttributeError: 'coroutine' object has no attribute 'id'

tests/api/test_address_book.py:39: AttributeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:53,760 - tests.fixtures.db - INFO - [TEST] Applying migrations ONCE for test session
2025-07-10 03:05:53,783 - alembic.runtime.migration - INFO - Context impl PostgresqlImpl.
2025-07-10 03:05:53,783 - alembic.runtime.migration - INFO - Will assume transactional DDL.
2025-07-10 03:05:53,788 - tests.fixtures.db - INFO - [TEST] Migrations applied for test session
2025-07-10 03:05:53,796 - tests.fixtures.db - INFO - ✓ Schema validation passed - Alembic version: aea20f118a7d
2025-07-10 03:05:53,796 - tests.fixtures.db - INFO - ✓ Found 70 tables in database
2025-07-10 03:05:53,797 - tests.fixtures.environment - INFO - ====== TEST ENVIRONMENT DEBUG INFO ======
2025-07-10 03:05:53,797 - tests.fixtures.environment - INFO - Python version: 3.11.13 (main, Jun  3 2025, 18:38:25) [Clang 17.0.0 (clang-1700.0.13.3)]
2025-07-10 03:05:53,797 - tests.fixtures.environment - INFO - Test database: postgresql+asyncpg://postgres:postgres@localhost/conversational_commerce_test
2025-07-10 03:05:53,797 - tests.fixtures.environment - INFO - TESTING env var: 1
2025-07-10 03:05:53,797 - tests.fixtures.environment - INFO - Current working directory: /Users/kess/Projects/ConversationalCommerce/backend
2025-07-10 03:05:53,797 - tests.fixtures.environment - INFO - Path: /Users/kess/Projects/ConversationalCommerce/venv/bin:/Users/kess/.cursor/extensions/ms-python.python-2025.6.1-darwin-arm64/python_files/deactivate/zsh:/Users/kess/Projects/ConversationalCommerce/venv/bin:/opt/homebrew/bin:/opt/homebrew/bin:/opt/homebrew/sbin:./node_modules/.bin:/opt/homebrew/Cellar/node/24.1.0/bin:/opt/homebrew/opt/python@3.12/libexec/bin:/opt/homebrew/opt/python@3.11/libexec/bin:/Users/kess/.cursor/extensions/ms-python.python-2025.6.1-darwin-arm64/python_files/deactivate/zsh:/Users/kess/Projects/ConversationalCommerce/venv/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/opt/homebrew/opt/postgresql@16/bin
2025-07-10 03:05:53,797 - tests.fixtures.environment - INFO - ==== Checking for potential deadlock sources =====
2025-07-10 03:05:53,797 - tests.fixtures.environment - INFO - Memory usage: 696.67MB
2025-07-10 03:05:53,797 - tests.conftest - INFO - === Ensuring migrations are applied before any tests ===
2025-07-10 03:05:53,797 - tests.fixtures.mocks - INFO - Applying content analysis patches for tests
2025-07-10 03:05:53,798 - tests.fixtures.mocks - INFO - Content analysis patches applied successfully
2025-07-10 03:05:53,798 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:53,805 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:53,810 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 501eb092
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.db:db.py:171 [TEST] Applying migrations ONCE for test session
INFO     alembic.runtime.migration:migration.py:216 Context impl PostgresqlImpl.
INFO     alembic.runtime.migration:migration.py:219 Will assume transactional DDL.
INFO     tests.fixtures.db:db.py:186 [TEST] Migrations applied for test session
INFO     tests.fixtures.db:db.py:158 ✓ Schema validation passed - Alembic version: aea20f118a7d
INFO     tests.fixtures.db:db.py:160 ✓ Found 70 tables in database
INFO     tests.fixtures.environment:environment.py:21 ====== TEST ENVIRONMENT DEBUG INFO ======
INFO     tests.fixtures.environment:environment.py:22 Python version: 3.11.13 (main, Jun  3 2025, 18:38:25) [Clang 17.0.0 (clang-1700.0.13.3)]
INFO     tests.fixtures.environment:environment.py:23 Test database: postgresql+asyncpg://postgres:postgres@localhost/conversational_commerce_test
INFO     tests.fixtures.environment:environment.py:25 TESTING env var: 1
INFO     tests.fixtures.environment:environment.py:26 Current working directory: /Users/kess/Projects/ConversationalCommerce/backend
INFO     tests.fixtures.environment:environment.py:27 Path: /Users/kess/Projects/ConversationalCommerce/venv/bin:/Users/kess/.cursor/extensions/ms-python.python-2025.6.1-darwin-arm64/python_files/deactivate/zsh:/Users/kess/Projects/ConversationalCommerce/venv/bin:/opt/homebrew/bin:/opt/homebrew/bin:/opt/homebrew/sbin:./node_modules/.bin:/opt/homebrew/Cellar/node/24.1.0/bin:/opt/homebrew/opt/python@3.12/libexec/bin:/opt/homebrew/opt/python@3.11/libexec/bin:/Users/kess/.cursor/extensions/ms-python.python-2025.6.1-darwin-arm64/python_files/deactivate/zsh:/Users/kess/Projects/ConversationalCommerce/venv/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/opt/homebrew/opt/postgresql@16/bin
INFO     tests.fixtures.environment:environment.py:30 ==== Checking for potential deadlock sources =====
INFO     tests.fixtures.environment:environment.py:34 Memory usage: 696.67MB
INFO     tests.conftest:conftest.py:78 === Ensuring migrations are applied before any tests ===
INFO     tests.fixtures.mocks:mocks.py:20 Applying content analysis patches for tests
INFO     tests.fixtures.mocks:mocks.py:49 Content analysis patches applied successfully
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 501eb092
____________ ERROR at teardown of test_buyer_cross_tenant_forbidden ____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x146b916d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,121 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,121 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,121 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,121 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,121 - app.main - INFO - Startup complete
2025-07-10 03:05:54,122 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,123 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant a2fbbdb8
2025-07-10 03:05:54,123 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,123 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user f59fb58c
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant a2fbbdb8
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user f59fb58c
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:54,124 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:54,144 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:54,144 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/buyer/orders
2025-07-10 03:05:54,145 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/buyer/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/buyer/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/buyer/orders "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:54,146 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:54,150 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
______________ ERROR at setup of test_create_order_minimum_fields ______________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py, line 48
  @pytest.mark.asyncio
  async def test_create_order_minimum_fields(
      async_client: AsyncClient,
      async_db_session,
      test_user,
      auth_headers,
      test_product,
      test_tenant,
  ):
      """Test creating a new order with minimum required fields"""
      logger.info("Starting test_create_order_minimum_fields")

      # Log the HTTP client type and any relevant config
      logger.debug(f"TestClient type: {type(async_client)}")
      try:
          logger.debug(f"TestClient app: {async_client.app}")
      except Exception as e:
          logger.debug(f"Error inspecting client: {e}")

      # Check if we have active transactions
      try:
          logger.debug(
              f"Session in transaction: {async_db_session.in_transaction()}")
      except Exception as e:
          logger.debug(f"Error checking transaction status: {e}")

      # Log memory usage
      try:
          import psutil
          process = psutil.Process(os.getpid())
          memory_info = process.memory_info()
          logger.debug(f"Memory usage: {memory_info.rss / 1024 / 1024:.2f} MB")
      except ImportError:
          logger.debug("psutil not available for memory tracking")

      try:
          # Create order data with only required fields
          order_data = {
              "product_id": str(test_product.id),
              "buyer_name": "Test Buyer",
              "buyer_phone": "+1234567890",
              "quantity": 1,
              "total_amount": 99.99,
              "order_source": "website",
              "buyer_email": "test@example.com",
          }
          logger.info(f"Created order data: {order_data}")

          # Use the regular client since we're testing the API endpoint
          response = await async_client.post(
              "/api/v1/orders", headers=auth_headers, json=order_data)
          logger.info(f"Order submitted with status: {response.status_code}")

          # Check response
          assert (
              response.status_code == 201
          ), f"Expected 201, got {response.status_code}: {response.text}"
          data = response.json()
          logger.info(f"Got response data: {data}")

          assert data["buyer_name"] == order_data["buyer_name"]
          assert data["buyer_phone"] == order_data["buyer_phone"]
          assert data["quantity"] == order_data["quantity"]
          assert float(data["total_amount"]) == order_data["total_amount"]
          assert data["status"] == "pending"

          # Verify in database
          logger.info("Verifying order in database")
          order_id = UUID(data["id"])
          try:
              # Use select to get the order
              stmt = select(Order).where(Order.id == order_id)
              result = await async_db_session.execute(stmt)
              db_order = result.scalar_one_or_none()
              logger.info(f"Retrieved order from database: {db_order}")
          except Exception as e:
              logger.error(f"Error retrieving order from database: {str(e)}")
              raise

          assert db_order is not None
          assert db_order.buyer_name == order_data["buyer_name"]
          assert db_order.buyer_phone == order_data["buyer_phone"]
          assert db_order.quantity == order_data["quantity"]
          assert float(db_order.total_amount) == order_data["total_amount"]
          assert db_order.status == OrderStatus.pending

          logger.info("Test completed successfully")
      except Exception as e:
          logger.error(f"Test failed with error: {str(e)}")
          raise
E       fixture 'async_client' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/defaults::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_create_order.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py:48
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,241 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
________________ ERROR at setup of test_create_order_all_fields ________________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py, line 140
  def test_create_order_all_fields(
E       fixture 'test_product' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/defaults::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_create_order.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py:140
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,242 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,243 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,243 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,243 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,243 - app.main - INFO - Startup complete
2025-07-10 03:05:54,243 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,245 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 6f7eafe1
2025-07-10 03:05:54,245 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,246 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user e4fc0c8d
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 6f7eafe1
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user e4fc0c8d
______________ ERROR at teardown of test_create_order_all_fields _______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148150b90>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,242 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,243 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,243 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,243 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,243 - app.main - INFO - Startup complete
2025-07-10 03:05:54,243 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,245 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 6f7eafe1
2025-07-10 03:05:54,245 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,246 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user e4fc0c8d
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 6f7eafe1
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user e4fc0c8d
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:54,247 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:54,248 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________ ERROR at setup of test_create_order_different_sources _____________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py, line 187
  def test_create_order_different_sources(
E       fixture 'test_product' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/defaults::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_create_order.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py:187
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,438 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,439 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,439 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,439 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,439 - app.main - INFO - Startup complete
2025-07-10 03:05:54,439 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,441 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 0392f3d1
2025-07-10 03:05:54,441 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,442 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user c469c920
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 0392f3d1
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user c469c920
___________ ERROR at teardown of test_create_order_different_sources ___________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x14821a9d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,438 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,439 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,439 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,439 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,439 - app.main - INFO - Startup complete
2025-07-10 03:05:54,439 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,441 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 0392f3d1
2025-07-10 03:05:54,441 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,442 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user c469c920
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 0392f3d1
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user c469c920
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:54,443 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:54,444 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_________ ERROR at setup of test_create_order_missing_required_fields __________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py, line 214
  def test_create_order_missing_required_fields(
E       fixture 'test_product' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/defaults::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_create_order.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py:214
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,531 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,532 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,532 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,532 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,532 - app.main - INFO - Startup complete
2025-07-10 03:05:54,532 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,534 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant e8ca7bb0
2025-07-10 03:05:54,534 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,535 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user da241549
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant e8ca7bb0
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user da241549
________ ERROR at teardown of test_create_order_missing_required_fields ________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148270f90>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,531 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,532 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,532 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,532 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,532 - app.main - INFO - Startup complete
2025-07-10 03:05:54,532 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,534 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant e8ca7bb0
2025-07-10 03:05:54,534 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,535 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user da241549
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant e8ca7bb0
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user da241549
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:54,536 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:54,537 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
__________ ERROR at teardown of test_create_order_invalid_product_id ___________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147ae7850>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,626 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,627 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,627 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,627 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,627 - app.main - INFO - Startup complete
2025-07-10 03:05:54,627 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,629 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 56c19410
2025-07-10 03:05:54,629 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,630 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 24114ccc
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 56c19410
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 24114ccc
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:54,630 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:54,651 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:54,651 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders
2025-07-10 03:05:54,651 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:54,655 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:54,655 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________ ERROR at setup of test_create_order_invalid_data_types ____________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py, line 274
  def test_create_order_invalid_data_types(
E       fixture 'test_product' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/defaults::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_create_order.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py:274
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,846 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,847 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,847 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,847 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,847 - app.main - INFO - Startup complete
2025-07-10 03:05:54,848 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,849 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 940e61ef
2025-07-10 03:05:54,849 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,850 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user f0e35d82
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 940e61ef
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user f0e35d82
__________ ERROR at teardown of test_create_order_invalid_data_types ___________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147c81310>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,846 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,847 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,847 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,847 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,847 - app.main - INFO - Startup complete
2025-07-10 03:05:54,848 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,849 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 940e61ef
2025-07-10 03:05:54,849 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,850 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user f0e35d82
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 940e61ef
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user f0e35d82
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:54,851 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:54,852 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
__________ ERROR at setup of test_create_website_order_without_email ___________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py, line 315
  def test_create_website_order_without_email(
E       fixture 'test_product' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/defaults::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_create_order.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py:315
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,940 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,941 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,941 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,941 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,942 - app.main - INFO - Startup complete
2025-07-10 03:05:54,942 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,943 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant dc22da53
2025-07-10 03:05:54,943 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,944 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 72e59066
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant dc22da53
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 72e59066
_________ ERROR at teardown of test_create_website_order_without_email _________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1481500d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,940 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,941 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,941 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,941 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,942 - app.main - INFO - Startup complete
2025-07-10 03:05:54,942 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,943 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant dc22da53
2025-07-10 03:05:54,943 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,944 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 72e59066
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant dc22da53
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 72e59066
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:54,945 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:54,946 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______________ ERROR at setup of test_create_order_unauthorized _______________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py, line 337
  def test_create_order_unauthorized(client, test_product):
E       fixture 'test_product' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/defaults::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_create_order.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_create_order.py:337
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,136 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,137 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,137 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,137 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,137 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
_____________ ERROR at teardown of test_create_order_unauthorized ______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x14826b090>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,136 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,137 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,137 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,137 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,137 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:55,138 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:55,139 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_________________ ERROR at teardown of test_admin_cors_headers _________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147ca9310>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,227 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,228 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,228 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,228 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,228 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:55,239 - app - ERROR - Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('fc7f4294-2f3f-43dd-ae1b-80de65678eb1'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 5, 55, 228986, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/auth/login', None, '{"event_type": "unauthorized_domain_access", "method": "OPTIONS", "path": "/api/admin/auth/login", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-10 03:05:55,239 - httpx - INFO - HTTP Request: OPTIONS http://testserver/api/admin/auth/login "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
ERROR    app:super_admin_security.py:385 Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('fc7f4294-2f3f-43dd-ae1b-80de65678eb1'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 5, 55, 228986, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/auth/login', None, '{"event_type": "unauthorized_domain_access", "method": "OPTIONS", "path": "/api/admin/auth/login", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
INFO     httpx:_client.py:1027 HTTP Request: OPTIONS http://testserver/api/admin/auth/login "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:55,241 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:55,242 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_____________ ERROR at setup of test_admin_login_from_admin_domain _____________

db_session = <sqlalchemy.orm.session.Session object at 0x147aa1b50>
test_tenant = <app.models.tenant.Tenant object at 0x147aa2d50>

    @pytest.fixture(scope="function")
    def test_admin_user(db_session, test_tenant):
        """Create a test admin user in the database for testing."""
        logger.info("[DEBUG] Entering test_admin_user fixture")
    
        from app.models.user import User
    
        # Create a new admin user with random email to ensure isolation
        user_id = str(uuid.uuid4())[:8]
>       user = User(
            id=user_id,
            tenant_id=test_tenant.id,
            email=f"admin-{user_id}@example.com",
            full_name=f"Admin User {user_id}",
            # Hashed "testpassword"
            password_hash="$2b$12$tVdm9Bq14UnmYIUK1Pi5a.C1nzBgeNG5AoPToVyMNqYB1.AOi/GKm",
            is_active=True,
            is_superuser=True,
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc),
        )

tests/fixtures/environment.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <app.models.user.User object at 0x146c5aad0>
kwargs = {'created_at': datetime.datetime(2025, 7, 10, 9, 5, 55, 332523, tzinfo=datetime.timezone.utc), 'email': 'admin-e57f607a@example.com', 'full_name': 'Admin User e57f607a', 'id': 'e57f607a', ...}
cls_ = <class 'app.models.user.User'>, k = 'full_name'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
>               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'full_name' is an invalid keyword argument for User

../venv/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,329 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,330 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,330 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,330 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,330 - app.main - INFO - Startup complete
2025-07-10 03:05:55,330 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:55,332 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant d97a915e
2025-07-10 03:05:55,332 - tests.fixtures.environment - INFO - [DEBUG] Entering test_admin_user fixture
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant d97a915e
INFO     tests.fixtures.environment:environment.py:138 [DEBUG] Entering test_admin_user fixture
___________ ERROR at teardown of test_admin_login_from_admin_domain ____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1471b1290>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,329 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,330 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,330 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,330 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,330 - app.main - INFO - Startup complete
2025-07-10 03:05:55,330 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:55,332 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant d97a915e
2025-07-10 03:05:55,332 - tests.fixtures.environment - INFO - [DEBUG] Entering test_admin_user fixture
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant d97a915e
INFO     tests.fixtures.environment:environment.py:138 [DEBUG] Entering test_admin_user fixture
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:55,461 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:55,462 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_________ ERROR at setup of test_admin_login_from_main_domain_blocked __________

db_session = <sqlalchemy.orm.session.Session object at 0x146e37590>
test_tenant = <app.models.tenant.Tenant object at 0x146e37350>

    @pytest.fixture(scope="function")
    def test_admin_user(db_session, test_tenant):
        """Create a test admin user in the database for testing."""
        logger.info("[DEBUG] Entering test_admin_user fixture")
    
        from app.models.user import User
    
        # Create a new admin user with random email to ensure isolation
        user_id = str(uuid.uuid4())[:8]
>       user = User(
            id=user_id,
            tenant_id=test_tenant.id,
            email=f"admin-{user_id}@example.com",
            full_name=f"Admin User {user_id}",
            # Hashed "testpassword"
            password_hash="$2b$12$tVdm9Bq14UnmYIUK1Pi5a.C1nzBgeNG5AoPToVyMNqYB1.AOi/GKm",
            is_active=True,
            is_superuser=True,
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc),
        )

tests/fixtures/environment.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <app.models.user.User object at 0x146e37f10>
kwargs = {'created_at': datetime.datetime(2025, 7, 10, 9, 5, 55, 553830, tzinfo=datetime.timezone.utc), 'email': 'admin-9959aee5@example.com', 'full_name': 'Admin User 9959aee5', 'id': '9959aee5', ...}
cls_ = <class 'app.models.user.User'>, k = 'full_name'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
>               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'full_name' is an invalid keyword argument for User

../venv/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,550 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,551 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,551 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,551 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,551 - app.main - INFO - Startup complete
2025-07-10 03:05:55,552 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:55,553 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant f34a7309
2025-07-10 03:05:55,553 - tests.fixtures.environment - INFO - [DEBUG] Entering test_admin_user fixture
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant f34a7309
INFO     tests.fixtures.environment:environment.py:138 [DEBUG] Entering test_admin_user fixture
________ ERROR at teardown of test_admin_login_from_main_domain_blocked ________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1482ecc90>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,550 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,551 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,551 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,551 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,551 - app.main - INFO - Startup complete
2025-07-10 03:05:55,552 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:55,553 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant f34a7309
2025-07-10 03:05:55,553 - tests.fixtures.environment - INFO - [DEBUG] Entering test_admin_user fixture
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant f34a7309
INFO     tests.fixtures.environment:environment.py:138 [DEBUG] Entering test_admin_user fixture
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:55,578 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:55,579 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________ ERROR at setup of test_tenant_api_from_tenant_subdomain ____________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_cross_domain_auth.py, line 100
  @pytest.mark.asyncio
  async def test_tenant_api_from_tenant_subdomain(
      client: AsyncClient,
      test_tenant: dict,
      test_db
  ):
      """Test tenant API access from tenant subdomain."""
      # Arrange
      subdomain = test_tenant["subdomain"]
      tenant_domain = f"{subdomain}.yourplatform.com"
      headers = {
          "Origin": f"https://{tenant_domain}",
          "Host": tenant_domain
      }

      # Act
      response = await client.get(
          "/api/tenant/resolve",
          params={"hostname": tenant_domain},
          headers=headers
      )

      # Assert
      assert response.status_code == status.HTTP_200_OK
      data = response.json()
      assert data["subdomain"] == subdomain
E       fixture 'test_db' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/auth::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_cross_domain_auth.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_cross_domain_auth.py:100
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,771 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,772 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,772 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,772 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,772 - app.main - INFO - Startup complete
2025-07-10 03:05:55,773 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:55,774 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 311870af
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 311870af
__________ ERROR at teardown of test_tenant_api_from_tenant_subdomain __________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1486a93d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,771 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,772 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,772 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,772 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,772 - app.main - INFO - Startup complete
2025-07-10 03:05:55,773 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:55,774 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 311870af
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 311870af
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:55,775 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:55,776 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________ ERROR at setup of test_admin_token_audience_validation ____________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_cross_domain_auth.py, line 128
  @pytest.mark.asyncio
  async def test_admin_token_audience_validation(
      client: AsyncClient,
      super_admin_token: str
  ):
      """Test that admin tokens have correct audience claims."""
      # Arrange
      admin_domain = "admin.yourplatform.com"
      headers = {
          "Authorization": f"Bearer {super_admin_token}",
          "Origin": f"https://{admin_domain}"
      }

      # Act - Access admin-only endpoint
      response = await client.get(
          "/api/admin/auth/me",
          headers=headers
      )

      # Assert
      assert response.status_code == status.HTTP_200_OK
      data = response.json()
      assert "permissions" in data
      assert "roles" in data
E       fixture 'super_admin_token' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/auth::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_cross_domain_auth.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_cross_domain_auth.py:128
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,863 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,864 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,864 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,864 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,864 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
__________ ERROR at teardown of test_admin_token_audience_validation ___________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147451290>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,863 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,864 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,864 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,864 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,864 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:55,865 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:55,866 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________ ERROR at setup of test_admin_token_rejected_for_main_app ___________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_cross_domain_auth.py, line 154
  @pytest.mark.asyncio
  async def test_admin_token_rejected_for_main_app(
      client: AsyncClient,
      super_admin_token: str
  ):
      """Test that admin tokens are rejected for main app endpoints."""
      # Arrange
      main_domain = "app.yourplatform.com"
      headers = {
          "Authorization": f"Bearer {super_admin_token}",
          "Origin": f"https://{main_domain}"
      }

      # Act - Try to access main app endpoint with admin token
      response = await client.get(
          "/api/users/me",  # Main app user endpoint
          headers=headers
      )

      # Assert - Should be unauthorized due to audience mismatch
      assert response.status_code == status.HTTP_401_UNAUTHORIZED
E       fixture 'super_admin_token' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/auth::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_cross_domain_auth.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_cross_domain_auth.py:154
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,955 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,956 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,956 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,956 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,956 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
_________ ERROR at teardown of test_admin_token_rejected_for_main_app __________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x14771c690>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,955 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,956 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,956 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,956 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,956 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:55,957 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:55,957 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________ ERROR at setup of test_main_app_token_rejected_for_admin ___________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_cross_domain_auth.py, line 177
  @pytest.mark.asyncio
  async def test_main_app_token_rejected_for_admin(
      client: AsyncClient,
      user_token: str
  ):
      """Test that main app tokens are rejected for admin endpoints."""
      # Arrange
      admin_domain = "admin.yourplatform.com"
      headers = {
          "Authorization": f"Bearer {user_token}",
          "Origin": f"https://{admin_domain}"
      }

      # Act - Try to access admin endpoint with main app token
      response = await client.get(
          "/api/admin/auth/me",
          headers=headers
      )

      # Assert - Should be unauthorized due to audience mismatch
      assert response.status_code == status.HTTP_401_UNAUTHORIZED
E       fixture 'user_token' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin/auth::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_cross_domain_auth.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_cross_domain_auth.py:177
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:56,153 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:56,154 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:56,154 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:56,154 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:56,154 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
_________ ERROR at teardown of test_main_app_token_rejected_for_admin __________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1482f57d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:56,153 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:56,154 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:56,154 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:56,154 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:56,154 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:56,155 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:56,155 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______________ ERROR at teardown of test_get_stats_empty_tenant _______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x146df7750>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:56,244 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:56,245 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:56,245 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:56,245 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:56,245 - app.main - INFO - Startup complete
2025-07-10 03:05:56,245 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:56,247 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 422bb42a
2025-07-10 03:05:56,247 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:56,247 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user aa840f1e
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 422bb42a
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user aa840f1e
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:56,248 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:56,268 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:56,268 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/dashboard/stats
2025-07-10 03:05:56,269 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/dashboard/stats "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/dashboard/stats
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/dashboard/stats "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:56,272 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:56,273 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
________________ ERROR at teardown of test_get_stats_with_data _________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1474e1d90>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:56,466 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:56,467 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:56,467 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:56,467 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:56,467 - app.main - INFO - Startup complete
2025-07-10 03:05:56,467 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:56,469 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant fff5775a
2025-07-10 03:05:56,469 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:56,469 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user a8178844
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant fff5775a
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user a8178844
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:56,497 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:56,498 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______________ ERROR at teardown of test_stats_tenant_isolation _______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148058a10>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:56,586 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:56,587 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:56,587 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:56,587 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:56,587 - app.main - INFO - Startup complete
2025-07-10 03:05:56,587 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:56,588 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant c57784fd
2025-07-10 03:05:56,588 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:56,589 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user ecdbd177
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant c57784fd
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user ecdbd177
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:56,863 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:56,864 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_____________ ERROR at setup of test_impersonation_token_creation ______________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_impersonation_flow.py, line 18
  @pytest.mark.asyncio
  async def test_impersonation_token_creation(
      client: AsyncClient,
      super_admin_token: str,
      test_tenant: Tenant,
      test_db
  ):
      """Test that a super admin can create an impersonation token."""
      # Arrange
      tenant_id = test_tenant.id
      headers = {"Authorization": f"Bearer {super_admin_token}"}

      # Act
      response = await client.post(
          f"/api/admin/impersonation/token/{tenant_id}",
          headers=headers
      )

      # Assert
      assert response.status_code == status.HTTP_200_OK
      data = response.json()
      assert "token" in data
      assert "expires_in" in data
      assert "tenant" in data
      assert data["tenant"]["id"] == str(tenant_id)
      assert "impersonation_url" in data["tenant"]
E       fixture 'super_admin_token' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_impersonation_flow.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_impersonation_flow.py:18
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:56,952 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:56,953 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:56,953 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:56,953 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:56,953 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
____________ ERROR at teardown of test_impersonation_token_creation ____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1476da3d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:56,952 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:56,953 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:56,953 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:56,953 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:56,953 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:56,955 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:56,956 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________ ERROR at setup of test_impersonation_token_verification ____________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_impersonation_flow.py, line 46
  @pytest.mark.asyncio
  async def test_impersonation_token_verification(
      client: AsyncClient,
      super_admin_token: str,
      test_tenant: Tenant,
      test_db
  ):
      """Test that an impersonation token can be verified."""
      # Arrange
      tenant_id = test_tenant.id
      headers = {"Authorization": f"Bearer {super_admin_token}"}

      # Create token
      response = await client.post(
          f"/api/admin/impersonation/token/{tenant_id}",
          headers=headers
      )
      token = response.json()["token"]

      # Act - Verify token
      verify_response = await client.post(
          "/api/admin/impersonation/verify",
          json={"token": token}
      )

      # Assert
      assert verify_response.status_code == status.HTTP_200_OK
      data = verify_response.json()
      assert data["valid"] is True
      assert data["tenant_id"] == str(tenant_id)
E       fixture 'super_admin_token' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_impersonation_flow.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_impersonation_flow.py:46
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,152 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,153 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,153 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,153 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,153 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
__________ ERROR at teardown of test_impersonation_token_verification __________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1478941d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,152 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,153 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,153 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,153 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,153 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:57,154 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:57,154 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________ ERROR at setup of test_impersonation_token_end_session ____________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_impersonation_flow.py, line 78
  @pytest.mark.asyncio
  async def test_impersonation_token_end_session(
      client: AsyncClient,
      super_admin_token: str,
      test_tenant: Tenant,
      test_db
  ):
      """Test that an impersonation session can be ended."""
      # Arrange
      tenant_id = test_tenant.id
      headers = {"Authorization": f"Bearer {super_admin_token}"}

      # Create token
      response = await client.post(
          f"/api/admin/impersonation/token/{tenant_id}",
          headers=headers
      )
      token = response.json()["token"]

      # Act - End session
      end_response = await client.post(
          "/api/admin/impersonation/end",
          json={"token": token}
      )

      # Assert
      assert end_response.status_code == status.HTTP_200_OK
      data = end_response.json()
      assert "message" in data
E       fixture 'super_admin_token' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_impersonation_flow.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_impersonation_flow.py:78
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,243 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,244 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,244 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,244 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,244 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
__________ ERROR at teardown of test_impersonation_token_end_session ___________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1480550d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,243 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,244 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,244 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,244 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,244 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:57,245 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:57,246 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
__________ ERROR at setup of test_non_super_admin_cannot_impersonate ___________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_impersonation_flow.py, line 109
  @pytest.mark.asyncio
  async def test_non_super_admin_cannot_impersonate(
      client: AsyncClient,
      admin_token: str,  # Regular admin, not super admin
      test_tenant: Tenant,
      test_db
  ):
      """Test that non-super admins cannot create impersonation tokens."""
      # Arrange
      tenant_id = test_tenant.id
      headers = {"Authorization": f"Bearer {admin_token}"}

      # Act
      response = await client.post(
          f"/api/admin/impersonation/token/{tenant_id}",
          headers=headers
      )

      # Assert
      assert response.status_code == status.HTTP_403_FORBIDDEN
E       fixture 'admin_token' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_impersonation_flow.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_impersonation_flow.py:109
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,334 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,335 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,335 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,335 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,335 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
_________ ERROR at teardown of test_non_super_admin_cannot_impersonate _________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1482495d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,334 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,335 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,335 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,335 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,335 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:57,336 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:57,337 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
__________ ERROR at setup of test_impersonation_token_invalid_tenant ___________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_impersonation_flow.py, line 131
  @pytest.mark.asyncio
  async def test_impersonation_token_invalid_tenant(
      client: AsyncClient,
      super_admin_token: str,
      test_db
  ):
      """Test that impersonation fails for non-existent tenants."""
      # Arrange
      non_existent_tenant_id = uuid.uuid4()
      headers = {"Authorization": f"Bearer {super_admin_token}"}

      # Act
      response = await client.post(
          f"/api/admin/impersonation/token/{non_existent_tenant_id}",
          headers=headers
      )

      # Assert
      assert response.status_code == status.HTTP_404_NOT_FOUND
E       fixture 'super_admin_token' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_impersonation_flow.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_impersonation_flow.py:131
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,530 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,531 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,531 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,531 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,531 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
_________ ERROR at teardown of test_impersonation_token_invalid_tenant _________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147ae6850>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,530 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,531 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,531 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,531 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,531 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:57,531 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:57,532 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________ ERROR at setup of test_impersonation_integration_flow _____________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_impersonation_flow.py, line 152
  @pytest.mark.asyncio
  async def test_impersonation_integration_flow(
      client: AsyncClient,
      super_admin_token: str,
      test_tenant: Tenant,
      test_db
  ):
      """Test the complete impersonation flow end-to-end."""
      # Arrange
      tenant_id = test_tenant.id
      headers = {"Authorization": f"Bearer {super_admin_token}"}
      settings = get_settings()

      # Step 1: Create impersonation token
      token_response = await client.post(
          f"/api/admin/impersonation/token/{tenant_id}",
          headers=headers
      )
      assert token_response.status_code == status.HTTP_200_OK
      token_data = token_response.json()
      token = token_data["token"]

      # Step 2: Verify the token
      verify_response = await client.post(
          "/api/admin/impersonation/verify",
          json={"token": token}
      )
      assert verify_response.status_code == status.HTTP_200_OK
      verify_data = verify_response.json()
      assert verify_data["valid"] is True

      # Step 3: Make a request as the impersonated tenant
      # This would typically be done via frontend with stored token
      # Here we're simulating the impersonation context

      # For the test, we manually create an impersonation service and verify the token
      impersonation_service = ImpersonationService(settings)
      payload = await impersonation_service.verify_impersonation_token(test_db, token=token)

      # Confirm token payload contains expected data
      assert payload["imp_admin"] is True
      assert payload["imp_tenant"] == str(tenant_id)

      # Step 4: End the impersonation session
      end_response = await client.post(
          "/api/admin/impersonation/end",
          json={"token": token}
      )
      assert end_response.status_code == status.HTTP_200_OK
E       fixture 'super_admin_token' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/services/admin::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/api/test_impersonation_flow.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/api/test_impersonation_flow.py:152
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,621 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,622 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,622 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,622 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,622 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
___________ ERROR at teardown of test_impersonation_integration_flow ___________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148130f90>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,621 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,622 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,622 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,622 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,622 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:57,623 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:57,624 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
______________ ERROR at teardown of test_error_format_consistency ______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1476d83d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,713 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,714 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,714 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,714 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,714 - app.main - INFO - Startup complete
2025-07-10 03:05:57,715 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:57,716 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant fd7381ef
2025-07-10 03:05:57,716 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:57,717 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 39eebf53
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant fd7381ef
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 39eebf53
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:57,723 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:57,743 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:57,743 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/not-a-uuid
2025-07-10 03:05:57,743 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders/not-a-uuid "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/not-a-uuid
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders/not-a-uuid "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:57,746 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:57,747 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
__________ ERROR at teardown of test_authentication_error_consistency __________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148172390>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,936 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,937 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,937 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,938 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,938 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:57,938 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:57,957 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:57,957 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:05:57,957 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:57,968 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:57,969 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_________________ ERROR at teardown of test_optimistic_locking _________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147c50090>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:58,058 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:58,059 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:58,059 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:58,059 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:58,059 - app.main - INFO - Startup complete
2025-07-10 03:05:58,060 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:58,061 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 75da62e7
2025-07-10 03:05:58,061 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:58,062 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user e9e38b4d
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 75da62e7
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user e9e38b4d
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:58,293 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:58,294 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
________________ ERROR at teardown of test_transaction_rollback ________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148149710>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:58,383 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:58,385 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:58,385 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:58,385 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:58,385 - app.main - INFO - Startup complete
2025-07-10 03:05:58,385 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:58,387 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant f9beca4b
2025-07-10 03:05:58,387 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:58,387 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user da00365e
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant f9beca4b
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user da00365e
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:58,389 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:58,409 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:58,409 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders
2025-07-10 03:05:58,410 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:58,412 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:58,413 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
__________________ ERROR at teardown of test_get_orders_list ___________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148131250>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:58,605 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:58,606 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:58,606 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:58,606 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:58,606 - app.main - INFO - Startup complete
2025-07-10 03:05:58,606 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:58,608 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 245f10c4
2025-07-10 03:05:58,608 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:58,609 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user a5ada59b
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 245f10c4
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user a5ada59b
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:58,609 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:58,630 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:58,630 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:05:58,630 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:58,634 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:58,635 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________ ERROR at teardown of test_get_orders_with_status_filter ____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x146a9cb10>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:58,724 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:58,725 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:58,725 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:58,725 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:58,725 - app.main - INFO - Startup complete
2025-07-10 03:05:58,725 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:58,727 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant e1e35e88
2025-07-10 03:05:58,727 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:58,727 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 20d8cafa
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant e1e35e88
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 20d8cafa
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:58,728 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:58,748 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:58,748 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:05:58,748 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders?status=pending "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders?status=pending "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:58,751 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:58,752 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________ ERROR at teardown of test_get_orders_with_source_filter ____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147ae5710>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:58,950 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:58,951 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:58,951 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:58,951 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:58,951 - app.main - INFO - Startup complete
2025-07-10 03:05:58,951 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:58,953 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant f090bc08
2025-07-10 03:05:58,953 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:58,954 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 3433ab4c
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant f090bc08
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 3433ab4c
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:58,954 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:58,974 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:58,974 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:05:58,974 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders?order_source=website "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders?order_source=website "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:58,977 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:58,978 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
__________ ERROR at teardown of test_get_orders_with_combined_filters __________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1469c8b50>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,070 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,071 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,071 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,071 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,071 - app.main - INFO - Startup complete
2025-07-10 03:05:59,071 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,072 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 788f9830
2025-07-10 03:05:59,072 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,073 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user c27f0937
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 788f9830
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user c27f0937
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:59,074 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:59,094 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:59,094 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:05:59,094 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders?status=pending&order_source=whatsapp "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders?status=pending&order_source=whatsapp "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:59,097 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:59,098 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______________ ERROR at teardown of test_get_orders_with_search _______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147158d90>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,187 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,188 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,188 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,188 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,188 - app.main - INFO - Startup complete
2025-07-10 03:05:59,189 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,190 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant b568f0f1
2025-07-10 03:05:59,190 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,191 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user ccbcaaa7
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant b568f0f1
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user ccbcaaa7
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:59,191 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:59,211 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:59,211 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:05:59,211 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders?search=WhatsApp+Buyer "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders?search=WhatsApp+Buyer "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:59,214 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:59,215 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_____________ ERROR at teardown of test_get_orders_with_pagination _____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147439290>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,408 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,409 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,409 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,409 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,409 - app.main - INFO - Startup complete
2025-07-10 03:05:59,409 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,410 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 1b052537
2025-07-10 03:05:59,410 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,411 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 25815c17
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 1b052537
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 25815c17
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:59,414 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:59,415 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
__________________ ERROR at teardown of test_get_order_by_id ___________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148704cd0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,504 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,505 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,505 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,505 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,505 - app.main - INFO - Startup complete
2025-07-10 03:05:59,505 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,507 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 84c17ca1
2025-07-10 03:05:59,507 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,508 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 34f73c28
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 84c17ca1
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 34f73c28
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:59,511 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:59,512 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______________ ERROR at teardown of test_get_nonexistent_order ________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1480a7d90>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,710 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,711 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,711 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,711 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,711 - app.main - INFO - Startup complete
2025-07-10 03:05:59,711 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,712 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 7f9eccfb
2025-07-10 03:05:59,712 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,713 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 5bc7e8f7
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 7f9eccfb
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 5bc7e8f7
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:59,714 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:59,733 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:59,733 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/8bd788be-ef0d-40b8-9351-811b9922b192
2025-07-10 03:05:59,734 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders/8bd788be-ef0d-40b8-9351-811b9922b192 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/8bd788be-ef0d-40b8-9351-811b9922b192
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders/8bd788be-ef0d-40b8-9351-811b9922b192 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:59,737 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:59,738 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______________ ERROR at teardown of test_get_order_invalid_uuid _______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147380150>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,828 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,829 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,829 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,829 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,829 - app.main - INFO - Startup complete
2025-07-10 03:05:59,829 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,830 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant ea44005f
2025-07-10 03:05:59,830 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,831 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user ef586e45
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant ea44005f
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user ef586e45
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:59,832 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:59,851 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:59,851 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/not-a-valid-uuid
2025-07-10 03:05:59,851 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders/not-a-valid-uuid "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/not-a-valid-uuid
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders/not-a-valid-uuid "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:59,854 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:59,855 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
________________ ERROR at teardown of test_update_order_status _________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1481499d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,945 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,946 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,946 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,946 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,946 - app.main - INFO - Startup complete
2025-07-10 03:05:59,946 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,947 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 174a02c9
2025-07-10 03:05:59,947 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,948 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user c31146e2
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 174a02c9
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user c31146e2
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:59,951 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:59,952 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________ ERROR at teardown of test_update_order_multiple_fields ____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1473d5e10>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:00,169 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:00,170 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:00,170 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:00,170 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:00,170 - app.main - INFO - Startup complete
2025-07-10 03:06:00,171 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:00,172 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant bfd1a5c4
2025-07-10 03:06:00,172 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:00,173 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 7095f967
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant bfd1a5c4
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 7095f967
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:00,176 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:00,177 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
______________ ERROR at teardown of test_update_nonexistent_order ______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1473f9f10>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:00,266 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:00,267 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:00,267 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:00,267 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:00,267 - app.main - INFO - Startup complete
2025-07-10 03:06:00,267 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:00,269 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 3e20d084
2025-07-10 03:06:00,269 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:00,269 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user cc5aea63
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 3e20d084
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user cc5aea63
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:00,270 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:00,289 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:00,289 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=PUT, path=/api/v1/orders/92b8f753-c8d1-40a4-aef4-c94b207beab0
2025-07-10 03:06:00,290 - httpx - INFO - HTTP Request: PUT http://testserver/api/v1/orders/92b8f753-c8d1-40a4-aef4-c94b207beab0 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=PUT, path=/api/v1/orders/92b8f753-c8d1-40a4-aef4-c94b207beab0
INFO     httpx:_client.py:1027 HTTP Request: PUT http://testserver/api/v1/orders/92b8f753-c8d1-40a4-aef4-c94b207beab0 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:00,293 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:00,294 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
______________ ERROR at setup of test_update_order_invalid_status ______________

self = <sqlalchemy.engine.base.Connection object at 0x146a7e050>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x1481426d0>

    def _exec_insertmany_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for an "insertmanyvalues"
        operation, which will invoke DBAPI
        cursor.execute() one or more times with individual log and
        event hook calls.
    
        """
    
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
        else:
            generic_setinputsizes = None
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters = parameters
    
        engine_events = self._has_events or self.engine._has_events
        if self.dialect._has_events:
            do_execute_dispatch: Iterable[
                Any
            ] = self.dialect.dispatch.do_execute
        else:
            do_execute_dispatch = ()
    
        if self._echo:
            stats = context._get_cache_stats() + " (insertmanyvalues)"
    
        for imv_batch in dialect._deliver_insertmanyvalues_batches(
            cursor,
            str_statement,
            effective_parameters,
            generic_setinputsizes,
            context,
        ):
            if imv_batch.processed_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor,
                        imv_batch.processed_setinputsizes,
                        context,
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e,
                        sql_util._long_statement(imv_batch.replaced_statement),
                        imv_batch.replaced_parameters,
                        None,
                        context,
                    )
    
            sub_stmt = imv_batch.replaced_statement
            sub_params = imv_batch.replaced_parameters
    
            if engine_events:
                for fn in self.dispatch.before_cursor_execute:
                    sub_stmt, sub_params = fn(
                        self,
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                        True,
                    )
    
            if self._echo:
                self._log_info(sql_util._long_statement(sub_stmt))
    
                imv_stats = f""" {imv_batch.batchnum}/{
                            imv_batch.total_batches
                } ({
                    'ordered'
                    if imv_batch.rows_sorted else 'unordered'
                }{
                    '; batch not supported'
                    if imv_batch.is_downgraded
                    else ''
                })"""
    
                if imv_batch.batchnum == 1:
                    stats += imv_stats
                else:
                    stats = f"insertmanyvalues{imv_stats}"
    
                if not self.engine.hide_parameters:
                    self._log_info(
                        "[%s] %r",
                        stats,
                        sql_util._repr_params(
                            sub_params,
                            batches=10,
                            ismulti=False,
                        ),
                    )
                else:
                    self._log_info(
                        "[%s] [SQL parameters hidden due to "
                        "hide_parameters=True]",
                        stats,
                    )
    
            try:
                for fn in do_execute_dispatch:
                    if fn(
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                    ):
                        break
                else:
>                   dialect.do_execute(
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x1469ac130; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad..._at__1)s, %(returned_at__1)s, %(cancellation_reason__1)s, %(return_reason__1)s) RETURNING orders.created_at, orders.id'
parameters = {'buyer_address__0': None, 'buyer_address__1': None, 'buyer_email__0': 'web@example.com', 'buyer_email__1': None, ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x1481426d0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (8d014e37-77b3-4cf8-b5c8-84341e3e9461, 73a2b19b-e445-4d8a-b0bd-14623b642489, 8859def0-3d08-471b-b0f9-7c6cf42cdc5b, Web Buyer, +1234567890, web@example.com, null, 1, 10.99, website, pending, null, 1, f, null, f, 2025-07-10 03:06:00.385103-06, null, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

db_session = <sqlalchemy.orm.session.Session object at 0x146a7d6d0>
test_user = <app.models.user.User object at 0x146a7d590>
test_products = [<app.models.product.Product object at 0x146a7e510>, <app.models.product.Product object at 0x147889410>, <app.models.product.Product object at 0x147888310>]

    @pytest.fixture
    def test_orders(db_session, test_user, test_products):
        """Create test orders with different statuses and sources"""
        orders = []
    
        # Create web order
        web_order = Order(
            product_id=test_products[0].id,
            seller_id=test_user.id,
            buyer_name="Web Buyer",
            buyer_phone="+1234567890",
            buyer_email="web@example.com",
            quantity=1,
            total_amount=Decimal("10.99"),
            status=OrderStatus.pending,
            order_source=OrderSource.website,
        )
        orders.append(web_order)
        db_session.add(web_order)  # Explicitly add to session
    
        # Create WhatsApp order
        whatsapp_order = Order(
            product_id=test_products[1].id,
            seller_id=test_user.id,
            buyer_name="WhatsApp Buyer",
            buyer_phone="+2345678901",
            quantity=1,
            total_amount=Decimal("20.99"),
            status=OrderStatus.confirmed,
            order_source=OrderSource.whatsapp,
        )
        orders.append(whatsapp_order)
        db_session.add(whatsapp_order)
>       db_session.flush()  # Flush to get the ID

tests/api/test_order_operations.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1137: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_insertmany_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2121: in _exec_insertmany_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2113: in _exec_insertmany_context
    dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x1469ac130; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad..._at__1)s, %(returned_at__1)s, %(cancellation_reason__1)s, %(return_reason__1)s) RETURNING orders.created_at, orders.id'
parameters = {'buyer_address__0': None, 'buyer_address__1': None, 'buyer_email__0': 'web@example.com', 'buyer_email__1': None, ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x1481426d0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (8d014e37-77b3-4cf8-b5c8-84341e3e9461, 73a2b19b-e445-4d8a-b0bd-14623b642489, 8859def0-3d08-471b-b0f9-7c6cf42cdc5b, Web Buyer, +1234567890, web@example.com, null, 1, 10.99, website, pending, null, 1, f, null, f, 2025-07-10 03:06:00.385103-06, null, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_address, quantity, total_amount, order_source, status, notes, version, notification_sent, last_notification_at, is_deleted, updated_at, ... 982 characters truncated ... ed_at__1)s, %(cancellation_reason__1)s, %(return_reason__1)s) RETURNING orders.created_at, orders.id]
E       [parameters: {'product_id__0': UUID('73a2b19b-e445-4d8a-b0bd-14623b642489'), 'customer_id__0': None, 'return_reason__0': None, 'returned_at__0': None, 'order_source__0': 'website', 'cancelled_at__0': None, 'buyer_phone__0': '+1234567890', 'buyer_address__0': None, 'last_notification_at__0': None, 'is_deleted__0': False, 'version__0': 1, 'cancellation_reason__0': None, 'seller_id__0': UUID('8859def0-3d08-471b-b0f9-7c6cf42cdc5b'), 'notes__0': None, 'quantity__0': 1, 'tenant_id__0': None, 'notification_sent__0': False, 'status__0': 'pending', 'buyer_name__0': 'Web Buyer', 'total_amount__0': Decimal('10.99'), 'buyer_email__0': 'web@example.com', 'id__0': UUID('8d014e37-77b3-4cf8-b5c8-84341e3e9461'), 'updated_at__0': None, 'product_id__1': UUID('31b04890-de09-4d9d-a818-a8e11788079e'), 'customer_id__1': None, 'return_reason__1': None, 'returned_at__1': None, 'order_source__1': 'whatsapp', 'cancelled_at__1': None, 'buyer_phone__1': '+2345678901', 'buyer_address__1': None, 'last_notification_at__1': None, 'is_deleted__1': False, 'version__1': 1, 'cancellation_reason__1': None, 'seller_id__1': UUID('8859def0-3d08-471b-b0f9-7c6cf42cdc5b'), 'notes__1': None, 'quantity__1': 1, 'tenant_id__1': None, 'notification_sent__1': False, 'status__1': 'confirmed', 'buyer_name__1': 'WhatsApp Buyer', 'total_amount__1': Decimal('20.99'), 'buyer_email__1': None, 'id__1': UUID('6bc7b487-7f7a-4d8a-874e-38cc1d7e0a96'), 'updated_at__1': None}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:00,383 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:00,384 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:00,384 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:00,384 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:00,384 - app.main - INFO - Startup complete
2025-07-10 03:06:00,384 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:00,386 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 5328d796
2025-07-10 03:06:00,386 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:00,386 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 8859def0
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 5328d796
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 8859def0
____________ ERROR at teardown of test_update_order_invalid_status _____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1473905d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:00,383 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:00,384 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:00,384 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:00,384 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:00,384 - app.main - INFO - Startup complete
2025-07-10 03:06:00,384 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:00,386 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 5328d796
2025-07-10 03:06:00,386 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:00,386 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 8859def0
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 5328d796
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 8859def0
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:00,598 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:00,599 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________________ ERROR at teardown of test_delete_order ____________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x14819a8d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:00,689 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:00,689 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:00,689 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:00,690 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:00,690 - app.main - INFO - Startup complete
2025-07-10 03:06:00,690 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:00,691 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 9413f8e9
2025-07-10 03:06:00,691 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:00,692 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user e1c35056
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 9413f8e9
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user e1c35056
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:00,797 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:00,798 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
______________ ERROR at teardown of test_delete_nonexistent_order ______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x14719c150>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:00,887 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:00,888 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:00,888 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:00,888 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:00,888 - app.main - INFO - Startup complete
2025-07-10 03:06:00,888 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:00,890 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant f15cd4a7
2025-07-10 03:06:00,890 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:00,890 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user f8405230
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant f15cd4a7
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user f8405230
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:00,891 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:00,910 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:00,910 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/orders/555e78c2-a84d-4ec1-9d00-76efd1f55666
2025-07-10 03:06:00,910 - httpx - INFO - HTTP Request: DELETE http://testserver/api/v1/orders/555e78c2-a84d-4ec1-9d00-76efd1f55666 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/orders/555e78c2-a84d-4ec1-9d00-76efd1f55666
INFO     httpx:_client.py:1027 HTTP Request: DELETE http://testserver/api/v1/orders/555e78c2-a84d-4ec1-9d00-76efd1f55666 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:00,913 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:00,914 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________ ERROR at teardown of test_delete_already_deleted_order ____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148544050>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:01,003 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:01,004 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:01,004 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:01,004 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:01,004 - app.main - INFO - Startup complete
2025-07-10 03:06:01,005 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:01,006 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 0d1d0b1b
2025-07-10 03:06:01,006 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:01,007 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 7af80d4b
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 0d1d0b1b
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 7af80d4b
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:01,010 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:01,011 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
________________ ERROR at setup of test_authentication_required ________________

self = <sqlalchemy.engine.base.Connection object at 0x14854fb10>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x1473edf10>

    def _exec_insertmany_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for an "insertmanyvalues"
        operation, which will invoke DBAPI
        cursor.execute() one or more times with individual log and
        event hook calls.
    
        """
    
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
        else:
            generic_setinputsizes = None
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters = parameters
    
        engine_events = self._has_events or self.engine._has_events
        if self.dialect._has_events:
            do_execute_dispatch: Iterable[
                Any
            ] = self.dialect.dispatch.do_execute
        else:
            do_execute_dispatch = ()
    
        if self._echo:
            stats = context._get_cache_stats() + " (insertmanyvalues)"
    
        for imv_batch in dialect._deliver_insertmanyvalues_batches(
            cursor,
            str_statement,
            effective_parameters,
            generic_setinputsizes,
            context,
        ):
            if imv_batch.processed_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor,
                        imv_batch.processed_setinputsizes,
                        context,
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e,
                        sql_util._long_statement(imv_batch.replaced_statement),
                        imv_batch.replaced_parameters,
                        None,
                        context,
                    )
    
            sub_stmt = imv_batch.replaced_statement
            sub_params = imv_batch.replaced_parameters
    
            if engine_events:
                for fn in self.dispatch.before_cursor_execute:
                    sub_stmt, sub_params = fn(
                        self,
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                        True,
                    )
    
            if self._echo:
                self._log_info(sql_util._long_statement(sub_stmt))
    
                imv_stats = f""" {imv_batch.batchnum}/{
                            imv_batch.total_batches
                } ({
                    'ordered'
                    if imv_batch.rows_sorted else 'unordered'
                }{
                    '; batch not supported'
                    if imv_batch.is_downgraded
                    else ''
                })"""
    
                if imv_batch.batchnum == 1:
                    stats += imv_stats
                else:
                    stats = f"insertmanyvalues{imv_stats}"
    
                if not self.engine.hide_parameters:
                    self._log_info(
                        "[%s] %r",
                        stats,
                        sql_util._repr_params(
                            sub_params,
                            batches=10,
                            ismulti=False,
                        ),
                    )
                else:
                    self._log_info(
                        "[%s] [SQL parameters hidden due to "
                        "hide_parameters=True]",
                        stats,
                    )
    
            try:
                for fn in do_execute_dispatch:
                    if fn(
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                    ):
                        break
                else:
>                   dialect.do_execute(
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x147126980; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad..._at__1)s, %(returned_at__1)s, %(cancellation_reason__1)s, %(return_reason__1)s) RETURNING orders.created_at, orders.id'
parameters = {'buyer_address__0': None, 'buyer_address__1': None, 'buyer_email__0': 'web@example.com', 'buyer_email__1': None, ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x1473edf10>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (8058d507-b39a-463e-ab20-69327326d0b3, ded6d8c7-e1d1-4abf-8fb7-3e2c1437b71a, b614395e-d84c-4ed9-9ba5-63a76b6463d5, Web Buyer, +1234567890, web@example.com, null, 1, 10.99, website, pending, null, 1, f, null, f, 2025-07-10 03:06:01.208613-06, null, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

db_session = <sqlalchemy.orm.session.Session object at 0x14854f2d0>
test_user = <app.models.user.User object at 0x1473e2610>
test_products = [<app.models.product.Product object at 0x1473e2c90>, <app.models.product.Product object at 0x1473e3510>, <app.models.product.Product object at 0x146cf6b90>]

    @pytest.fixture
    def test_orders(db_session, test_user, test_products):
        """Create test orders with different statuses and sources"""
        orders = []
    
        # Create web order
        web_order = Order(
            product_id=test_products[0].id,
            seller_id=test_user.id,
            buyer_name="Web Buyer",
            buyer_phone="+1234567890",
            buyer_email="web@example.com",
            quantity=1,
            total_amount=Decimal("10.99"),
            status=OrderStatus.pending,
            order_source=OrderSource.website,
        )
        orders.append(web_order)
        db_session.add(web_order)  # Explicitly add to session
    
        # Create WhatsApp order
        whatsapp_order = Order(
            product_id=test_products[1].id,
            seller_id=test_user.id,
            buyer_name="WhatsApp Buyer",
            buyer_phone="+2345678901",
            quantity=1,
            total_amount=Decimal("20.99"),
            status=OrderStatus.confirmed,
            order_source=OrderSource.whatsapp,
        )
        orders.append(whatsapp_order)
        db_session.add(whatsapp_order)
>       db_session.flush()  # Flush to get the ID

tests/api/test_order_operations.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1137: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_insertmany_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2121: in _exec_insertmany_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2113: in _exec_insertmany_context
    dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x147126980; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad..._at__1)s, %(returned_at__1)s, %(cancellation_reason__1)s, %(return_reason__1)s) RETURNING orders.created_at, orders.id'
parameters = {'buyer_address__0': None, 'buyer_address__1': None, 'buyer_email__0': 'web@example.com', 'buyer_email__1': None, ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x1473edf10>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (8058d507-b39a-463e-ab20-69327326d0b3, ded6d8c7-e1d1-4abf-8fb7-3e2c1437b71a, b614395e-d84c-4ed9-9ba5-63a76b6463d5, Web Buyer, +1234567890, web@example.com, null, 1, 10.99, website, pending, null, 1, f, null, f, 2025-07-10 03:06:01.208613-06, null, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_address, quantity, total_amount, order_source, status, notes, version, notification_sent, last_notification_at, is_deleted, updated_at, ... 982 characters truncated ... ed_at__1)s, %(cancellation_reason__1)s, %(return_reason__1)s) RETURNING orders.created_at, orders.id]
E       [parameters: {'product_id__0': UUID('ded6d8c7-e1d1-4abf-8fb7-3e2c1437b71a'), 'customer_id__0': None, 'return_reason__0': None, 'returned_at__0': None, 'order_source__0': 'website', 'cancelled_at__0': None, 'buyer_phone__0': '+1234567890', 'buyer_address__0': None, 'last_notification_at__0': None, 'is_deleted__0': False, 'version__0': 1, 'cancellation_reason__0': None, 'seller_id__0': UUID('b614395e-d84c-4ed9-9ba5-63a76b6463d5'), 'notes__0': None, 'quantity__0': 1, 'tenant_id__0': None, 'notification_sent__0': False, 'status__0': 'pending', 'buyer_name__0': 'Web Buyer', 'total_amount__0': Decimal('10.99'), 'buyer_email__0': 'web@example.com', 'id__0': UUID('8058d507-b39a-463e-ab20-69327326d0b3'), 'updated_at__0': None, 'product_id__1': UUID('92c05764-8915-4147-b8c8-416b08de2a07'), 'customer_id__1': None, 'return_reason__1': None, 'returned_at__1': None, 'order_source__1': 'whatsapp', 'cancelled_at__1': None, 'buyer_phone__1': '+2345678901', 'buyer_address__1': None, 'last_notification_at__1': None, 'is_deleted__1': False, 'version__1': 1, 'cancellation_reason__1': None, 'seller_id__1': UUID('b614395e-d84c-4ed9-9ba5-63a76b6463d5'), 'notes__1': None, 'quantity__1': 1, 'tenant_id__1': None, 'notification_sent__1': False, 'status__1': 'confirmed', 'buyer_name__1': 'WhatsApp Buyer', 'total_amount__1': Decimal('20.99'), 'buyer_email__1': None, 'id__1': UUID('b795a00c-3f63-4b37-a78a-904fcfa8df44'), 'updated_at__1': None}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:01,206 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:01,207 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:01,207 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:01,207 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:01,207 - app.main - INFO - Startup complete
2025-07-10 03:06:01,208 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:01,209 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 22ce28af
2025-07-10 03:06:01,209 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:01,210 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user b614395e
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 22ce28af
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user b614395e
______________ ERROR at teardown of test_authentication_required _______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1478fedd0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:01,206 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:01,207 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:01,207 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:01,207 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:01,207 - app.main - INFO - Startup complete
2025-07-10 03:06:01,208 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:01,209 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 22ce28af
2025-07-10 03:06:01,209 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:01,210 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user b614395e
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 22ce28af
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user b614395e
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:01,317 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:01,318 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________________ ERROR at teardown of test_create_order ____________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148591790>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:01,513 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:01,514 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:01,514 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:01,514 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:01,514 - app.main - INFO - Startup complete
2025-07-10 03:06:01,514 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:01,515 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant f3995805
2025-07-10 03:06:01,516 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:01,516 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 8f41fec5
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant f3995805
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 8f41fec5
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:01,518 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:01,538 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:01,538 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders
2025-07-10 03:06:01,539 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:01,543 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:01,544 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______________ ERROR at teardown of test_create_whatsapp_order ________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147c47c90>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:01,632 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:01,633 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:01,633 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:01,633 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:01,633 - app.main - INFO - Startup complete
2025-07-10 03:06:01,633 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:01,634 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 1eecd335
2025-07-10 03:06:01,635 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:01,635 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 8252c3c9
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 1eecd335
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 8252c3c9
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:01,637 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:01,657 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:01,657 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
2025-07-10 03:06:01,657 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:01,661 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:01,662 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
__________________ ERROR at teardown of test_get_orders_list ___________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147caebd0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:01,861 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:01,862 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:01,863 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:01,863 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:01,863 - app.main - INFO - Startup complete
2025-07-10 03:06:01,863 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:01,864 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant cb7542b1
2025-07-10 03:06:01,864 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:01,865 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user f3451053
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant cb7542b1
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user f3451053
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:01,995 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:01,996 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
__________________ ERROR at teardown of test_get_order_by_id ___________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x14856d310>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:02,086 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:02,087 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:02,087 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:02,087 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:02,087 - app.main - INFO - Startup complete
2025-07-10 03:06:02,189 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:02,190 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 8cb5e5bb
2025-07-10 03:06:02,190 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:02,191 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 2c0dbc78
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 8cb5e5bb
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 2c0dbc78
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:02,320 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:02,321 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
________________ ERROR at teardown of test_update_order_status _________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x146339250>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:02,521 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:02,522 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:02,522 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:02,522 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:02,522 - app.main - INFO - Startup complete
2025-07-10 03:06:02,523 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:02,524 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 15b2ae35
2025-07-10 03:06:02,524 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:02,525 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 247c1a37
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 15b2ae35
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 247c1a37
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:02,654 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:02,655 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________________ ERROR at teardown of test_delete_order ____________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147b27690>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:02,855 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:02,856 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:02,856 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:02,856 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:02,856 - app.main - INFO - Startup complete
2025-07-10 03:06:02,856 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:02,858 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 1570bb9b
2025-07-10 03:06:02,858 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:02,859 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 9f18d3f2
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 1570bb9b
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 9f18d3f2
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:02,988 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:02,989 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______________ ERROR at teardown of test_order_dashboard_stats ________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148570a10>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,079 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:03,080 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:03,080 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:03,080 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:03,080 - app.main - INFO - Startup complete
2025-07-10 03:06:03,080 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:03,082 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 750dd54b
2025-07-10 03:06:03,082 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:03,082 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 3c1c191d
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 750dd54b
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 3c1c191d
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:03,315 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:03,316 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_____________ ERROR at teardown of test_order_notification_marking _____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x14862bd50>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,519 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:03,520 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:03,520 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:03,520 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:03,520 - app.main - INFO - Startup complete
2025-07-10 03:06:03,520 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:03,522 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 683f4ddb
2025-07-10 03:06:03,522 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:03,523 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 84817660
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 683f4ddb
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 84817660
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:03,654 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:03,655 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________________ ERROR at teardown of test_create_product ___________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1485cea10>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,889 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:03,890 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:03,890 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:03,890 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:03,890 - app.main - INFO - Startup complete
2025-07-10 03:06:03,890 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:03,892 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 52633853
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 52633853
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:03,895 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:03,910 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:03,910 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products/
2025-07-10 03:06:03,911 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:04,041 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:04,042 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_____________ ERROR at teardown of test_create_product_validation ______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148284990>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:04,132 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:04,133 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:04,133 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:04,133 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:04,133 - app.main - INFO - Startup complete
2025-07-10 03:06:04,134 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:04,135 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 51d6b664
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 51d6b664
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:04,137 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:04,157 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:04,157 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products/
2025-07-10 03:06:04,157 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:04,165 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:04,166 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________________ ERROR at teardown of test_get_product _____________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1481707d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:04,255 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:04,256 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:04,256 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:04,256 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:04,256 - app.main - INFO - Startup complete
2025-07-10 03:06:04,256 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:04,257 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant baab1371
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant baab1371
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:04,262 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:04,281 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:04,281 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/28dca694-3b9e-43e7-8635-a6190f05fd02
2025-07-10 03:06:04,281 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/28dca694-3b9e-43e7-8635-a6190f05fd02 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/28dca694-3b9e-43e7-8635-a6190f05fd02
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/28dca694-3b9e-43e7-8635-a6190f05fd02 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:04,291 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:04,292 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______________ ERROR at teardown of test_get_product_not_found ________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1473839d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:04,488 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:04,489 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:04,489 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:04,489 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:04,489 - app.main - INFO - Startup complete
2025-07-10 03:06:04,489 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:04,491 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 3db9fce3
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 3db9fce3
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:04,493 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:04,513 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:04,513 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/b97fabc9-b68b-4be7-82a5-fa729c88cdde
2025-07-10 03:06:04,513 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/b97fabc9-b68b-4be7-82a5-fa729c88cdde "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/b97fabc9-b68b-4be7-82a5-fa729c88cdde
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/b97fabc9-b68b-4be7-82a5-fa729c88cdde "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:04,519 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:04,520 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________________ ERROR at teardown of test_list_products ____________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1482d4e90>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:04,609 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:04,610 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:04,610 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:04,610 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:04,610 - app.main - INFO - Startup complete
2025-07-10 03:06:04,610 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:04,612 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 090aef28
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 090aef28
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:04,616 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:04,635 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:04,635 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:04,635 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:04,643 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:04,644 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_____________ ERROR at teardown of test_list_products_with_filters _____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147601610>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:04,846 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:04,847 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:04,847 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:04,847 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:04,847 - app.main - INFO - Startup complete
2025-07-10 03:06:04,847 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:04,850 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant e6823208
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant e6823208
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:04,854 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:04,873 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:04,873 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:04,874 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/?min_price=100&max_price=100 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/?min_price=100&max_price=100 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:04,882 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:04,883 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________________ ERROR at teardown of test_update_product ___________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147584990>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:04,972 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:04,973 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:04,973 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:04,973 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:04,973 - app.main - INFO - Startup complete
2025-07-10 03:06:04,974 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:04,975 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 2734b35b
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 2734b35b
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:04,979 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,000 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,000 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=PATCH, path=/api/v1/products/950c8bb1-144e-440e-bc83-a7e7c2660d4a
2025-07-10 03:06:05,001 - httpx - INFO - HTTP Request: PATCH http://testserver/api/v1/products/950c8bb1-144e-440e-bc83-a7e7c2660d4a "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=PATCH, path=/api/v1/products/950c8bb1-144e-440e-bc83-a7e7c2660d4a
INFO     httpx:_client.py:1027 HTTP Request: PATCH http://testserver/api/v1/products/950c8bb1-144e-440e-bc83-a7e7c2660d4a "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:05,006 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:05,007 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________ ERROR at teardown of test_update_product_unauthorized _____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1482ef690>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:05,097 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:05,097 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:05,097 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:05,098 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:05,098 - app.main - INFO - Startup complete
2025-07-10 03:06:05,098 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:05,099 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 1c7a526e
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 1c7a526e
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:05,104 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,124 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,124 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=PATCH, path=/api/v1/products/b4f4e776-8264-4c7c-b20e-5d698bb19eda
2025-07-10 03:06:05,125 - httpx - INFO - HTTP Request: PATCH http://testserver/api/v1/products/b4f4e776-8264-4c7c-b20e-5d698bb19eda "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=PATCH, path=/api/v1/products/b4f4e776-8264-4c7c-b20e-5d698bb19eda
INFO     httpx:_client.py:1027 HTTP Request: PATCH http://testserver/api/v1/products/b4f4e776-8264-4c7c-b20e-5d698bb19eda "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:05,130 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:05,131 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________________ ERROR at teardown of test_delete_product ___________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x146be2650>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:05,329 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:05,330 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:05,330 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:05,330 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:05,330 - app.main - INFO - Startup complete
2025-07-10 03:06:05,331 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:05,332 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 472b3153
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 472b3153
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:05,336 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,355 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,355 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/products/4bfae04b-4e28-4b83-b7ca-8487b616c3b9
2025-07-10 03:06:05,356 - httpx - INFO - HTTP Request: DELETE http://testserver/api/v1/products/4bfae04b-4e28-4b83-b7ca-8487b616c3b9 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/products/4bfae04b-4e28-4b83-b7ca-8487b616c3b9
INFO     httpx:_client.py:1027 HTTP Request: DELETE http://testserver/api/v1/products/4bfae04b-4e28-4b83-b7ca-8487b616c3b9 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:05,361 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:05,362 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________ ERROR at teardown of test_delete_product_unauthorized _____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147639110>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:05,452 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:05,453 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:05,453 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:05,453 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:05,453 - app.main - INFO - Startup complete
2025-07-10 03:06:05,453 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:05,455 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant b75255ea
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant b75255ea
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:05,460 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,479 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,479 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/products/6a3d3bdc-6d37-4bf2-a516-2274711cbf5c
2025-07-10 03:06:05,480 - httpx - INFO - HTTP Request: DELETE http://testserver/api/v1/products/6a3d3bdc-6d37-4bf2-a516-2274711cbf5c "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/products/6a3d3bdc-6d37-4bf2-a516-2274711cbf5c
INFO     httpx:_client.py:1027 HTTP Request: DELETE http://testserver/api/v1/products/6a3d3bdc-6d37-4bf2-a516-2274711cbf5c "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:05,485 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:05,486 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
______________ ERROR at teardown of test_list_products_pagination ______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1485c0850>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:05,577 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:05,578 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:05,578 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:05,578 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:05,578 - app.main - INFO - Startup complete
2025-07-10 03:06:05,579 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:05,580 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant d0449a9d
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant d0449a9d
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:05,585 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,605 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,605 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:05,605 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/?limit=10&offset=0 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/?limit=10&offset=0 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:05,716 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:05,718 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______________ ERROR at teardown of test_list_products_filters ________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x14760c310>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:05,807 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:05,808 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:05,808 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:05,808 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:05,808 - app.main - INFO - Startup complete
2025-07-10 03:06:05,808 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:05,809 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 26076be4
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 26076be4
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:05,813 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,834 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,834 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:05,834 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/?featured=true "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/?featured=true "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:05,839 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:05,840 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________________ ERROR at teardown of test_soft_delete _____________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147e91250>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:05,930 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:05,931 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:05,931 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:05,931 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:05,931 - app.main - INFO - Startup complete
2025-07-10 03:06:05,932 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:05,933 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant a04b9b14
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant a04b9b14
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:05,936 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,956 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,956 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/products/3320138f-7e22-46b3-961d-49bd1ff8f60f
2025-07-10 03:06:05,956 - httpx - INFO - HTTP Request: DELETE http://testserver/api/v1/products/3320138f-7e22-46b3-961d-49bd1ff8f60f?soft=true "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/products/3320138f-7e22-46b3-961d-49bd1ff8f60f
INFO     httpx:_client.py:1027 HTTP Request: DELETE http://testserver/api/v1/products/3320138f-7e22-46b3-961d-49bd1ff8f60f?soft=true "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:05,961 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:05,962 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________________ ERROR at teardown of test_rate_limiting ____________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148054a90>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:06,159 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:06,160 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:06,160 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:06,160 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:06,160 - app.main - INFO - Startup complete
2025-07-10 03:06:06,160 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:06,162 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 7705ec79
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 7705ec79
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:06,164 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,184 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,184 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:06,184 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
2025-07-10 03:06:06,185 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,203 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,203 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:06,203 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
2025-07-10 03:06:06,204 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,220 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,220 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:06,221 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
2025-07-10 03:06:06,221 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,237 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,237 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:06,238 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
2025-07-10 03:06:06,238 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,252 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,252 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:06,253 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
2025-07-10 03:06:06,253 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,263 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,263 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:06,264 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:06,268 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:06,269 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________ ERROR at teardown of test_create_product_with_all_fields ___________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1473e2550>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:06,359 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:06,360 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:06,360 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:06,360 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:06,360 - app.main - INFO - Startup complete
2025-07-10 03:06:06,360 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:06,362 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 799fca90
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 799fca90
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:06,364 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,384 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,384 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/4bd75ddd-b823-4a97-a66b-e9984dc4f9b3
2025-07-10 03:06:06,384 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/4bd75ddd-b823-4a97-a66b-e9984dc4f9b3 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/4bd75ddd-b823-4a97-a66b-e9984dc4f9b3
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/4bd75ddd-b823-4a97-a66b-e9984dc4f9b3 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:06,390 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:06,391 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_create_product_validation_cases[product_data0-201] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147421e90>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:06,592 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:06,593 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:06,593 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:06,593 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:06,593 - app.main - INFO - Startup complete
2025-07-10 03:06:06,593 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:06,595 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 363c1a44
2025-07-10 03:06:06,595 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:06,596 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 6a1877e9
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 363c1a44
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 6a1877e9
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: 6a1877e9-0da9-420b-8f5a-96503bb3b1d6 (is_seller: True)
test_tenant: 363c1a44-8ccd-45f3-b2a0-dfba7f6e7ecd
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2YTE4NzdlOS0wZGE5LTQyMGItOGY1YS05NjUwM2JiM2IxZDYiLCJ0ZW5hbnRfaWQiOiIzNjNjMWE0NC04Y2NkLTQ1ZjMtYjJhMC1kZmJhN2Y2ZTdlY2QiLCJleHAiOjE3NTIxNDE5NjYsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.LEo9wPdlcDUqSC8HwQJfMZwmoLslfhTtmBnnp9M-d9A', 'X-Tenant-ID': '363c1a44-8ccd-45f3-b2a0-dfba7f6e7ecd'}
Product data with seller_id: {'name': 'Valid Product', 'description': 'Description', 'price': 99.99, 'seller_id': '6a1877e9-0da9-420b-8f5a-96503bb3b1d6', 'tenant_id': '363c1a44-8ccd-45f3-b2a0-dfba7f6e7ecd'}
2025-07-10 03:06:06,599 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,619 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,619 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:06,620 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: 363c1a44-8ccd-45f3-b2a0-dfba7f6e7ecd'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.019377946853637695'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:06,622 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:06,623 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_create_product_validation_cases[product_data1-422] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1470e8110>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:06,712 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:06,712 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:06,713 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:06,713 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:06,713 - app.main - INFO - Startup complete
2025-07-10 03:06:06,713 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:06,714 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant b4eba768
2025-07-10 03:06:06,714 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:06,715 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user b3385fbf
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant b4eba768
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user b3385fbf
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: b3385fbf-3994-42da-838a-f38ff3ae905c (is_seller: True)
test_tenant: b4eba768-ab5c-4755-b6f1-5640e075b845
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiMzM4NWZiZi0zOTk0LTQyZGEtODM4YS1mMzhmZjNhZTkwNWMiLCJ0ZW5hbnRfaWQiOiJiNGViYTc2OC1hYjVjLTQ3NTUtYjZmMS01NjQwZTA3NWI4NDUiLCJleHAiOjE3NTIxNDE5NjYsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.GWYkrST4V7Vz7hmsxnaXrboXI8cwhA95AqG6uDI8QRM', 'X-Tenant-ID': 'b4eba768-ab5c-4755-b6f1-5640e075b845'}
Product data with seller_id: {'name': '', 'description': 'Description', 'price': 99.99, 'seller_id': 'b3385fbf-3994-42da-838a-f38ff3ae905c', 'tenant_id': 'b4eba768-ab5c-4755-b6f1-5640e075b845'}
2025-07-10 03:06:06,716 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,736 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,736 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:06,737 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: b4eba768-ab5c-4755-b6f1-5640e075b845'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.018923044204711914'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:06,739 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:06,740 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_create_product_validation_cases[product_data2-422] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x146f3d590>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:06,829 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:06,830 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:06,830 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:06,830 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:06,830 - app.main - INFO - Startup complete
2025-07-10 03:06:06,831 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:06,832 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 81a06c29
2025-07-10 03:06:06,832 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:06,833 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 3950ef68
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 81a06c29
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 3950ef68
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: 3950ef68-6b30-465c-8cb5-19206b4a016c (is_seller: True)
test_tenant: 81a06c29-9b4c-4874-b309-2a7e52a04be0
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzOTUwZWY2OC02YjMwLTQ2NWMtOGNiNS0xOTIwNmI0YTAxNmMiLCJ0ZW5hbnRfaWQiOiI4MWEwNmMyOS05YjRjLTQ4NzQtYjMwOS0yYTdlNTJhMDRiZTAiLCJleHAiOjE3NTIxNDE5NjYsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.GnHpx-3jinhe5D_FADefEffcYBUlno_oI-9d-b2AbbA', 'X-Tenant-ID': '81a06c29-9b4c-4874-b309-2a7e52a04be0'}
Product data with seller_id: {'name': 'Valid Product', 'description': '', 'price': 99.99, 'seller_id': '3950ef68-6b30-465c-8cb5-19206b4a016c', 'tenant_id': '81a06c29-9b4c-4874-b309-2a7e52a04be0'}
2025-07-10 03:06:06,834 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,855 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,855 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:06,855 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: 81a06c29-9b4c-4874-b309-2a7e52a04be0'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.019840002059936523'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:06,857 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:06,858 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_create_product_validation_cases[product_data3-422] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147efd450>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:07,057 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:07,058 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:07,058 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:07,058 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:07,058 - app.main - INFO - Startup complete
2025-07-10 03:06:07,059 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:07,060 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 73f84f7f
2025-07-10 03:06:07,060 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:07,061 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user d461970d
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 73f84f7f
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user d461970d
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: d461970d-e891-4d42-9928-d14979b1e6f5 (is_seller: True)
test_tenant: 73f84f7f-8458-4de0-bde9-dae0ac0f6765
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkNDYxOTcwZC1lODkxLTRkNDItOTkyOC1kMTQ5NzliMWU2ZjUiLCJ0ZW5hbnRfaWQiOiI3M2Y4NGY3Zi04NDU4LTRkZTAtYmRlOS1kYWUwYWMwZjY3NjUiLCJleHAiOjE3NTIxNDE5NjcsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.JKUbFL3O4PpaYC6JEqER7_WBKW187QEvAnt-5YxfI2U', 'X-Tenant-ID': '73f84f7f-8458-4de0-bde9-dae0ac0f6765'}
Product data with seller_id: {'name': 'Valid Product', 'description': 'Description', 'price': -1, 'seller_id': 'd461970d-e891-4d42-9928-d14979b1e6f5', 'tenant_id': '73f84f7f-8458-4de0-bde9-dae0ac0f6765'}
2025-07-10 03:06:07,063 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:07,083 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:07,083 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:07,083 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: 73f84f7f-8458-4de0-bde9-dae0ac0f6765'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.01989889144897461'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:07,086 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:07,087 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_create_product_validation_cases[product_data4-422] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1473814d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:07,177 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:07,178 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:07,178 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:07,178 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:07,178 - app.main - INFO - Startup complete
2025-07-10 03:06:07,178 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:07,179 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 96950fc8
2025-07-10 03:06:07,179 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:07,180 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 6c19a524
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 96950fc8
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 6c19a524
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: 6c19a524-1c56-48fc-bf75-c584547279f1 (is_seller: True)
test_tenant: 96950fc8-013e-4de8-8d20-7681da2f618f
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2YzE5YTUyNC0xYzU2LTQ4ZmMtYmY3NS1jNTg0NTQ3Mjc5ZjEiLCJ0ZW5hbnRfaWQiOiI5Njk1MGZjOC0wMTNlLTRkZTgtOGQyMC03NjgxZGEyZjYxOGYiLCJleHAiOjE3NTIxNDE5NjcsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.lJ4N45HrKaGl4-kX0kFWYi0XVUVBFAW52VKoorOtON8', 'X-Tenant-ID': '96950fc8-013e-4de8-8d20-7681da2f618f'}
Product data with seller_id: {'name': 'Valid Product', 'description': 'Description', 'price': 0, 'seller_id': '6c19a524-1c56-48fc-bf75-c584547279f1', 'tenant_id': '96950fc8-013e-4de8-8d20-7681da2f618f'}
2025-07-10 03:06:07,181 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:07,200 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:07,200 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:07,201 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: 96950fc8-013e-4de8-8d20-7681da2f618f'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.018360137939453125'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:07,203 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:07,204 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_create_product_validation_cases[product_data5-422] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148171910>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:07,294 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:07,295 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:07,295 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:07,295 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:07,295 - app.main - INFO - Startup complete
2025-07-10 03:06:07,295 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:07,296 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant c97a588f
2025-07-10 03:06:07,296 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:07,297 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 0148df88
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant c97a588f
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 0148df88
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: 0148df88-b6f1-4482-b2dc-b44cd21c9301 (is_seller: True)
test_tenant: c97a588f-2bfc-48e1-8941-346055261366
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwMTQ4ZGY4OC1iNmYxLTQ0ODItYjJkYy1iNDRjZDIxYzkzMDEiLCJ0ZW5hbnRfaWQiOiJjOTdhNTg4Zi0yYmZjLTQ4ZTEtODk0MS0zNDYwNTUyNjEzNjYiLCJleHAiOjE3NTIxNDE5NjcsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.6Df9NRdXf5OKVc-r1QOq5Ue0Ub9zQrZY_0jjD5GG-NM', 'X-Tenant-ID': 'c97a588f-2bfc-48e1-8941-346055261366'}
Product data with seller_id: {'name': 'Valid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid Product', 'description': 'Description', 'price': 99.99, 'seller_id': '0148df88-b6f1-4482-b2dc-b44cd21c9301', 'tenant_id': 'c97a588f-2bfc-48e1-8941-346055261366'}
2025-07-10 03:06:07,299 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:07,317 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:07,317 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:07,318 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: c97a588f-2bfc-48e1-8941-346055261366'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.01799607276916504'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:07,320 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:07,321 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_create_product_validation_cases[product_data6-422] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147420710>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:07,518 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:07,519 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:07,519 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:07,519 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:07,519 - app.main - INFO - Startup complete
2025-07-10 03:06:07,519 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:07,521 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 2cf356c5
2025-07-10 03:06:07,521 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:07,521 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user f7acfe0c
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 2cf356c5
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user f7acfe0c
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: f7acfe0c-6b17-475e-9b61-209d35b3f65f (is_seller: True)
test_tenant: 2cf356c5-2ce6-4546-9696-29e512601aae
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmN2FjZmUwYy02YjE3LTQ3NWUtOWI2MS0yMDlkMzViM2Y2NWYiLCJ0ZW5hbnRfaWQiOiIyY2YzNTZjNS0yY2U2LTQ1NDYtOTY5Ni0yOWU1MTI2MDFhYWUiLCJleHAiOjE3NTIxNDE5NjcsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.pE87hzKH_S4POgzPYBjSDTtJBO_xgT1a2ZoNKl2Ts9c', 'X-Tenant-ID': '2cf356c5-2ce6-4546-9696-29e512601aae'}
Product data with seller_id: {'name': 'Valid Product', 'description': 'DescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescription', 'price': 99.99, 'seller_id': 'f7acfe0c-6b17-475e-9b61-209d35b3f65f', 'tenant_id': '2cf356c5-2ce6-4546-9696-29e512601aae'}
2025-07-10 03:06:07,523 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:07,543 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:07,543 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:07,543 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: 2cf356c5-2ce6-4546-9696-29e512601aae'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.019435644149780273'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:07,545 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:07,546 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_list_products_with_filters_parameterized[filter_params0-2] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147eaea50>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:07,636 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:07,637 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:07,637 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:07,637 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:07,637 - app.main - INFO - Startup complete
2025-07-10 03:06:07,638 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:07,639 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant ad51c5d6
2025-07-10 03:06:07,639 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:07,640 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user ca661050
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant ad51c5d6
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user ca661050
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:07,642 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:07,663 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:07,663 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:07,663 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products?min_price=50 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products?min_price=50 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:07,665 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:07,666 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_list_products_with_filters_parameterized[filter_params1-2] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1486b2650>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:07,905 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:07,906 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:07,906 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:07,906 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:07,906 - app.main - INFO - Startup complete
2025-07-10 03:06:07,906 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:07,908 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 3de67e35
2025-07-10 03:06:07,908 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:07,909 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 5550b483
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 3de67e35
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 5550b483
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:07,910 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:07,929 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:07,929 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:07,930 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products?max_price=50 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products?max_price=50 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:07,932 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:07,933 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_list_products_with_filters_parameterized[filter_params2-1] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147f40e10>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,022 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:08,023 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:08,023 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:08,023 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:08,023 - app.main - INFO - Startup complete
2025-07-10 03:06:08,024 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:08,025 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 6280f03d
2025-07-10 03:06:08,025 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:08,026 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 84e85f1a
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 6280f03d
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 84e85f1a
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,028 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:08,049 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:08,049 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:08,049 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products?min_price=30&max_price=60 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products?min_price=30&max_price=60 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:08,051 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:08,052 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_list_products_with_filters_parameterized[filter_params3-3] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1470dc290>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,142 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:08,143 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:08,143 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:08,143 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:08,143 - app.main - INFO - Startup complete
2025-07-10 03:06:08,144 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:08,145 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 56b45b75
2025-07-10 03:06:08,145 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:08,146 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 3863bb24
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 56b45b75
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 3863bb24
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,148 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:08,167 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:08,167 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:08,168 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products?search=test "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products?search=test "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:08,170 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:08,171 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_list_products_with_filters_parameterized[filter_params4-1] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1471b12d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,369 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:08,370 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:08,370 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:08,370 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:08,370 - app.main - INFO - Startup complete
2025-07-10 03:06:08,371 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:08,372 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant afb64e4d
2025-07-10 03:06:08,372 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:08,373 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user e82935e3
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant afb64e4d
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user e82935e3
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,375 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:08,395 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:08,395 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:08,396 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products?featured=true "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products?featured=true "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:08,398 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:08,399 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of test_list_products_with_filters_parameterized[filter_params5-1] _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x14835cd50>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,489 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:08,490 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:08,490 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:08,490 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:08,490 - app.main - INFO - Startup complete
2025-07-10 03:06:08,490 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:08,491 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 8fbcba73
2025-07-10 03:06:08,491 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:08,492 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 458e0a52
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 8fbcba73
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 458e0a52
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,494 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:08,513 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:08,513 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:08,514 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products?show_on_storefront=false "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products?show_on_storefront=false "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:08,516 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:08,517 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________ ERROR at teardown of test_create_whatsapp_order_success ____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1475de5d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,773 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:08,774 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:08,774 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:08,774 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:08,774 - app.main - INFO - Startup complete
2025-07-10 03:06:08,774 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:08,775 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant b79d953c
2025-07-10 03:06:08,775 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:08,776 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 97e5ad86
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant b79d953c
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 97e5ad86
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,778 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:08,798 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:08,798 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
2025-07-10 03:06:08,798 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:08,802 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:08,803 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___ ERROR at teardown of test_create_whatsapp_order_missing_whatsapp_fields ____

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148420510>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,892 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:08,893 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:08,893 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:08,893 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:08,893 - app.main - INFO - Startup complete
2025-07-10 03:06:08,893 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:08,895 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant de82b377
2025-07-10 03:06:08,895 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:08,896 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user a9503283
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant de82b377
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user a9503283
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,898 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:08,917 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:08,917 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
2025-07-10 03:06:08,918 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:08,920 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:08,921 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
________ ERROR at teardown of test_create_whatsapp_order_invalid_phone _________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1486307d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:09,010 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:09,011 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:09,011 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:09,012 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:09,012 - app.main - INFO - Startup complete
2025-07-10 03:06:09,120 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:09,121 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 95f280c0
2025-07-10 03:06:09,121 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:09,122 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 6292e11e
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 95f280c0
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 6292e11e
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:09,124 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:09,142 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:09,142 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
2025-07-10 03:06:09,142 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:09,145 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:09,146 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________ ERROR at teardown of test_get_whatsapp_orders_by_number ____________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148061d50>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:09,236 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:09,237 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:09,237 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:09,237 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:09,237 - app.main - INFO - Startup complete
2025-07-10 03:06:09,237 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:09,239 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant cb1891d5
2025-07-10 03:06:09,239 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:09,239 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 4b119637
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant cb1891d5
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 4b119637
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:09,469 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:09,470 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
__________ ERROR at teardown of test_get_whatsapp_orders_with_filters __________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1483c9010>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:09,559 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:09,560 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:09,560 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:09,560 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:09,561 - app.main - INFO - Startup complete
2025-07-10 03:06:09,561 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:09,562 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant c2141ddf
2025-07-10 03:06:09,562 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:09,563 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user b571b005
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant c2141ddf
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user b571b005
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:09,671 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:09,672 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_________ ERROR at teardown of test_get_whatsapp_orders_invalid_number _________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x14816d310>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:09,868 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:09,869 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:09,869 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:09,869 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:09,869 - app.main - INFO - Startup complete
2025-07-10 03:06:09,870 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:09,871 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 41042c3d
2025-07-10 03:06:09,871 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:09,872 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 9bd019d2
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 41042c3d
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 9bd019d2
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:09,873 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:09,892 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:09,892 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/whatsapp
2025-07-10 03:06:09,893 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders/whatsapp?whatsapp_number=invalid-number "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/whatsapp
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders/whatsapp?whatsapp_number=invalid-number "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:09,895 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:09,896 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______ ERROR at teardown of test_get_whatsapp_orders_nonexistent_number _______

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1485fc390>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:09,985 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:09,986 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:09,987 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:09,987 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:09,987 - app.main - INFO - Startup complete
2025-07-10 03:06:09,987 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:09,988 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 891236d1
2025-07-10 03:06:09,988 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:09,989 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 20960c2d
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 891236d1
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 20960c2d
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:09,989 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:10,009 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:10,009 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/whatsapp
2025-07-10 03:06:10,010 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders/whatsapp?whatsapp_number=+1234567890 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/whatsapp
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders/whatsapp?whatsapp_number=+1234567890 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:10,012 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:10,013 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____ ERROR at setup of test_checkout_intent_creates_proper_channel_metadata ____
file /Users/kess/Projects/ConversationalCommerce/backend/tests/conversation/test_order_intent_handler.py, line 10
  @pytest.mark.asyncio
  async def test_checkout_intent_creates_proper_channel_metadata(
      db_session, mocker, fake_product, fake_cart
  ):
      """Test that the checkout intent handler properly creates order with channel metadata."""
      # Arrange
      tenant_id = str(uuid4())
      handler = OrderIntentHandler(tenant_id=tenant_id, db=db_session)

      # Mock product service to return our fake product
      mocker.patch(
          "app.services.product_service.ProductService.get_product",
          return_value=fake_product,
      )

      # Mock cart service to return cart with our product
      mocker.patch(
          "app.services.cart_service.CartService.get_cart_by_phone",
          return_value=fake_cart,
      )

      intent = ParsedIntent(
          intent_type=IntentType.CHECKOUT,
          raw_text="I want to checkout my cart",
          entities={
              "customer_name": "John Doe",
          },
          confidence=0.95,
      )

      context = {
          "phone_number": "+254712345678",
          "user": {"name": "John Doe", "phone": "+254712345678"},
          "whatsapp_metadata": {
              "message_id": "wamid.test123",
              "conversation_id": "conv456",
          },
      }

      # Act
      response = await handler.handle_checkout_intent(intent, context)

      # Assert
      assert response is not None
      assert "messages" in response

      # Check if context was updated with order ID
      assert "last_order_id" in context
      order_id = UUID(context.get("last_order_id"))

      # Verify order was created
      result = await db_session.execute(select(Order).where(Order.id == order_id))
      order = result.scalar_one_or_none()
      assert order is not None
      assert order.buyer_phone == "+254712345678"

      # Verify channel metadata
      result = await db_session.execute(
          select(OrderChannelMeta).where(OrderChannelMeta.order_id == order_id)
      )
      channel_meta = result.scalar_one_or_none()

      assert channel_meta is not None
      assert channel_meta.channel == ChannelType.whatsapp
      assert channel_meta.message_id == "wamid.test123"
      assert channel_meta.chat_session_id == "conv456"
E       fixture 'mocker' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/cache::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/conversation/test_order_intent_handler.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/conversation/test_order_intent_handler.py:10
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:10,216 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
__________ ERROR at setup of test_whatsapp_webhook_to_order_creation ___________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/integration/test_whatsapp_webhook_order_flow.py, line 8
  @pytest.mark.asyncio
  async def test_whatsapp_webhook_to_order_creation(
      client, db_session, fake_product, mocker
  ):
      """
      End-to-end test verifying that a WhatsApp webhook can create an order
      with proper channel metadata.
      """
      # Arrange
      # Mock the NLP intent parser to identify product purchase intent
      mocker.patch(
          "app.conversation.nlp.intent_parser.parse_intent",
          return_value={
              "intent_type": "checkout",
              "entities": {
                  "product_id": str(fake_product.id),
                  "customer_name": "Test Customer",
              },
              "confidence": 0.95,
          },
      )

      # Mock the cart service to return a cart with the product
      mocker.patch(
          "app.services.cart_service.CartService.get_cart_by_phone",
          return_value={
              "items": [
                  {"product_id": str(fake_product.id), "price": 1000.0, "quantity": 1}
              ]
          },
      )

      # Simulate a WhatsApp webhook call
      webhook_payload = {
          "object": "whatsapp_business_account",
          "entry": [
              {
                  "id": "WHATSAPP_BUSINESS_ACCOUNT_ID",
                  "changes": [
                      {
                          "value": {
                              "messaging_product": "whatsapp",
                              "metadata": {
                                  "display_phone_number": "+254700000000",
                                  "phone_number_id": "PHONE_NUMBER_ID",
                              },
                              "contacts": [
                                  {
                                      "profile": {"name": "Test Customer"},
                                      "wa_id": "254712345678",
                                  }
                              ],
                              "messages": [
                                  {
                                      "from": "254712345678",
                                      "id": "wamid.test123",
                                      "timestamp": "1622825038",
                                      "text": {"body": "I want to buy the red shirt"},
                                      "type": "text",
                                  }
                              ],
                          },
                          "field": "messages",
                      }
                  ],
              }
          ],
      }

      # Act
      # First, simulate product identification and conversation processing
      resp = await client.post(
          "/api/v1/conversation/process",
          json={
              "text": "I want to buy the red shirt",
              "phone": "+254712345678",
              "session_id": "test_session_123",
          },
      )

      # Then simulate the webhook
      webhook_resp = await client.post("/webhooks/whatsapp", json=webhook_payload)

      # Assert
      assert webhook_resp.status_code == 200

      # Check database for created order
      result = await db_session.execute(
          select(Order).where(Order.buyer_phone == "+254712345678")
      )
      order = result.scalar_one_or_none()

      assert order is not None

      # Query for associated channel metadata
      result = await db_session.execute(
          select(OrderChannelMeta).where(OrderChannelMeta.order_id == order.id)
      )
      channel_meta = result.scalar_one_or_none()

      assert channel_meta is not None
      assert channel_meta.channel == ChannelType.whatsapp
      # In a real implementation, we'd check for the exact message ID from the webhook
      assert channel_meta.message_id is not None
E       fixture 'fake_product' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, app/api::<event_loop>, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/integration/test_whatsapp_webhook_order_flow.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/integration/test_whatsapp_webhook_order_flow.py:8
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:10,624 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:10,625 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:10,625 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:10,625 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
_________ ERROR at teardown of test_whatsapp_webhook_to_order_creation _________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1480472d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:10,624 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:10,625 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:10,625 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:10,625 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:10,627 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:10,628 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at setup of TestSuperAdminSecurityRegression.test_clerk_organization_membership_validation _
file /Users/kess/Projects/ConversationalCommerce/backend/tests/security/test_security_regression.py, line 25
      @pytest.mark.asyncio
      async def test_clerk_organization_membership_validation(self, test_db):
          """Test that Clerk organization membership validation works correctly."""
          service = ClerkOrganizationsService()

          # Test valid SuperAdmin user
          with patch.object(service, 'get_user_organizations') as mock_get_orgs:
              mock_get_orgs.return_value = [{
                  "organization": {"id": service.super_admin_org_id},
                  "status": "active"
              }]

              is_super_admin = await service.is_super_admin("test_user_id")
              assert is_super_admin is True

          # Test non-SuperAdmin user
          with patch.object(service, 'get_user_organizations') as mock_get_orgs:
              mock_get_orgs.return_value = [{
                  "organization": {"id": "different_org_id"},
                  "status": "active"
              }]

              is_super_admin = await service.is_super_admin("test_user_id")
              assert is_super_admin is False
E       fixture 'test_db' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_clerk_service, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_test_user, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/mocks::<event_loop>, tests/security/test_security_regression.py::<event_loop>, tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/security/test_security_regression.py:25
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,114 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
_ ERROR at setup of TestSuperAdminSecurityRegression.test_ip_allowlist_enforcement _
file /Users/kess/Projects/ConversationalCommerce/backend/tests/security/test_security_regression.py, line 50
      @pytest.mark.asyncio
      async def test_ip_allowlist_enforcement(self, test_db):
          """Test that IP allowlist enforcement prevents unauthorized access."""
          service = IPAllowlistService()

          # Add test IP to allowlist
          await service.add_allowlist_entry(
              db=test_db,
              ip_range="192.168.1.0/24",
              description="Test IP range",
              is_global=True
          )

          # Enable IP allowlist enforcement
          await service.set_allowlist_enforcement(
              db=test_db,
              is_enforced=True
          )

          # Test allowed IP
          allowed = await service.is_ip_allowed_global(test_db, "192.168.1.100")
          assert allowed is True

          # Test blocked IP
          blocked = await service.is_ip_allowed_global(test_db, "10.0.0.1")
          assert blocked is False
E       fixture 'test_db' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_clerk_service, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_test_user, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/mocks::<event_loop>, tests/security/test_security_regression.py::<event_loop>, tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/security/test_security_regression.py:50
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,115 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
_ ERROR at setup of TestSuperAdminSecurityRegression.test_session_management_security _
file /Users/kess/Projects/ConversationalCommerce/backend/tests/security/test_security_regression.py, line 77
      @pytest.mark.asyncio
      async def test_session_management_security(self, test_db):
          """Test session management security features."""
          session_manager = SuperAdminSessionManager()

          # Mock Clerk organization validation
          with patch('app.core.security.clerk_organizations.clerk_organizations_service.is_super_admin') as mock_is_admin:
              mock_is_admin.return_value = True

              with patch('app.core.security.clerk_organizations.clerk_organizations_service.get_super_admin_role') as mock_get_role:
                  mock_get_role.return_value = "admin"

                  # Create session
                  session_info = await session_manager.create_session(
                      db=test_db,
                      user_id="test_admin_user",
                      ip_address="192.168.1.100",
                      user_agent="Test User Agent"
                  )

                  assert session_info.user_id == "test_admin_user"
                  assert session_info.security_level in [
                      "standard", "elevated", "high"]

                  # Validate session
                  validated_session = await session_manager.validate_session(
                      db=test_db,
                      session_id=session_info.session_id,
                      ip_address="192.168.1.100",
                      user_agent="Test User Agent"
                  )

                  assert validated_session is not None
                  assert validated_session.session_id == session_info.session_id
E       fixture 'test_db' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_clerk_service, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_test_user, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/mocks::<event_loop>, tests/security/test_security_regression.py::<event_loop>, tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/security/test_security_regression.py:77
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,116 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
_ ERROR at setup of TestSuperAdminSecurityRegression.test_two_factor_authentication _
file /Users/kess/Projects/ConversationalCommerce/backend/tests/security/test_security_regression.py, line 112
      @pytest.mark.asyncio
      async def test_two_factor_authentication(self, test_db):
          """Test 2FA setup and verification."""
          service = SuperAdminTwoFactorService()

          # Setup TOTP for admin
          totp_data = await service.setup_totp_for_admin(
              db=test_db,
              admin_user_id="test_admin_user",
              ip_address="192.168.1.100"
          )

          assert "secret" in totp_data
          assert "qr_code_uri" in totp_data
          assert "backup_codes" in totp_data
          assert len(totp_data["backup_codes"]) == 10

          # Test TOTP verification (mock valid code)
          with patch('pyotp.TOTP.verify') as mock_verify:
              mock_verify.return_value = True

              is_valid = await service.verify_totp_code(
                  db=test_db,
                  admin_user_id="test_admin_user",
                  code="123456"
              )

              assert is_valid is True

          # Test backup code verification
          backup_code = totp_data["backup_codes"][0]
          is_valid = await service.verify_backup_code(
              db=test_db,
              admin_user_id="test_admin_user",
              backup_code=backup_code
          )

          assert is_valid is True
E       fixture 'test_db' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_clerk_service, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_test_user, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/mocks::<event_loop>, tests/security/test_security_regression.py::<event_loop>, tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/security/test_security_regression.py:112
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,117 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
_ ERROR at setup of TestSuperAdminSecurityRegression.test_brute_force_protection _
file /Users/kess/Projects/ConversationalCommerce/backend/tests/security/test_security_regression.py, line 151
      @pytest.mark.asyncio
      async def test_brute_force_protection(self, test_db):
          """Test brute force protection mechanisms."""
          service = BruteForceService()

          user_id = "test_user_id"
          ip_address = "192.168.1.100"

          # Simulate multiple failed login attempts
          for i in range(5):
              await service.record_login_attempt(
                  db=test_db,
                  username="test_user",
                  ip_address=ip_address,
                  result="failed_password",
                  user_id=user_id
              )

          # Check if account is locked
          is_locked = await service.is_account_locked(test_db, user_id)
          assert is_locked is True

          # Test rate limiting
          is_rate_limited, retry_after = await service.check_rate_limit(
              db=test_db,
              rule_name="admin_api",
              ip_address=ip_address,
              user_id=user_id,
              is_admin=True
          )

          # Should not be rate limited on first check
          assert is_rate_limited is False
E       fixture 'test_db' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_clerk_service, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_test_user, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/mocks::<event_loop>, tests/security/test_security_regression.py::<event_loop>, tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/security/test_security_regression.py:151
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,117 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
_ ERROR at teardown of TestSuperAdminSecurityRegression.test_security_headers_injection _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147c0e4d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,118 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:11,119 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:11,119 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:11,119 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:11,129 - app - ERROR - Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('6912f64f-3944-4a2f-a7b0-92bce9aaa5f0'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 120533, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/health', None, '{"event_type": "unauthorized_domain_access", "method": "GET", "path": "/api/admin/health", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-10 03:06:11,129 - httpx - INFO - HTTP Request: GET http://testserver/api/admin/health "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
ERROR    app:super_admin_security.py:385 Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('6912f64f-3944-4a2f-a7b0-92bce9aaa5f0'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 120533, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/health', None, '{"event_type": "unauthorized_domain_access", "method": "GET", "path": "/api/admin/health", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/admin/health "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:11,132 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:11,133 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of TestSuperAdminSecurityRegression.test_cors_domain_restrictions _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147bed110>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,337 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:11,338 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:11,338 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:11,338 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:11,348 - app - ERROR - Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('0938c3f2-a3ce-4e2b-a68c-52d90615a944'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 339181, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/health', None, '{"event_type": "unauthorized_domain_access", "method": "OPTIONS", "path": "/api/admin/health", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-10 03:06:11,348 - httpx - INFO - HTTP Request: OPTIONS http://testserver/api/admin/health "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
ERROR    app:super_admin_security.py:385 Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('0938c3f2-a3ce-4e2b-a68c-52d90615a944'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 339181, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/health', None, '{"event_type": "unauthorized_domain_access", "method": "OPTIONS", "path": "/api/admin/health", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
INFO     httpx:_client.py:1027 HTTP Request: OPTIONS http://testserver/api/admin/health "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:11,351 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:11,352 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of TestSecurityMiddlewareRegression.test_domain_specific_cors_middleware _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x14857a4d0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,441 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:11,442 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:11,442 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:11,442 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:11,442 - app - ERROR - Error checking emergency lockout: Textual SQL expression 'SELECT COUNT(*) FROM syst...' should be explicitly declared as text('SELECT COUNT(*) FROM syst...')
2025-07-10 03:06:11,442 - app - ERROR - Error checking IP allowlist: Textual SQL expression 'SELECT is_enforced FROM i...' should be explicitly declared as text('SELECT is_enforced FROM i...')
2025-07-10 03:06:11,443 - app.main - ERROR - IP allowlist check failed: 'IPAllowlistService' object has no attribute 'is_ip_allowed_global'
2025-07-10 03:06:11,452 - app - ERROR - Error logging admin action: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('4fafad07-80d6-47d6-ae1d-038c2eda8f8e'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 443201, tzinfo=datetime.timezone.utc), 'GET /api/admin/health', 'error', 'admin_endpoint', '/api/admin/health', None, '{"method": "GET", "path": "/api/admin/health", "query_params": {}, "status_code": 500, "duration": 0.0002129077911376953, "user_agent": "testclient", "host": "admin.enwhe.com", "organization_validated": false}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-10 03:06:11,452 - httpx - INFO - HTTP Request: GET http://testserver/api/admin/health "HTTP/1.1 500 Internal Server Error"
------------------------------ Captured log call -------------------------------
ERROR    app:super_admin_security.py:227 Error checking emergency lockout: Textual SQL expression 'SELECT COUNT(*) FROM syst...' should be explicitly declared as text('SELECT COUNT(*) FROM syst...')
ERROR    app:super_admin_security.py:268 Error checking IP allowlist: Textual SQL expression 'SELECT is_enforced FROM i...' should be explicitly declared as text('SELECT is_enforced FROM i...')
ERROR    app.main:main.py:300 IP allowlist check failed: 'IPAllowlistService' object has no attribute 'is_ip_allowed_global'
ERROR    app:super_admin_security.py:356 Error logging admin action: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('4fafad07-80d6-47d6-ae1d-038c2eda8f8e'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 443201, tzinfo=datetime.timezone.utc), 'GET /api/admin/health', 'error', 'admin_endpoint', '/api/admin/health', None, '{"method": "GET", "path": "/api/admin/health", "query_params": {}, "status_code": 500, "duration": 0.0002129077911376953, "user_agent": "testclient", "host": "admin.enwhe.com", "organization_validated": false}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/admin/health "HTTP/1.1 500 Internal Server Error"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:11,454 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:11,455 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at teardown of TestSecurityMiddlewareRegression.test_super_admin_security_middleware _

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148348610>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,545 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:11,546 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:11,546 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:11,546 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:11,556 - app - ERROR - Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('3b7a9510-ab67-46fd-8c7b-6c640e5c4665'), None, '10.0.0.1', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 547400, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/users', None, '{"event_type": "unauthorized_domain_access", "method": "GET", "path": "/api/admin/users", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-10 03:06:11,557 - httpx - INFO - HTTP Request: GET http://testserver/api/admin/users "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
ERROR    app:super_admin_security.py:385 Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('3b7a9510-ab67-46fd-8c7b-6c640e5c4665'), None, '10.0.0.1', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 547400, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/users', None, '{"event_type": "unauthorized_domain_access", "method": "GET", "path": "/api/admin/users", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/admin/users "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:11,559 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:11,560 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_ ERROR at setup of TestSecurityEventLogging.test_security_event_audit_logging _
file /Users/kess/Projects/ConversationalCommerce/backend/tests/security/test_security_regression.py, line 294
      @pytest.mark.asyncio
      async def test_security_event_audit_logging(self, test_db):
          """Test that security events are properly logged for audit."""

          # Test login attempt logging
          service = BruteForceService()

          login_attempt = await service.record_login_attempt(
              db=test_db,
              username="test_user",
              ip_address="192.168.1.100",
              result="success",
              user_id="test_user_id",
              is_admin_portal=True
          )

          assert login_attempt.username == "test_user"
          assert login_attempt.ip_address == "192.168.1.100"
          assert login_attempt.is_admin_portal is True

          # Test IP allowlist modification logging
          ip_service = IPAllowlistService()

          # This should generate audit log entries
          await ip_service.add_allowlist_entry(
              db=test_db,
              ip_range="10.0.0.0/8",
              description="Test IP range",
              is_global=True,
              created_by="admin_user_id"
          )

          # Verify audit logs would be created (actual audit service testing)
          # This would require integration with the actual audit service
E       fixture 'test_db' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_clerk_service, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_test_user, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/mocks::<event_loop>, tests/security/test_security_regression.py::<event_loop>, tests/security/test_security_regression.py::TestSecurityEventLogging::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/security/test_security_regression.py:294
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,761 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
__________ ERROR at setup of test_web_order_creation_channel_metadata __________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/services/test_order_service_web.py, line 10
  @pytest.mark.asyncio
  async def test_web_order_creation_channel_metadata(db_session, fake_product):
      """Test that web orders correctly create associated channel metadata."""
      # Arrange
      order_service = OrderService(db_session)
      product_id = fake_product.id
      seller_id = fake_product.seller_id

      order_in = OrderCreate(
          product_id=product_id,
          buyer_name="Web Customer",
          buyer_phone="+254712345678",
          buyer_email="customer@example.com",  # Required for web orders
          quantity=1,
          total_amount=1000.0,
          order_source=OrderSource.website,
      )

      # Act
      order = await order_service.create_order(order_in, seller_id)

      # Assert
      assert order is not None
      assert order.order_source == OrderSource.website

      # Verify channel metadata was created
      result = await db_session.execute(
          select(OrderChannelMeta).where(OrderChannelMeta.order_id == order.id)
      )
      channel_meta = result.scalar_one_or_none()

      assert channel_meta is not None
      assert channel_meta.channel == ChannelType.storefront
      assert channel_meta.order_id == order.id
E       fixture 'fake_product' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/services/test_order_service_web.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/services/test_order_service_web.py:10
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,765 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
_______ ERROR at setup of test_whatsapp_order_creation_channel_metadata ________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/services/test_order_service_whatsapp.py, line 10
  @pytest.mark.asyncio
  async def test_whatsapp_order_creation_channel_metadata(db_session, fake_product):
      """Test that WhatsApp orders correctly create associated channel metadata with WhatsApp details."""
      # Arrange
      order_service = OrderService(db_session)
      product_id = fake_product.id
      seller_id = fake_product.seller_id

      order_in = WhatsAppOrderCreate(
          product_id=product_id,
          buyer_name="WhatsApp Customer",
          buyer_phone="+254712345678",
          whatsapp_number="+254712345678",
          message_id="test_message_123",
          conversation_id="test_conv_456",
          quantity=1,
          total_amount=1000.0,
      )

      # Act
      order = await order_service.create_whatsapp_order(order_in, seller_id)

      # Assert
      assert order is not None
      assert order.order_source == OrderSource.whatsapp

      # Verify channel metadata was created
      result = await db_session.execute(
          select(OrderChannelMeta).where(OrderChannelMeta.order_id == order.id)
      )
      channel_meta = result.scalar_one_or_none()

      assert channel_meta is not None
      assert channel_meta.channel == ChannelType.whatsapp
      assert channel_meta.message_id == "test_message_123"
      assert channel_meta.chat_session_id == "test_conv_456"
E       fixture 'fake_product' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/services/test_order_service_whatsapp.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/services/test_order_service_whatsapp.py:10
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,767 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
______________ ERROR at teardown of test_dashboard_without_token _______________

    @pytest.fixture
    def unauth_client():
        """Create a test client without any auth dependency overrides"""
        app = create_app()
>       with TestClient(app) as test_client:

tests/test_auth.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,768 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:11,802 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:11,802 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:11,802 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:11,803 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:11,823 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:11,823 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/dashboard
2025-07-10 03:06:11,823 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/dashboard "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/dashboard
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/dashboard "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:11,825 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:11,826 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
________________ ERROR at teardown of test_dashboard_with_token ________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1475c5ad0>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,913 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:11,914 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:11,914 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:11,914 - app.main - INFO - Startup complete
2025-07-10 03:06:11,914 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:11,916 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 58ad4220
2025-07-10 03:06:11,916 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:11,916 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 5b177e50
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 58ad4220
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 5b177e50
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:11,917 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:11,937 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:11,937 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/dashboard
2025-07-10 03:06:11,938 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/dashboard "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/dashboard
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/dashboard "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:11,939 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:11,940 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______________ ERROR at teardown of test_products_without_token _______________

    @pytest.fixture
    def unauth_client():
        """Create a test client without any auth dependency overrides"""
        app = create_app()
>       with TestClient(app) as test_client:

tests/test_auth.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:12,149 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:12,181 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:12,182 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:12,182 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:12,183 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:12,203 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:12,203 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:12,204 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:12,205 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:12,206 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_____________ ERROR at teardown of test_create_product_with_token ______________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x14755b250>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:12,292 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:12,293 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:12,293 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:12,293 - app.main - INFO - Startup complete
2025-07-10 03:06:12,294 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:12,295 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 5f1ee703
2025-07-10 03:06:12,295 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:12,296 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user ce6e4d28
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 5f1ee703
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user ce6e4d28
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:12,297 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:12,316 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:12,316 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:12,316 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Status: 403
Response: Invalid tenant ID: 5f1ee703-01e8-456d-8023-bfd12518bc63
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:12,318 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:12,319 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
________________ ERROR at teardown of test_orders_without_token ________________

    @pytest.fixture
    def unauth_client():
        """Create a test client without any auth dependency overrides"""
        app = create_app()
>       with TestClient(app) as test_client:

tests/test_auth.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:12,409 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:12,442 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:12,442 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:12,442 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:12,442 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:12,463 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:12,463 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:06:12,464 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:12,465 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:12,466 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_________________ ERROR at teardown of test_orders_with_token __________________

async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1485c3b90>

    @pytest.fixture(scope="function")
    def client(async_db_session) -> Generator:
        """
        Create a FastAPI test client for API testing.
        Override the get_db dependency to use our test session to ensure
        middleware can see rows created in test fixtures.
        Also patch get_async_session_local to ensure middleware uses the same session.
        """
        from app.api.deps import get_db
        from app.main import app as fastapi_app
        from app.db.async_session import get_async_session_local
    
        # In case app is wrapped with middleware, access the original FastAPI instance
        # This handles cases where app might be wrapped with SentryAsgiMiddleware
        original_app = getattr(fastapi_app, "app", fastapi_app)
    
        # Create dependency override to use our test session
        async def override_get_db():
            try:
                yield async_db_session
            except Exception as e:
                logger.error(f"Error in override_get_db: {e}")
                raise
    
        # Store the test session globally for middleware access
        global _test_db_session
        _test_db_session = async_db_session
    
        # Create a patched version of get_async_session_local that returns a factory yielding our test session
        original_get_async_session_local = get_async_session_local
    
        def patched_get_async_session_local():
            # Return a factory that will yield our test session
            async def factory():
                try:
                    yield async_db_session
                except Exception as e:
                    logger.error(f"Error in patched session factory: {e}")
                    raise
            return factory
    
        # Apply the overrides
        original_app.dependency_overrides[get_db] = override_get_db
    
        # Patch the session factory used by middleware
        with mock.patch('app.db.async_session.get_async_session_local', patched_get_async_session_local):
            try:
                # Create and yield the client
>               with TestClient(fastapi_app) as test_client:

tests/fixtures/api.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/starlette/testclient.py:691: in __exit__
    self.exit_stack.close()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:609: in close
    self.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:601: in __exit__
    raise exc_details[1]
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:586: in __exit__
    if cb(*exc_details):
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:469: in _exit_wrapper
    callback(*args, **kwds)
../venv/lib/python3.11/site-packages/starlette/testclient.py:684: in wait_shutdown
    portal.call(self.wait_shutdown)
../venv/lib/python3.11/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:731: in wait_shutdown
    await receive()
../venv/lib/python3.11/site-packages/starlette/testclient.py:721: in receive
    self.task.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../venv/lib/python3.11/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
../venv/lib/python3.11/site-packages/starlette/testclient.py:696: in lifespan
    await self.app(scope, self.stream_receive.receive, self.stream_send.send)
../venv/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/errors.py:152: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/base.py:100: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py:48: in __call__
    await self.app(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:723: in app
    await self.lifespan(scope, receive, send)
../venv/lib/python3.11/site-packages/starlette/routing.py:692: in lifespan
    async with self.lifespan_context(app) as maybe_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
../venv/lib/python3.11/site-packages/fastapi/routing.py:133: in merged_lifespan
    async with original_context(app) as maybe_original_state:
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:217: in __aexit__
    await anext(self.gen)
app/main.py:275: in lifespan
    await stop_domain_verification()
app/main.py:249: in stop_domain_verification
    await verification_service.stop()
app/middleware/domain_verification.py:274: in stop
    await self._task
app/middleware/domain_verification.py:295: in _verification_loop
    await asyncio.wait_for(self._stop_event.wait(), timeout=300)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py:489: in wait_for
    return fut.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/locks.py:210: in wait
    fut = self._get_loop().create_future()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.locks.Event object at 0x144566490 [unset]>

    def _get_loop(self):
        loop = events._get_running_loop()
    
        if self._loop is None:
            with _global_lock:
                if self._loop is None:
                    self._loop = loop
        if loop is not self._loop:
>           raise RuntimeError(f'{self!r} is bound to a different event loop')
E           RuntimeError: <asyncio.locks.Event object at 0x144566490 [unset]> is bound to a different event loop

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/mixins.py:20: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:12,670 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:12,671 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:12,671 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:12,671 - app.main - INFO - Startup complete
2025-07-10 03:06:12,671 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:12,673 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 58d66e7b
2025-07-10 03:06:12,673 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:12,674 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 9b834a2b
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 58d66e7b
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 9b834a2b
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:12,674 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:12,696 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:12,696 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:06:12,696 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:12,698 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:06:12,699 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_____________________ ERROR at setup of test_db_connection _____________________
file /Users/kess/Projects/ConversationalCommerce/backend/tests/test_db.py, line 4
  def test_db_connection(db_engine):
E       fixture 'db_engine' not found
>       available fixtures: _session_event_loop, admin_auth_headers, anyio_backend, anyio_backend_name, anyio_backend_options, apply_migrations_once, async_db_session, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, check_leaked_connections, client, cov, db_session, debug_test_environment, doctest_namespace, ensure_migrations_applied_first, ensure_test_environment_ready, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_payment_client, mock_s3_client, mock_sms_client, monkeypatch, no_cover, patch_content_analysis, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, set_test_environment, test_admin_user, test_idempotency_key, test_tenant, test_user, tests/test_db.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, webhook_auth_headers
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/kess/Projects/ConversationalCommerce/backend/tests/test_db.py:4
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:12,788 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
=================================== FAILURES ===================================
________________________ test_onboarding_start_endpoint ________________________

async_client = <httpx.AsyncClient object at 0x145e5ccd0>

    @pytest.mark.asyncio
    async def test_onboarding_start_endpoint(async_client: AsyncClient):
        tenant_id = str(uuid4())
        payload = {
            "business_name": "Test Merchant",
            "subdomain": f"test{tenant_id[:6]}",
            "phone": "+1234567890"
        }
        headers = {"Authorization": "Bearer test_token"}
        response = await async_client.post("/api/v1/onboarding/start", json=payload, headers=headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/api/v1/endpoints/tests/test_onboarding_endpoints.py:17: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:52,882 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:52,966 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:52,966 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/onboarding/start
2025-07-10 03:05:52,966 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/onboarding/start "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/onboarding/start
INFO     httpx:_client.py:1758 HTTP Request: POST http://testserver/api/v1/onboarding/start "HTTP/1.1 403 Forbidden"
____________________ test_onboarding_start_domain_conflict _____________________

async_client = <httpx.AsyncClient object at 0x14696fe50>

    @pytest.mark.asyncio
    async def test_onboarding_start_domain_conflict(async_client: AsyncClient):
        tenant_id1 = str(uuid4())
        tenant_id2 = str(uuid4())
        subdomain = f"conflict{tenant_id1[:6]}"
        payload1 = {"business_name": "Merchant1",
                    "subdomain": subdomain, "phone": "+123"}
        payload2 = {"business_name": "Merchant2",
                    "subdomain": subdomain, "phone": "+456"}
        headers = {"Authorization": "Bearer test_token"}
        await async_client.post("/api/v1/onboarding/start", json=payload1, headers=headers)
        response = await async_client.post("/api/v1/onboarding/start", json=payload2, headers=headers)
>       assert response.status_code == 409 or response.status_code == 400
E       assert (403 == 409 or 403 == 400)
E        +  where 403 = <Response [403 Forbidden]>.status_code
E        +  and   403 = <Response [403 Forbidden]>.status_code

app/api/v1/endpoints/tests/test_onboarding_endpoints.py:35: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:52,991 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:53,013 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:53,013 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/onboarding/start
2025-07-10 03:05:53,014 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/onboarding/start "HTTP/1.1 403 Forbidden"
2025-07-10 03:05:53,014 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:53,032 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:53,032 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/onboarding/start
2025-07-10 03:05:53,032 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/onboarding/start "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/onboarding/start
INFO     httpx:_client.py:1758 HTTP Request: POST http://testserver/api/v1/onboarding/start "HTTP/1.1 403 Forbidden"
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/onboarding/start
INFO     httpx:_client.py:1758 HTTP Request: POST http://testserver/api/v1/onboarding/start "HTTP/1.1 403 Forbidden"
___________________________ test_submit_kyc_endpoint ___________________________

async_client = <httpx.AsyncClient object at 0x1469e36d0>

    @pytest.mark.asyncio
    async def test_submit_kyc_endpoint(async_client: AsyncClient):
        headers = {"Authorization": "Bearer test_token"}
        # Start onboarding to get tenant_id
        payload = {"business_name": "KYC Merchant",
                   "subdomain": f"kyc{uuid4().hex[:6]}", "phone": "+123"}
        start_resp = await async_client.post("/api/v1/onboarding/start", json=payload, headers=headers)
>       tenant_id = start_resp.json()["tenant_id"]

app/api/v1/endpoints/tests/test_onboarding_endpoints.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/httpx/_models.py:762: in json
    return jsonlib.loads(self.content, **kwargs)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x100b60c90>
s = 'Invalid tenant ID: 00000000-0000-0000-0000-000000000010', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/decoder.py:355: JSONDecodeError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,035 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:53,053 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:53,053 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/onboarding/start
2025-07-10 03:05:53,053 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/onboarding/start "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/onboarding/start
INFO     httpx:_client.py:1758 HTTP Request: POST http://testserver/api/v1/onboarding/start "HTTP/1.1 403 Forbidden"
__________________________ test_team_invite_endpoint ___________________________

async_client = <httpx.AsyncClient object at 0x146be2510>

    @pytest.mark.asyncio
    async def test_team_invite_endpoint(async_client: AsyncClient):
        headers = {"Authorization": "Bearer test_token"}
        payload = {"business_name": "Invite Merchant",
                   "subdomain": f"invite{uuid4().hex[:6]}", "phone": "+123"}
        start_resp = await async_client.post("/api/v1/onboarding/start", json=payload, headers=headers)
>       tenant_id = start_resp.json()["tenant_id"]

app/api/v1/endpoints/tests/test_onboarding_endpoints.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/httpx/_models.py:762: in json
    return jsonlib.loads(self.content, **kwargs)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x100b60c90>
s = 'Invalid tenant ID: 00000000-0000-0000-0000-000000000010', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/decoder.py:355: JSONDecodeError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,066 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:53,082 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:53,083 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/onboarding/start
2025-07-10 03:05:53,083 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/onboarding/start "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/onboarding/start
INFO     httpx:_client.py:1758 HTTP Request: POST http://testserver/api/v1/onboarding/start "HTTP/1.1 403 Forbidden"
______________________ test_upload_kyc_document_endpoint _______________________

async_client = <httpx.AsyncClient object at 0x145c5abd0>

    @pytest.mark.asyncio
    async def test_upload_kyc_document_endpoint(async_client: AsyncClient):
        headers = {"Authorization": "Bearer test_token"}
        payload = {"business_name": "Doc Merchant",
                   "subdomain": f"doc{uuid4().hex[:6]}", "phone": "+123"}
        start_resp = await async_client.post("/api/v1/onboarding/start", json=payload, headers=headers)
>       tenant_id = start_resp.json()["tenant_id"]

app/api/v1/endpoints/tests/test_onboarding_endpoints.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/httpx/_models.py:762: in json
    return jsonlib.loads(self.content, **kwargs)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x100b60c90>
s = 'Invalid tenant ID: 00000000-0000-0000-0000-000000000010', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/decoder.py:355: JSONDecodeError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,196 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:53,215 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:53,215 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/onboarding/start
2025-07-10 03:05:53,216 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/onboarding/start "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/onboarding/start
INFO     httpx:_client.py:1758 HTTP Request: POST http://testserver/api/v1/onboarding/start "HTTP/1.1 403 Forbidden"
_________________________ test_handle_order_delivered __________________________

mock_logger = <MagicMock name='logger' id='5465850384'>
mock_notification_service = <MagicMock name='NotificationService' spec='NotificationService' id='5483071888'>

    @pytest.mark.asyncio
    @patch("app.domain.events.order_event_handlers.NotificationService", autospec=True)
    @patch("app.domain.events.order_event_handlers.logger")
    async def test_handle_order_delivered(mock_logger, mock_notification_service):
        event = OrderDeliveredEvent(
            event_id="evt4",
            tenant_id="tenant1",
            order_id="order4",
            order_number="1004",
            delivery_date=datetime.utcnow(),
            timestamp=datetime.utcnow(),
        )
        mock_notification_service.return_value.send_notification = AsyncMock()
>       await handle_order_delivered(event)

app/domain/events/test_order_event_handlers.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
app/domain/events/order_event_handlers.py:163: in handle_order_delivered
    analytics_log_event(
app/domain/events/order_event_handlers.py:37: in analytics_log_event
    logger.info("[Analytics] %s", json.dumps(log_data))
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:231: in dumps
    return _default_encoder.encode(obj)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:200: in encode
    chunks = self.iterencode(o, _one_shot=True)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:258: in iterencode
    return _iterencode(o, 0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x10625d550>
o = datetime.datetime(2025, 7, 10, 9, 5, 53, 242222)

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return super().default(o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type datetime is not JSON serializable

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:180: TypeError
________________________ test_handle_payment_processed _________________________

mock_logger = <MagicMock name='logger' id='5481836624'>
mock_notification_service = <MagicMock name='NotificationService' spec='NotificationService' id='5471163984'>

    @pytest.mark.asyncio
    @patch("app.domain.events.order_event_handlers.NotificationService", autospec=True)
    @patch("app.domain.events.order_event_handlers.logger")
    async def test_handle_payment_processed(mock_logger, mock_notification_service):
        event = PaymentProcessedEvent(
            event_id="evt6",
            tenant_id="tenant1",
            order_id="order6",
            order_number="1006",
            transaction_id="txn1",
            amount=Money(amount=100, currency="USD"),
            payment_status="COMPLETED",
            payment_method="MOBILE_MONEY",
            payment_provider=None,
            timestamp=datetime.utcnow(),
        )
        mock_notification_service.return_value.send_notification = AsyncMock()
>       await handle_payment_processed(event)

app/domain/events/test_order_event_handlers.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
app/domain/events/order_event_handlers.py:225: in handle_payment_processed
    analytics_log_event(
app/domain/events/order_event_handlers.py:37: in analytics_log_event
    logger.info("[Analytics] %s", json.dumps(log_data))
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:231: in dumps
    return _default_encoder.encode(obj)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:200: in encode
    chunks = self.iterencode(o, _one_shot=True)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:258: in iterencode
    return _iterencode(o, 0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x10625d550>
o = Money(amount=100.0, currency='USD')

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return super().default(o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type Money is not JSON serializable

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:180: TypeError
______________________ test_notification_handler_failure _______________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x146a0f9d0>

    @pytest.mark.asyncio
    def test_notification_handler_failure(monkeypatch):
        # Simulate notification failure, ensure no exception is raised to main flow
        @patch("app.domain.events.order_event_handlers.NotificationService", autospec=True)
        @patch("app.domain.events.order_event_handlers.logger")
        async def inner(mock_logger, mock_notification_service):
            mock_notification_service.return_value.send_notification = AsyncMock(
                side_effect=Exception("fail")
            )
            event = OrderCreatedEvent(
                event_id="evt1",
                tenant_id="tenant1",
                order_id="order1",
                order_number="1001",
                order=MagicMock(),
                timestamp=datetime.utcnow(),
            )
            await handle_order_created(event)
            # Should log error, not raise
            assert mock_logger.error.called
    
        import asyncio
    
>       asyncio.run(inner())

app/domain/events/test_order_event_handlers.py:264: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/runners.py:190: in run
    return runner.run(main)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/runners.py:118: in run
    return self._loop.run_until_complete(task)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py:654: in run_until_complete
    return future.result()
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/unittest/mock.py:1395: in patched
    return await func(*newargs, **newkeywargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mock_logger = <MagicMock name='logger' id='5479910480'>
mock_notification_service = <MagicMock name='NotificationService' spec='NotificationService' id='5479923408'>

    @patch("app.domain.events.order_event_handlers.NotificationService", autospec=True)
    @patch("app.domain.events.order_event_handlers.logger")
    async def inner(mock_logger, mock_notification_service):
        mock_notification_service.return_value.send_notification = AsyncMock(
            side_effect=Exception("fail")
        )
>       event = OrderCreatedEvent(
            event_id="evt1",
            tenant_id="tenant1",
            order_id="order1",
            order_number="1001",
            order=MagicMock(),
            timestamp=datetime.utcnow(),
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for OrderCreatedEvent
E       order
E         Input should be a valid dictionary or instance of Order [type=model_type, input_value=<MagicMock id='5483073040'>, input_type=MagicMock]
E           For further information visit https://errors.pydantic.dev/2.11/v/model_type

app/domain/events/test_order_event_handlers.py:250: ValidationError
____________________ test_create_storefront_config_success _____________________

    @pytest.mark.asyncio
    async def test_create_storefront_config_success():
        db = MagicMock()
        db.query().filter().first.side_effect = [
            MagicMock(name='Tenant'), None, None, None]
        db.add = MagicMock()
        db.commit = MagicMock()
        db.refresh = MagicMock()
        tenant_id = '123e4567-e89b-12d3-a456-426614174000'
>       config = await create_storefront_config(db, tenant_id)

app/services/tests/test_storefront_config_service.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db = <MagicMock id='5482635600'>
tenant_id = '123e4567-e89b-12d3-a456-426614174000'
subdomain_name = "<MagicMock name='Tenant.name.lower().replace()' id='5482317968'>-d2801b"

    async def create_storefront_config(
        db: Session, tenant_id: str, subdomain_name: Optional[str] = None
    ) -> StorefrontConfig:
        """
        Create a new StorefrontConfig for a tenant with validation and sensible defaults.
    
        Args:
            db: Database session
            tenant_id: UUID of the tenant to create config for
            subdomain_name: Optional subdomain name (will be auto-generated if not provided)
    
        Returns:
            Newly created StorefrontConfig instance
    
        Raises:
            ResourceNotFoundError: If tenant doesn't exist
            ResourceConflictException: If tenant already has a config or subdomain conflicts
            ValidationException: If subdomain validation fails
        """
        # Verify tenant exists
        tenant = db.query(Tenant).filter(Tenant.id == tenant_id).first()
        if not tenant:
            logger.error(
                f"Cannot create storefront config: Tenant {tenant_id} not found")
            raise ResourceNotFoundError(f"Tenant with ID {tenant_id} not found")
    
        # Check if tenant already has a config
        existing_config = db.query(StorefrontConfig).filter(
            StorefrontConfig.tenant_id == tenant_id
        ).first()
    
        if existing_config:
            logger.warning(f"Tenant {tenant_id} already has a storefront config")
            return existing_config
    
        # Auto-generate subdomain if not provided
        if not subdomain_name:
            # Create a slugified version of the tenant name or use tenant ID
            base = tenant.name.lower().replace(
                " ", "-") if tenant.name else str(tenant_id)[:8]
            subdomain_name = f"{base}-{uuid.uuid4().hex[:6]}"
    
        # Validate subdomain format
        is_valid, error_msg = validate_subdomain(subdomain_name)
        if not is_valid:
>           raise ValidationException(f"Invalid subdomain: {error_msg}")
E           app.core.exceptions.ValidationError: Invalid subdomain: Subdomain must be between 1 and 63 characters

app/services/storefront_config_service.py:81: ValidationError
________________________ test_system_admin_permissions _________________________

mock_get_admin = <AsyncMock name='get_current_admin_user' id='5483182736'>
test_client = <starlette.testclient.TestClient object at 0x146ce00d0>
mock_system_admin = <AdminUser id=00002 email=sysadmin@example.com org=None>

    @patch("app.core.security.dependencies.get_current_admin_user")
    def test_system_admin_permissions(mock_get_admin, test_client, mock_system_admin):
        """Test System Admin has appropriate access limitations."""
        mock_get_admin.return_value = mock_system_admin
        headers = create_token_headers(mock_system_admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Should have access to tenant management
        response = test_client.get("/admin/tenants", headers=headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:186: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,335 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/tenants
2025-07-10 03:05:53,336 - httpx - INFO - HTTP Request: GET http://testserver/admin/tenants "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/tenants
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/admin/tenants "HTTP/1.1 403 Forbidden"
________________________ test_support_admin_permissions ________________________

mock_get_admin = <AsyncMock name='get_current_admin_user' id='5482245520'>
test_client = <starlette.testclient.TestClient object at 0x146c45010>
mock_support_admin = <AdminUser id=00003 email=support@example.com org=None>

    @patch("app.core.security.dependencies.get_current_admin_user")
    def test_support_admin_permissions(mock_get_admin, test_client, mock_support_admin):
        """Test Support Admin has appropriate access limitations."""
        mock_get_admin.return_value = mock_support_admin
        headers = create_token_headers(mock_support_admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Should have access to tenant data for support purposes
        response = test_client.get(
            "/admin/tenants/support-view", headers=headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:208: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,362 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/tenants/support-view
2025-07-10 03:05:53,362 - httpx - INFO - HTTP Request: GET http://testserver/admin/tenants/support-view "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/tenants/support-view
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/admin/tenants/support-view "HTTP/1.1 403 Forbidden"
_______________________ test_security_admin_permissions ________________________

mock_get_admin = <AsyncMock name='get_current_admin_user' id='5482039440'>
test_client = <starlette.testclient.TestClient object at 0x1469b4c10>
mock_security_admin = <AdminUser id=00004 email=security@example.com org=None>

    @patch("app.core.security.dependencies.get_current_admin_user")
    def test_security_admin_permissions(mock_get_admin, test_client, mock_security_admin):
        """Test Security Admin has appropriate access limitations."""
        mock_get_admin.return_value = mock_security_admin
        headers = create_token_headers(mock_security_admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Should have access to security settings
        response = test_client.get("/admin/security/settings", headers=headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:237: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,387 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/security/settings
2025-07-10 03:05:53,388 - httpx - INFO - HTTP Request: GET http://testserver/admin/security/settings "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/security/settings
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/admin/security/settings "HTTP/1.1 403 Forbidden"
_______________________ test_readonly_admin_permissions ________________________

mock_get_admin = <AsyncMock name='get_current_admin_user' id='5481372944'>
test_client = <starlette.testclient.TestClient object at 0x146ca6c10>
mock_readonly_admin = <AdminUser id=00005 email=readonly@example.com org=None>

    @patch("app.core.security.dependencies.get_current_admin_user")
    def test_readonly_admin_permissions(mock_get_admin, test_client, mock_readonly_admin):
        """Test Read-Only Admin has appropriate access limitations."""
        mock_get_admin.return_value = mock_readonly_admin
        headers = create_token_headers(mock_readonly_admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Should have read access to system metrics
        response = test_client.get("/admin/system/metrics", headers=headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:266: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,413 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/system/metrics
2025-07-10 03:05:53,414 - httpx - INFO - HTTP Request: GET http://testserver/admin/system/metrics "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/system/metrics
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/admin/system/metrics "HTTP/1.1 403 Forbidden"
_ TestPermissionMatrix.test_permission_matrix[SUPER_ADMIN-/api/v1/admin/tenants-GET-200] _

self = <test_access_control.TestPermissionMatrix object at 0x100aa6890>
mock_get_admin = <AsyncMock name='get_current_admin_user' id='5481384912'>
test_client = <starlette.testclient.TestClient object at 0x146b74090>
role = 'SUPER_ADMIN', endpoint = '/api/v1/admin/tenants', method = 'GET'
expected_status = 200

    @pytest.mark.asyncio
    @pytest.mark.parametrize("role,endpoint,method,expected_status", PERMISSION_TEST_CASES)
    @patch("app.core.security.dependencies.get_current_admin_user")
    async def test_permission_matrix(self, mock_get_admin, test_client, role, endpoint, method, expected_status):
        """Test various role and endpoint combinations against expected access levels."""
        # Create mock admin with the specified role
        admin = AdminUser(
            id="test-id",
            email=f"{role.lower()}@example.com",
            is_active=True
        )
        admin.mock_role = role
        mock_get_admin.return_value = admin
        headers = create_token_headers(admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Make request based on method
        if method == "GET":
            response = test_client.get(endpoint, headers=headers)
        elif method == "POST":
            response = test_client.post(
                endpoint, json={"test": "data"}, headers=headers)
        elif method == "PUT":
            response = test_client.put(
                endpoint, json={"test": "data"}, headers=headers)
        elif method == "DELETE":
            response = test_client.delete(endpoint, headers=headers)
    
>       assert response.status_code == expected_status
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:332: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,438 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/api/v1/admin/tenants
2025-07-10 03:05:53,439 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/admin/tenants "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/api/v1/admin/tenants
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/admin/tenants "HTTP/1.1 403 Forbidden"
_ TestPermissionMatrix.test_permission_matrix[SUPER_ADMIN-/api/v1/admin/users-POST-201] _

self = <test_access_control.TestPermissionMatrix object at 0x100aa7750>
mock_get_admin = <AsyncMock name='get_current_admin_user' id='5482010896'>
test_client = <starlette.testclient.TestClient object at 0x146c0c050>
role = 'SUPER_ADMIN', endpoint = '/api/v1/admin/users', method = 'POST'
expected_status = 201

    @pytest.mark.asyncio
    @pytest.mark.parametrize("role,endpoint,method,expected_status", PERMISSION_TEST_CASES)
    @patch("app.core.security.dependencies.get_current_admin_user")
    async def test_permission_matrix(self, mock_get_admin, test_client, role, endpoint, method, expected_status):
        """Test various role and endpoint combinations against expected access levels."""
        # Create mock admin with the specified role
        admin = AdminUser(
            id="test-id",
            email=f"{role.lower()}@example.com",
            is_active=True
        )
        admin.mock_role = role
        mock_get_admin.return_value = admin
        headers = create_token_headers(admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Make request based on method
        if method == "GET":
            response = test_client.get(endpoint, headers=headers)
        elif method == "POST":
            response = test_client.post(
                endpoint, json={"test": "data"}, headers=headers)
        elif method == "PUT":
            response = test_client.put(
                endpoint, json={"test": "data"}, headers=headers)
        elif method == "DELETE":
            response = test_client.delete(endpoint, headers=headers)
    
>       assert response.status_code == expected_status
E       assert 403 == 201
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:332: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,464 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=POST, path=/api/v1/admin/users
2025-07-10 03:05:53,465 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/admin/users "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=POST, path=/api/v1/admin/users
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/admin/users "HTTP/1.1 403 Forbidden"
_ TestPermissionMatrix.test_permission_matrix[SYSTEM_ADMIN-/api/v1/admin/feature-flags-PUT-200] _

self = <test_access_control.TestPermissionMatrix object at 0x100aa6750>
mock_get_admin = <AsyncMock name='get_current_admin_user' id='5481674704'>
test_client = <starlette.testclient.TestClient object at 0x146bbb290>
role = 'SYSTEM_ADMIN', endpoint = '/api/v1/admin/feature-flags', method = 'PUT'
expected_status = 200

    @pytest.mark.asyncio
    @pytest.mark.parametrize("role,endpoint,method,expected_status", PERMISSION_TEST_CASES)
    @patch("app.core.security.dependencies.get_current_admin_user")
    async def test_permission_matrix(self, mock_get_admin, test_client, role, endpoint, method, expected_status):
        """Test various role and endpoint combinations against expected access levels."""
        # Create mock admin with the specified role
        admin = AdminUser(
            id="test-id",
            email=f"{role.lower()}@example.com",
            is_active=True
        )
        admin.mock_role = role
        mock_get_admin.return_value = admin
        headers = create_token_headers(admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Make request based on method
        if method == "GET":
            response = test_client.get(endpoint, headers=headers)
        elif method == "POST":
            response = test_client.post(
                endpoint, json={"test": "data"}, headers=headers)
        elif method == "PUT":
            response = test_client.put(
                endpoint, json={"test": "data"}, headers=headers)
        elif method == "DELETE":
            response = test_client.delete(endpoint, headers=headers)
    
>       assert response.status_code == expected_status
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:332: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,487 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=PUT, path=/api/v1/admin/feature-flags
2025-07-10 03:05:53,488 - httpx - INFO - HTTP Request: PUT http://testserver/api/v1/admin/feature-flags "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=PUT, path=/api/v1/admin/feature-flags
INFO     httpx:_client.py:1027 HTTP Request: PUT http://testserver/api/v1/admin/feature-flags "HTTP/1.1 403 Forbidden"
_ TestPermissionMatrix.test_permission_matrix[SUPPORT_ADMIN-/api/v1/admin/tenants/123-GET-200] _

self = <test_access_control.TestPermissionMatrix object at 0x145e10990>
mock_get_admin = <AsyncMock name='get_current_admin_user' id='5486584080'>
test_client = <starlette.testclient.TestClient object at 0x147068410>
role = 'SUPPORT_ADMIN', endpoint = '/api/v1/admin/tenants/123', method = 'GET'
expected_status = 200

    @pytest.mark.asyncio
    @pytest.mark.parametrize("role,endpoint,method,expected_status", PERMISSION_TEST_CASES)
    @patch("app.core.security.dependencies.get_current_admin_user")
    async def test_permission_matrix(self, mock_get_admin, test_client, role, endpoint, method, expected_status):
        """Test various role and endpoint combinations against expected access levels."""
        # Create mock admin with the specified role
        admin = AdminUser(
            id="test-id",
            email=f"{role.lower()}@example.com",
            is_active=True
        )
        admin.mock_role = role
        mock_get_admin.return_value = admin
        headers = create_token_headers(admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Make request based on method
        if method == "GET":
            response = test_client.get(endpoint, headers=headers)
        elif method == "POST":
            response = test_client.post(
                endpoint, json={"test": "data"}, headers=headers)
        elif method == "PUT":
            response = test_client.put(
                endpoint, json={"test": "data"}, headers=headers)
        elif method == "DELETE":
            response = test_client.delete(endpoint, headers=headers)
    
>       assert response.status_code == expected_status
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:332: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,533 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/api/v1/admin/tenants/123
2025-07-10 03:05:53,533 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/admin/tenants/123 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/api/v1/admin/tenants/123
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/admin/tenants/123 "HTTP/1.1 403 Forbidden"
_ TestPermissionMatrix.test_permission_matrix[SECURITY_ADMIN-/api/v1/admin/audit-logs-GET-200] _

self = <test_access_control.TestPermissionMatrix object at 0x145e12d50>
mock_get_admin = <AsyncMock name='get_current_admin_user' id='5481549904'>
test_client = <starlette.testclient.TestClient object at 0x146c0d590>
role = 'SECURITY_ADMIN', endpoint = '/api/v1/admin/audit-logs', method = 'GET'
expected_status = 200

    @pytest.mark.asyncio
    @pytest.mark.parametrize("role,endpoint,method,expected_status", PERMISSION_TEST_CASES)
    @patch("app.core.security.dependencies.get_current_admin_user")
    async def test_permission_matrix(self, mock_get_admin, test_client, role, endpoint, method, expected_status):
        """Test various role and endpoint combinations against expected access levels."""
        # Create mock admin with the specified role
        admin = AdminUser(
            id="test-id",
            email=f"{role.lower()}@example.com",
            is_active=True
        )
        admin.mock_role = role
        mock_get_admin.return_value = admin
        headers = create_token_headers(admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Make request based on method
        if method == "GET":
            response = test_client.get(endpoint, headers=headers)
        elif method == "POST":
            response = test_client.post(
                endpoint, json={"test": "data"}, headers=headers)
        elif method == "PUT":
            response = test_client.put(
                endpoint, json={"test": "data"}, headers=headers)
        elif method == "DELETE":
            response = test_client.delete(endpoint, headers=headers)
    
>       assert response.status_code == expected_status
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:332: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,577 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/api/v1/admin/audit-logs
2025-07-10 03:05:53,578 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/admin/audit-logs "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/api/v1/admin/audit-logs
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/admin/audit-logs "HTTP/1.1 403 Forbidden"
_ TestPermissionMatrix.test_permission_matrix[READ_ONLY_ADMIN-/api/v1/admin/tenants-GET-200] _

self = <test_access_control.TestPermissionMatrix object at 0x145e13350>
mock_get_admin = <AsyncMock name='get_current_admin_user' id='5482227344'>
test_client = <starlette.testclient.TestClient object at 0x146be4910>
role = 'READ_ONLY_ADMIN', endpoint = '/api/v1/admin/tenants', method = 'GET'
expected_status = 200

    @pytest.mark.asyncio
    @pytest.mark.parametrize("role,endpoint,method,expected_status", PERMISSION_TEST_CASES)
    @patch("app.core.security.dependencies.get_current_admin_user")
    async def test_permission_matrix(self, mock_get_admin, test_client, role, endpoint, method, expected_status):
        """Test various role and endpoint combinations against expected access levels."""
        # Create mock admin with the specified role
        admin = AdminUser(
            id="test-id",
            email=f"{role.lower()}@example.com",
            is_active=True
        )
        admin.mock_role = role
        mock_get_admin.return_value = admin
        headers = create_token_headers(admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Make request based on method
        if method == "GET":
            response = test_client.get(endpoint, headers=headers)
        elif method == "POST":
            response = test_client.post(
                endpoint, json={"test": "data"}, headers=headers)
        elif method == "PUT":
            response = test_client.put(
                endpoint, json={"test": "data"}, headers=headers)
        elif method == "DELETE":
            response = test_client.delete(endpoint, headers=headers)
    
>       assert response.status_code == expected_status
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:332: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,620 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/api/v1/admin/tenants
2025-07-10 03:05:53,621 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/admin/tenants "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/api/v1/admin/tenants
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/admin/tenants "HTTP/1.1 403 Forbidden"
__________ TestContextAwarePermissions.test_admin_context_permissions __________

self = <test_access_control.TestContextAwarePermissions object at 0x145e1e690>
mock_context = <AsyncMock name='get_current_context' id='5481664592'>
mock_get_admin = <AsyncMock name='get_current_admin_user' id='5481644688'>
test_client = <starlette.testclient.TestClient object at 0x146bba250>
mock_super_admin = <AdminUser id=00001 email=superadmin@example.com org=None>

    @patch("app.core.security.dependencies.get_current_admin_user")
    @patch("app.core.integration.context_switcher.get_current_context")
    def test_admin_context_permissions(self, mock_context, mock_get_admin, test_client, mock_super_admin):
        """Test permissions when in admin context."""
        mock_get_admin.return_value = mock_super_admin
        mock_context.return_value = {
            "type": "admin", "admin_id": mock_super_admin.id}
        headers = create_token_headers(mock_super_admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Should have full admin access in admin context
        response = test_client.get("/admin/system-info", headers=headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:363: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,666 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/system-info
2025-07-10 03:05:53,667 - httpx - INFO - HTTP Request: GET http://testserver/admin/system-info "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/system-info
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/admin/system-info "HTTP/1.1 403 Forbidden"
______ TestContextAwarePermissions.test_impersonation_context_permissions ______

self = <test_access_control.TestContextAwarePermissions object at 0x145e12e50>
mock_context = <AsyncMock name='get_current_context' id='5483360144'>
mock_get_admin = <AsyncMock name='get_current_admin_user' id='5475892112'>
test_client = <starlette.testclient.TestClient object at 0x146d56590>
mock_super_admin = <AdminUser id=00001 email=superadmin@example.com org=None>

    @patch("app.core.security.dependencies.get_current_admin_user")
    @patch("app.core.integration.context_switcher.get_current_context")
    def test_impersonation_context_permissions(self, mock_context, mock_get_admin, test_client, mock_super_admin):
        """Test permissions when in impersonation context."""
        mock_get_admin.return_value = mock_super_admin
        mock_context.return_value = {
            "type": "impersonation",
            "admin_id": mock_super_admin.id,
            "tenant_id": "test-tenant",
            "user_id": "user-123"
        }
        headers = create_token_headers(mock_super_admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Should NOT have admin access while impersonating
        response = test_client.get("/admin/system-info", headers=headers)
        assert response.status_code == 403
    
        # Should have tenant user access
        response = test_client.get(
            "/api/tenants/test-tenant/dashboard", headers=headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:387: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,689 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/system-info
2025-07-10 03:05:53,690 - httpx - INFO - HTTP Request: GET http://testserver/admin/system-info "HTTP/1.1 403 Forbidden"
2025-07-10 03:05:53,706 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/api/tenants/test-tenant/dashboard
2025-07-10 03:05:53,706 - httpx - INFO - HTTP Request: GET http://testserver/api/tenants/test-tenant/dashboard "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/system-info
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/admin/system-info "HTTP/1.1 403 Forbidden"
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/api/tenants/test-tenant/dashboard
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/tenants/test-tenant/dashboard "HTTP/1.1 403 Forbidden"
____________ TestCustomRolePermissions.test_custom_role_permissions ____________

self = <test_access_control.TestCustomRolePermissions object at 0x145e1ed90>
mock_get_admin = <AsyncMock name='get_current_admin_user' id='5481971088'>
test_client = <starlette.testclient.TestClient object at 0x146c01f50>

    @patch("app.core.security.dependencies.get_current_admin_user")
    def test_custom_role_permissions(self, mock_get_admin, test_client):
        """Test a custom role with specific permission sets."""
        # Create custom role admin user
        custom_admin = AdminUser(
            id="custom-001",
            email="custom@example.com",
            is_active=True
        )
        custom_admin.mock_role = CUSTOM
        custom_admin.custom_permissions = [
            "tenant_read", "user_read", "audit_log_read"]
        mock_get_admin.return_value = custom_admin
        headers = create_token_headers(custom_admin)
        headers["Origin"] = "http://localhost:3000"
        headers["Host"] = "localhost:3000"
    
        # Should have read access to tenants
        response = test_client.get("/admin/tenants", headers=headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

app/tests/integration/admin/test_access_control.py:421: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:53,727 - app - INFO - CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/tenants
2025-07-10 03:05:53,728 - httpx - INFO - HTTP Request: GET http://testserver/admin/tenants "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=localhost:3000, origin=http://localhost:3000, method=GET, path=/admin/tenants
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/admin/tenants "HTTP/1.1 403 Forbidden"
____________________ TestPermissionsRefactor.test_validator ____________________

self = <test_permissions_refactor.TestPermissionsRefactor object at 0x145c2c290>

    def test_validator(self):
        """Test the validator service"""
        # Test theme settings validation
        theme_settings = {
            "colors": {
                "primary": "#FF5733",
                "secondary": "#33FF57",
                "background": "#5733FF",
                "text": "#000000"
            },
            "typography": {
                "headingFont": "Arial",
                "bodyFont": "Helvetica",
                "baseFontSize": "16px",
                "lineHeight": 1.5
            },
            "spacing": {
                "baseSpacing": "8px",
                "contentPadding": "16px"
            },
            "buttons": {
                "borderRadius": "4px",
                "primaryColor": "#FF5733"
            }
        }
    
        # Test orchestrator method delegates to validator
>       is_valid, error = StorefrontPermissionsService.validate_theme_settings(theme_settings)
E       TypeError: StorefrontPermissionsService.validate_theme_settings() missing 1 required positional argument: 'theme_settings'

app/tests/test_permissions_refactor.py:137: TypeError
_________________ TestPermissionsRefactor.test_html_sanitizer __________________

self = <test_permissions_refactor.TestPermissionsRefactor object at 0x145c2ca50>

    def test_html_sanitizer(self):
        """Test the HTML sanitizer service"""
        # Test HTML sanitization
        html_content = """
        <div class="content">
            <h1>Safe Content</h1>
            <p>This is safe content</p>
            <script>alert('This should be removed');</script>
            <a href="javascript:alert('This should be removed')">Bad link</a>
            <a href="https://example.com">Good link</a>
        </div>
        """
    
        # Test orchestrator method delegates to sanitizer
>       sanitized = StorefrontPermissionsService.sanitize_html_content(html_content)
E       TypeError: StorefrontPermissionsService.sanitize_html_content() missing 1 required positional argument: 'content'

app/tests/test_permissions_refactor.py:155: TypeError
_____ TestShareService.test_generate_whatsapp_share_link_product_not_found _____

self = <test_share_service.TestShareService testMethod=test_generate_whatsapp_share_link_product_not_found>

    def test_generate_whatsapp_share_link_product_not_found(self):
        # Setup - product not found
        self.db.query.return_value.filter.return_value.first.side_effect = [None]
    
        # Execute & Assert
        with self.assertRaises(ValueError) as context:
>           self.share_service.generate_whatsapp_share_link(
                db=self.db,
                product_id="nonexistent",
                tenant_id="tenant123",
                user_id="user123",
            )

app/tests/test_share_service.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
app/services/share_service.py:122: in generate_whatsapp_share_link
    product, tenant = self._get_product_and_verify_tenant(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def _get_product_and_verify_tenant(
        self, db: Session, product_id: str, tenant_id: str
    ) -> tuple[Product, Tenant]:
        """
        Helper method to get product and verify tenant.
        Raises ValueError if product not found or tenant not verified.
        """
        product = db.query(Product).filter(Product.id == product_id).first()
        if not product:
>           raise ShareServiceError("Product not found")
E           app.services.share_service.ShareServiceError: Product not found

app/services/share_service.py:37: ShareServiceError
_____ TestShareService.test_generate_whatsapp_share_link_unverified_tenant _____

self = <test_share_service.TestShareService testMethod=test_generate_whatsapp_share_link_unverified_tenant>

    def test_generate_whatsapp_share_link_unverified_tenant(self):
        # Setup - make tenant unverified
        self.tenant.is_verified = False
    
        # Execute & Assert
        with self.assertRaises(ValueError) as context:
>           self.share_service.generate_whatsapp_share_link(
                db=self.db,
                product_id="prod123",
                tenant_id="tenant123",
                user_id="user123",
            )

app/tests/test_share_service.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
app/services/share_service.py:122: in generate_whatsapp_share_link
    product, tenant = self._get_product_and_verify_tenant(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def _get_product_and_verify_tenant(
        self, db: Session, product_id: str, tenant_id: str
    ) -> tuple[Product, Tenant]:
        """
        Helper method to get product and verify tenant.
        Raises ValueError if product not found or tenant not verified.
        """
        product = db.query(Product).filter(Product.id == product_id).first()
        if not product:
            raise ShareServiceError("Product not found")
    
        tenant = db.query(Tenant).filter(Tenant.id == tenant_id).first()
        if not tenant:
            raise ShareServiceError("Tenant not found")
    
        if not tenant.is_verified:
>           raise ShareServiceError(
                "Tenant is not verified for sharing features")
E           app.services.share_service.ShareServiceError: Tenant is not verified for sharing features

app/services/share_service.py:44: ShareServiceError
____________________________ test_tenant_isolation _____________________________

async_client = <async_generator object async_client at 0x146d85380>
async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x146df6150>
test_address_data = {'city': 'Testville', 'country': 'Kenya', 'postal_code': '12345', 'state': 'Test State', ...}
test_tenant = <app.models.tenant.Tenant object at 0x146a9c1d0>

    @pytest.mark.asyncio
    async def test_tenant_isolation(async_client, async_db_session, test_address_data, test_tenant):
        # Buyer from tenant1
        customer1 = Customer(id=uuid.uuid4(), email="buyer1@example.com")
        async_db_session.add(customer1)
    
        # Second tenant and buyer
        tenant2 = Tenant(id=uuid.uuid4(), name="Tenant 2", subdomain="tenant2")
        async_db_session.add(tenant2)
>       await async_db_session.commit()

tests/api/test_address_book.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/ext/asyncio/session.py:1011: in commit
    await greenlet_spawn(self.sync_session.commit)
../venv/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:200: in greenlet_spawn
    result = context.throw(*sys.exc_info())
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1044: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2347: in _handle_dbapi_exception
    raise exc_info[1].with_traceback(exc_info[2])
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: in do_execute
    cursor.execute(statement, parameters)
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:580: in execute
    self._adapt_connection.await_(
../venv/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:130: in await_only
    return current.driver.switch(awaitable)  # type: ignore[no-any-return]
../venv/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:195: in greenlet_spawn
    value = await result
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:516: in _prepare_and_execute
    await adapt_connection._start_transaction()
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:850: in _start_transaction
    self._handle_exception(error)
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:799: in _handle_exception
    raise error
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:848: in _start_transaction
    await self._transaction.start()
../venv/lib/python3.11/site-packages/asyncpg/transaction.py:146: in start
    await self._connection.execute(query)
../venv/lib/python3.11/site-packages/asyncpg/connection.py:349: in execute
    result = await self._protocol.query(query, timeout)
asyncpg/protocol/protocol.pyx:366: in query
    ???
asyncpg/protocol/protocol.pyx:779: in asyncpg.protocol.protocol.BaseProtocol._new_waiter
    ???
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py:728: in call_later
    timer = self.call_at(self.time() + delay, callback, *args,
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py:741: in call_at
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py:520: RuntimeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:53,813 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:53,813 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:53,814 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 78914fbc
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 78914fbc
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:54,090 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________________________ test_list_buyer_orders ____________________________

client = <starlette.testclient.TestClient object at 0x146c38c10>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyZjQ2ZTE0NS04Y2YxLTQ0YmQtOTliMi02ZDE0YjA4N2F...cGUiOiJhY2Nlc3MifQ.85IKs302fwiA55NTpsJd57FCeIQAFMPIyJJbZfcjB_Y', 'X-Tenant-ID': 'cd93ff6e-c26e-4323-89e9-a30a8cb89f01'}

    @pytest.mark.asyncio
    async def test_list_buyer_orders(client: AsyncClient, auth_headers):
        sample_orders = [{"id": "1"}, {"id": "2"}]
        async_mock = AsyncMock(return_value=(sample_orders, 2))
        with patch("app.services.order_service.OrderService.get_orders_for_buyer", async_mock):
>           resp = await client.get("/api/v1/buyer/orders?limit=2&offset=0", headers=auth_headers)
E           TypeError: object Response can't be used in 'await' expression

tests/api/test_buyer_orders.py:13: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,091 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,091 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,091 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,092 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,092 - app.core.monitoring.metrics - INFO - Starting metrics collection
2025-07-10 03:05:54,092 - app.main - INFO - Startup complete
2025-07-10 03:05:54,092 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,094 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant cd93ff6e
2025-07-10 03:05:54,094 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,097 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 2f46e145
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.core.monitoring.metrics:metrics.py:118 Starting metrics collection
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant cd93ff6e
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 2f46e145
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:54,098 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:54,117 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:54,118 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/buyer/orders
2025-07-10 03:05:54,118 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/buyer/orders?limit=2&offset=0 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/buyer/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/buyer/orders?limit=2&offset=0 "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:05:54,120 - app.main - INFO - Shutting down ConversationalCommerce backend...
2025-07-10 03:05:54,120 - app.main - INFO - Shutdown complete
2025-07-10 03:05:54,120 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     app.main:main.py:272 Shutting down ConversationalCommerce backend...
INFO     app.main:main.py:277 Shutdown complete
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
______________________ test_buyer_cross_tenant_forbidden _______________________

client = <starlette.testclient.TestClient object at 0x146b90e10>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmNTlmYjU4Yy03YmZiLTRjYjUtOWYwYS01ODczZDNhNzA...cGUiOiJhY2Nlc3MifQ.AK7FALyxRTP8ExbqLc5-tYWkY-tFJsfcP6aURWVYPms', 'X-Tenant-ID': 'a2fbbdb8-7e81-4a10-9174-604a55b1587d'}

    @pytest.mark.asyncio
    async def test_buyer_cross_tenant_forbidden(client: AsyncClient, auth_headers):
        async_mock = AsyncMock(side_effect=OrderNotFoundError("not found"))
        with patch("app.services.order_service.OrderService.get_orders_for_buyer", async_mock):
>           resp = await client.get("/api/v1/buyer/orders", headers=auth_headers)
E           TypeError: object Response can't be used in 'await' expression

tests/api/test_buyer_orders.py:25: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,121 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,121 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,121 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,121 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,121 - app.main - INFO - Startup complete
2025-07-10 03:05:54,122 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,123 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant a2fbbdb8
2025-07-10 03:05:54,123 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,123 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user f59fb58c
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant a2fbbdb8
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user f59fb58c
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:54,124 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:54,144 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:54,144 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/buyer/orders
2025-07-10 03:05:54,145 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/buyer/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/buyer/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/buyer/orders "HTTP/1.1 403 Forbidden"
_____________________ test_create_order_invalid_product_id _____________________

client = <starlette.testclient.TestClient object at 0x147ae6cd0>
db_session = <sqlalchemy.orm.session.Session object at 0x14786fb10>
test_user = <app.models.user.User object at 0x14786c650>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyNDExNGNjYy1hOGUyLTQxMTYtYTk4Yi1hNmFjN2VjMTl...cGUiOiJhY2Nlc3MifQ.CtrbiYl4ErX-HZUNhjvz974qTm8MGwOuQOr7fFK2lyM', 'X-Tenant-ID': '56c19410-853e-4a26-b3ee-d435693c987a'}
test_tenant = <app.models.tenant.Tenant object at 0x14786c190>

    def test_create_order_invalid_product_id(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test creating an order with invalid product_id"""
        # Non-existent product ID
        order_data = {
            "product_id": str(uuid4()),  # Random UUID that doesn't exist
            "buyer_name": "Test Buyer",
            "buyer_phone": "+1234567890",
            "quantity": 1,
            "total_amount": 99.99,
            "order_source": "website",
            "buyer_email": "test@example.com",
        }
    
        response = client.post(
            "/api/v1/orders", headers=auth_headers, json=order_data)
>       assert response.status_code == 404
E       assert 403 == 404
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_create_order.py:264: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:54,626 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:54,627 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:54,627 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:54,627 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:54,627 - app.main - INFO - Startup complete
2025-07-10 03:05:54,627 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:54,629 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 56c19410
2025-07-10 03:05:54,629 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:54,630 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 24114ccc
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 56c19410
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 24114ccc
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:54,630 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:54,651 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:54,651 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders
2025-07-10 03:05:54,651 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
___________________________ test_admin_cors_headers ____________________________

client = <starlette.testclient.TestClient object at 0x147ca9190>

    @pytest.mark.asyncio
    async def test_admin_cors_headers(client: AsyncClient):
        """Test that admin API routes respond with correct CORS headers."""
        # Arrange
        settings = get_settings()
        admin_domain = "admin.yourplatform.com"
        headers = {
            "Origin": f"https://{admin_domain}",
            "Access-Control-Request-Method": "POST",
            "Access-Control-Request-Headers": "Content-Type,Authorization"
        }
    
        # Act - Preflight request to admin login endpoint
>       response = await client.options(
            "/api/admin/auth/login",
            headers=headers
        )
E       TypeError: object Response can't be used in 'await' expression

tests/api/test_cross_domain_auth.py:28: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:55,227 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:55,228 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:55,228 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:55,228 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:55,228 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:55,239 - app - ERROR - Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('fc7f4294-2f3f-43dd-ae1b-80de65678eb1'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 5, 55, 228986, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/auth/login', None, '{"event_type": "unauthorized_domain_access", "method": "OPTIONS", "path": "/api/admin/auth/login", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-10 03:05:55,239 - httpx - INFO - HTTP Request: OPTIONS http://testserver/api/admin/auth/login "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
ERROR    app:super_admin_security.py:385 Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('fc7f4294-2f3f-43dd-ae1b-80de65678eb1'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 5, 55, 228986, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/auth/login', None, '{"event_type": "unauthorized_domain_access", "method": "OPTIONS", "path": "/api/admin/auth/login", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
INFO     httpx:_client.py:1027 HTTP Request: OPTIONS http://testserver/api/admin/auth/login "HTTP/1.1 403 Forbidden"
_________________________ test_get_stats_empty_tenant __________________________

client = <starlette.testclient.TestClient object at 0x146df4950>
test_tenant = <app.models.tenant.Tenant object at 0x1482edd90>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhYTg0MGYxZS05YWIxLTQ3ZDktODNhYS05ZDI0ZDNiZDE...cGUiOiJhY2Nlc3MifQ.WIYIDYwfEruL0BVjTCSsDEyVaDduAnKnnBRgaEwB2yM', 'X-Tenant-ID': '422bb42a-432b-4675-8da7-659f239b2c42'}

    @pytest.mark.asyncio
    async def test_get_stats_empty_tenant(client: AsyncClient, test_tenant, auth_headers):
        """Test that a new tenant with no data gets zero stats."""
        # We use the test_tenant fixture and auth_headers fixture from conftest.py
    
        # Call the stats endpoint
>       response = await client.get("/api/v1/dashboard/stats", headers=auth_headers)
E       TypeError: object Response can't be used in 'await' expression

tests/api/test_dashboard_stats.py:17: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:56,244 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:56,245 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:56,245 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:56,245 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:56,245 - app.main - INFO - Startup complete
2025-07-10 03:05:56,245 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:56,247 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 422bb42a
2025-07-10 03:05:56,247 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:56,247 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user aa840f1e
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 422bb42a
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user aa840f1e
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:56,248 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:56,268 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:56,268 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/dashboard/stats
2025-07-10 03:05:56,269 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/dashboard/stats "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/dashboard/stats
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/dashboard/stats "HTTP/1.1 403 Forbidden"
___________________________ test_get_stats_with_data ___________________________

client = <starlette.testclient.TestClient object at 0x1474e20d0>
async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1474e1d90>
test_tenant = <app.models.tenant.Tenant object at 0x1476a1390>
test_user = <app.models.user.User object at 0x147c82450>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhODE3ODg0NC0wNDhjLTQ0ZDAtOWJkZS05MTBmZGYxZDk...cGUiOiJhY2Nlc3MifQ.vWluQfKKYcKgh6_V7nuVHEVuvr59tEdasR_Wuzi3EQE', 'X-Tenant-ID': 'fff5775a-3a41-4799-9d58-9a725371ae48'}

    @pytest.mark.asyncio
    async def test_get_stats_with_data(client: AsyncClient, async_db_session: AsyncSession, test_tenant, test_user, auth_headers):
        """Test that a tenant with data gets correct stats."""
        # We use fixtures for tenant and user
        tenant_id = str(test_tenant.id)
    
        # Create a second test user for this tenant
        from app.models.user import User
>       user2 = User(
            id=uuid4(),
            email="test2@example.com",
            tenant_id=tenant_id,
            is_active=True
        )

tests/api/test_dashboard_stats.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <app.models.user.User object at 0x147adc210>
kwargs = {'email': 'test2@example.com', 'id': UUID('e62a9dad-962a-43be-be83-c7c637df4fa5'), 'is_active': True, 'tenant_id': 'fff5775a-3a41-4799-9d58-9a725371ae48'}
cls_ = <class 'app.models.user.User'>, k = 'is_active'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
>               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'is_active' is an invalid keyword argument for User

../venv/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:56,466 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:56,467 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:56,467 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:56,467 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:56,467 - app.main - INFO - Startup complete
2025-07-10 03:05:56,467 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:56,469 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant fff5775a
2025-07-10 03:05:56,469 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:56,469 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user a8178844
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant fff5775a
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user a8178844
_________________________ test_stats_tenant_isolation __________________________

self = <AdaptedConnection <asyncpg.connection.Connection object at 0x1471255d0>>

    async def _start_transaction(self):
        if self.isolation_level == "autocommit":
            return
    
        try:
            self._transaction = self._connection.transaction(
                isolation=self.isolation_level,
                readonly=self.readonly,
                deferrable=self.deferrable,
            )
>           await self._transaction.start()

../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:848: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/asyncpg/transaction.py:146: in start
    await self._connection.execute(query)
../venv/lib/python3.11/site-packages/asyncpg/connection.py:349: in execute
    result = await self._protocol.query(query, timeout)
asyncpg/protocol/protocol.pyx:360: in query
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   asyncpg.exceptions._base.InterfaceError: cannot perform operation: another operation is in progress

asyncpg/protocol/protocol.pyx:745: InterfaceError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.engine.base.Connection object at 0x148059350>
dialect = <sqlalchemy.dialects.postgresql.asyncpg.PGDialect_asyncpg object at 0x145972bd0>
context = <sqlalchemy.dialects.postgresql.asyncpg.PGExecutionContext_asyncpg object at 0x1469e8790>
statement = <sqlalchemy.dialects.postgresql.asyncpg.PGCompiler_asyncpg object at 0x1469e9fd0>
parameters = [(UUID('45decd98-8497-4e88-8638-0a1e8aa4322b'), 'Test Tenant 2', 'test-3b750130-a12e-4f0f-8179-baab0290a621', None, False, False, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: in do_execute
    cursor.execute(statement, parameters)
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:580: in execute
    self._adapt_connection.await_(
../venv/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:130: in await_only
    return current.driver.switch(awaitable)  # type: ignore[no-any-return]
../venv/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:195: in greenlet_spawn
    value = await result
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:516: in _prepare_and_execute
    await adapt_connection._start_transaction()
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:850: in _start_transaction
    self._handle_exception(error)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AdaptedConnection <asyncpg.connection.Connection object at 0x1471255d0>>
error = InterfaceError('cannot perform operation: another operation is in progress')

    def _handle_exception(self, error):
        if self._connection.is_closed():
            self._transaction = None
            self._started = False
    
        if not isinstance(error, AsyncAdapt_asyncpg_dbapi.Error):
            exception_mapping = self.dbapi._asyncpg_error_translate
    
            for super_ in type(error).__mro__:
                if super_ in exception_mapping:
                    translated_error = exception_mapping[super_](
                        "%s: %s" % (type(error), error)
                    )
                    translated_error.pgcode = (
                        translated_error.sqlstate
                    ) = getattr(error, "sqlstate", None)
>                   raise translated_error from error
E                   sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.InterfaceError: <class 'asyncpg.exceptions._base.InterfaceError'>: cannot perform operation: another operation is in progress

../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:797: InterfaceError

The above exception was the direct cause of the following exception:

client = <starlette.testclient.TestClient object at 0x1480591d0>
async_db_session = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x148058a10>
test_tenant = <app.models.tenant.Tenant object at 0x14772ae10>
test_user = <app.models.user.User object at 0x14772b990>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlY2RiZDE3Ny1hMzA0LTRkMjAtYWZiNC05ODVlMDAwN2E...cGUiOiJhY2Nlc3MifQ.EhKnMdV9pnFgFv4jiDKguMB9KORvFVMBB4cFqBgfui8', 'X-Tenant-ID': 'c57784fd-cf4c-46c3-b891-c4ca1dc16e31'}

    @pytest.mark.asyncio
    async def test_stats_tenant_isolation(client: AsyncClient, async_db_session: AsyncSession, test_tenant, test_user, auth_headers):
        """Test that tenants only see their own stats."""
        # Use the test_tenant fixture as tenant1
        tenant1 = test_tenant
        tenant1_id = str(tenant1.id)
    
        # Create a second test tenant
        from app.models.tenant import Tenant
        from uuid import uuid4
        tenant2 = Tenant(
            id=uuid4(),
            name="Test Tenant 2",
            subdomain=f"test-{uuid4()}",
            is_active=True
        )
        async_db_session.add(tenant2)
>       await async_db_session.commit()

tests/api/test_dashboard_stats.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/ext/asyncio/session.py:1011: in commit
    await greenlet_spawn(self.sync_session.commit)
../venv/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:200: in greenlet_spawn
    result = context.throw(*sys.exc_info())
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1227: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: in do_execute
    cursor.execute(statement, parameters)
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:580: in execute
    self._adapt_connection.await_(
../venv/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:130: in await_only
    return current.driver.switch(awaitable)  # type: ignore[no-any-return]
../venv/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:195: in greenlet_spawn
    value = await result
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:516: in _prepare_and_execute
    await adapt_connection._start_transaction()
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:850: in _start_transaction
    self._handle_exception(error)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AdaptedConnection <asyncpg.connection.Connection object at 0x1471255d0>>
error = InterfaceError('cannot perform operation: another operation is in progress')

    def _handle_exception(self, error):
        if self._connection.is_closed():
            self._transaction = None
            self._started = False
    
        if not isinstance(error, AsyncAdapt_asyncpg_dbapi.Error):
            exception_mapping = self.dbapi._asyncpg_error_translate
    
            for super_ in type(error).__mro__:
                if super_ in exception_mapping:
                    translated_error = exception_mapping[super_](
                        "%s: %s" % (type(error), error)
                    )
                    translated_error.pgcode = (
                        translated_error.sqlstate
                    ) = getattr(error, "sqlstate", None)
>                   raise translated_error from error
E                   sqlalchemy.exc.InterfaceError: (sqlalchemy.dialects.postgresql.asyncpg.InterfaceError) <class 'asyncpg.exceptions._base.InterfaceError'>: cannot perform operation: another operation is in progress
E                   [SQL: INSERT INTO tenants (id, name, subdomain, custom_domain, domain_verified, is_verified, domain_verification_token, country_code, kyc_status, kyc_updated_at, phone_number, whatsapp_number, is_active, storefront_enabled, updated_at, email) VALUES ($1::UUID, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::BOOLEAN, $6::BOOLEAN, $7::VARCHAR, $8::VARCHAR, $9::kycstatus, $10::TIMESTAMP WITH TIME ZONE, $11::VARCHAR, $12::VARCHAR, $13::BOOLEAN, $14::BOOLEAN, $15::TIMESTAMP WITH TIME ZONE, $16::VARCHAR) RETURNING tenants.created_at]
E                   [parameters: (UUID('45decd98-8497-4e88-8638-0a1e8aa4322b'), 'Test Tenant 2', 'test-3b750130-a12e-4f0f-8179-baab0290a621', None, False, False, None, None, 'NOT_STARTED', None, None, None, True, True, None, None)]
E                   (Background on this error at: https://sqlalche.me/e/20/rvf5)

../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:797: InterfaceError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:56,586 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:56,587 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:56,587 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:56,587 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:56,587 - app.main - INFO - Startup complete
2025-07-10 03:05:56,587 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:56,588 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant c57784fd
2025-07-10 03:05:56,588 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:56,589 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user ecdbd177
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant c57784fd
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user ecdbd177
________________________ test_error_format_consistency _________________________

client = <starlette.testclient.TestClient object at 0x1476da390>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzOWVlYmY1My1jODI0LTRkN2YtYmRiZS1lYTU1NmUyNjY...cGUiOiJhY2Nlc3MifQ.ccMn5wpmkqPbZdmY5jPWMp3kY9RwdJRxuq88vCdLSMk', 'X-Tenant-ID': 'fd7381ef-8cf0-422b-a1e7-ac9563505a23'}
error_test_product = <app.models.product.Product object at 0x1479edf50>

    def test_error_format_consistency(client, auth_headers, error_test_product):
        """Test that all endpoint errors follow a consistent format"""
        # Create a basic set of test cases for different error types
        error_test_cases = [
            {
                "endpoint": "/api/v1/orders/not-a-uuid",
                "method": "get",
                "expected_status": 422,  # Validation error
                "data": None,
            },
            {
                "endpoint": f"/api/v1/orders/{uuid4()}",
                "method": "get",
                "expected_status": 404,  # Not found error
                "data": None,
            },
            {
                "endpoint": "/api/v1/orders",
                "method": "post",
                "expected_status": 422,  # Validation error - missing required fields
                "data": {"product_id": str(error_test_product.id)},
            },
            {
                "endpoint": f"/api/v1/orders/{uuid4()}",
                "method": "put",
                "expected_status": 404,  # Not found error
                "data": {"status": "confirmed"},
            },
            {
                "endpoint": "/api/v1/orders/whatsapp/invalid-phone",
                "method": "get",
                "expected_status": 422,  # Validation error - invalid phone format
                "data": None,
            },
        ]
    
        for test_case in error_test_cases:
            if test_case["method"] == "get":
                response = client.get(test_case["endpoint"], headers=auth_headers)
            elif test_case["method"] == "post":
                response = client.post(
                    test_case["endpoint"], headers=auth_headers, json=test_case["data"]
                )
            elif test_case["method"] == "put":
                response = client.put(
                    test_case["endpoint"], headers=auth_headers, json=test_case["data"]
                )
            elif test_case["method"] == "delete":
                response = client.delete(test_case["endpoint"], headers=auth_headers)
    
            # Check status code
>           assert (
                response.status_code == test_case["expected_status"]
            ), f"Expected status {test_case['expected_status']} for {test_case['method']} {test_case['endpoint']}, got {response.status_code}"
E           AssertionError: Expected status 422 for get /api/v1/orders/not-a-uuid, got 403
E           assert 403 == 422
E            +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_order_error_handling.py:83: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,713 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,714 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,714 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,714 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,714 - app.main - INFO - Startup complete
2025-07-10 03:05:57,715 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:57,716 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant fd7381ef
2025-07-10 03:05:57,716 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:57,717 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 39eebf53
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant fd7381ef
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 39eebf53
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:57,723 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:57,743 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:57,743 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/not-a-uuid
2025-07-10 03:05:57,743 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders/not-a-uuid "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/not-a-uuid
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders/not-a-uuid "HTTP/1.1 403 Forbidden"
____________________ test_authentication_error_consistency _____________________

client = <starlette.testclient.TestClient object at 0x148172510>

    def test_authentication_error_consistency(client):
        """Test that authentication errors are consistent across endpoints"""
        # List of endpoints to test without authentication
        auth_endpoints = [
            {"url": "/api/v1/orders", "method": "get"},
            {
                "url": "/api/v1/orders",
                "method": "post",
                "data": {"product_id": str(uuid4())},
            },
            {"url": f"/api/v1/orders/{uuid4()}", "method": "get"},
            {
                "url": f"/api/v1/orders/{uuid4()}",
                "method": "put",
                "data": {"status": "confirmed"},
            },
            {"url": f"/api/v1/orders/{uuid4()}", "method": "delete"},
            {
                "url": "/api/v1/orders/whatsapp",
                "method": "post",
                "data": {"product_id": str(uuid4())},
            },
            {"url": "/api/v1/orders/whatsapp/+1234567890", "method": "get"},
        ]
    
        for endpoint in auth_endpoints:
            if endpoint["method"] == "get":
                response = client.get(endpoint["url"])
            elif endpoint["method"] == "post":
                response = client.post(endpoint["url"], json=endpoint.get("data", {}))
            elif endpoint["method"] == "put":
                response = client.put(endpoint["url"], json=endpoint.get("data", {}))
            elif endpoint["method"] == "delete":
                response = client.delete(endpoint["url"])
    
            # Check that the status code is either 401 (Unauthorized) or 403 (Forbidden)
            assert response.status_code in (
                401,
                403,
            ), f"Expected 401 or 403 for unauthenticated {endpoint['method']} {endpoint['url']}, got {response.status_code}"
    
            # Check error response format
>           error_data = response.json()

tests/api/test_order_error_handling.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/httpx/_models.py:762: in json
    return jsonlib.loads(self.content, **kwargs)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x100b60c90>
s = 'Invalid tenant ID: 00000000-0000-0000-0000-000000000010', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/decoder.py:355: JSONDecodeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:57,936 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:57,937 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:57,937 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:57,938 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:57,938 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:57,938 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:57,957 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:57,957 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:05:57,957 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
___________________________ test_optimistic_locking ____________________________

self = <sqlalchemy.engine.base.Connection object at 0x1469d9bd0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x1470b9fd0>
statement = <sqlalchemy.dialects.postgresql.base.PGCompiler object at 0x14710cdd0>
parameters = [{'buyer_address': None, 'buyer_email': 'concurrency@example.com', 'buyer_name': 'Concurrency Test', 'buyer_phone': '+1234567890', ...}]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x1469ad990; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': 'concurrency@example.com', 'buyer_name': 'Concurrency Test', 'buyer_phone': '+1234567890', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x1470b9fd0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (d80c4d75-f4e3-4117-a0c4-662a859ba131, f1a1ec18-cc9f-4de3-ad9c-190160ac630e, e9e38b4d-8698-4610-8b0f-8562f04b6bca, Concurrency Test, +1234567890, concurrency@example.com, null, 1, 99.99, website, pending, null, 1, f, null, f, 2025-07-10 03:05:58.060599-06, null, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

client = <starlette.testclient.TestClient object at 0x147c50190>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlOWUzOGI0ZC04Njk4LTQ2MTAtOGIwZi04NTYyZjA0YjZ...cGUiOiJhY2Nlc3MifQ.8tT1AaPy2WYlIqfsY5zFRTJlimk8ZZd5Dh_sdGuIrTI', 'X-Tenant-ID': '75da62e7-0c15-4b89-8cd6-7a3269b176f8'}
db_session = <sqlalchemy.orm.session.Session object at 0x1469dbbd0>
test_user = <app.models.user.User object at 0x1469da750>
error_test_product = <app.models.product.Product object at 0x1469dae90>

    def test_optimistic_locking(
        client, auth_headers, db_session, test_user, error_test_product
    ):
        """Test optimistic locking during concurrent updates"""
        # Create an order
        order = Order(
            product_id=error_test_product.id,
            seller_id=test_user.id,
            buyer_name="Concurrency Test",
            buyer_phone="+1234567890",
            buyer_email="concurrency@example.com",
            quantity=1,
            total_amount=Decimal("99.99"),
            status=OrderStatus.pending,
            order_source=OrderSource.website,
            version=1,  # Initial version
        )
        db_session.add(order)
>       db_session.commit()

tests/api/test_order_error_handling.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1227: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x1469ad990; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': 'concurrency@example.com', 'buyer_name': 'Concurrency Test', 'buyer_phone': '+1234567890', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x1470b9fd0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (d80c4d75-f4e3-4117-a0c4-662a859ba131, f1a1ec18-cc9f-4de3-ad9c-190160ac630e, e9e38b4d-8698-4610-8b0f-8562f04b6bca, Concurrency Test, +1234567890, concurrency@example.com, null, 1, 99.99, website, pending, null, 1, f, null, f, 2025-07-10 03:05:58.060599-06, null, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_address, quantity, total_amount, order_source, status, notes, version, notification_sent, last_notification_at, is_deleted, updated_at, cancelled_at, returned_at, cancellation_reason, return_reason) VALUES (%(id)s::UUID, %(product_id)s::UUID, %(seller_id)s::UUID, %(tenant_id)s::UUID, %(customer_id)s::UUID, %(buyer_name)s, %(buyer_phone)s, %(buyer_email)s, %(buyer_address)s, %(quantity)s, %(total_amount)s, %(order_source)s, %(status)s, %(notes)s, %(version)s, %(notification_sent)s, %(last_notification_at)s, %(is_deleted)s, %(updated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at]
E       [parameters: {'id': UUID('d80c4d75-f4e3-4117-a0c4-662a859ba131'), 'product_id': UUID('f1a1ec18-cc9f-4de3-ad9c-190160ac630e'), 'seller_id': UUID('e9e38b4d-8698-4610-8b0f-8562f04b6bca'), 'tenant_id': None, 'customer_id': None, 'buyer_name': 'Concurrency Test', 'buyer_phone': '+1234567890', 'buyer_email': 'concurrency@example.com', 'buyer_address': None, 'quantity': 1, 'total_amount': Decimal('99.99'), 'order_source': 'website', 'status': 'pending', 'notes': None, 'version': 1, 'notification_sent': False, 'last_notification_at': None, 'is_deleted': False, 'updated_at': None, 'cancelled_at': None, 'returned_at': None, 'cancellation_reason': None, 'return_reason': None}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:58,058 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:58,059 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:58,059 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:58,059 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:58,059 - app.main - INFO - Startup complete
2025-07-10 03:05:58,060 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:58,061 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 75da62e7
2025-07-10 03:05:58,061 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:58,062 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user e9e38b4d
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 75da62e7
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user e9e38b4d
__________________________ test_transaction_rollback ___________________________

client = <starlette.testclient.TestClient object at 0x148148290>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkYTAwMzY1ZS03NmYxLTRjNjAtODUxMC05ZTRiNWU4MWZ...cGUiOiJhY2Nlc3MifQ._U0Rnww5vPojSMbElzttGyiRXdDQqeLkBf86ap3-x6M', 'X-Tenant-ID': 'f9beca4b-2a57-439d-bf39-611174176e31'}
db_session = <sqlalchemy.orm.session.Session object at 0x14816aa50>
test_user = <app.models.user.User object at 0x14816a510>

    def test_transaction_rollback(client, auth_headers, db_session, test_user):
        """Test that database transactions are properly rolled back on error"""
        # Create a product
        product = Product(
            name="Rollback Test Product",
            description="Testing transaction rollback",
            price=Decimal("50.00"),
            seller_id=test_user.id,
        )
        db_session.add(product)
        db_session.commit()
        db_session.refresh(product)
    
        # Create a valid order that will later trigger a database error
        order_data = {
            "product_id": str(product.id),
            "buyer_name": "Rollback Test",
            "buyer_phone": "+1234567890",
            "buyer_email": "rollback@example.com",
            "quantity": 1,
            "total_amount": 50.00,
            "order_source": "website",
        }
    
        # To simulate a database error during a complex operation, we need to modify
        # the database state after validation but before commit
        # For testing purposes, we'll delete the product after validation
    
        # First create a successful order to get the ID
        response = client.post("/api/v1/orders", headers=auth_headers, json=order_data)
>       assert response.status_code == 201
E       assert 403 == 201
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_order_error_handling.py:222: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:58,383 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:58,385 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:58,385 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:58,385 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:58,385 - app.main - INFO - Startup complete
2025-07-10 03:05:58,385 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:58,387 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant f9beca4b
2025-07-10 03:05:58,387 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:58,387 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user da00365e
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant f9beca4b
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user da00365e
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:58,389 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:58,409 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:58,409 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders
2025-07-10 03:05:58,410 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
_____________________________ test_get_orders_list _____________________________

client = <starlette.testclient.TestClient object at 0x1481304d0>
db_session = <sqlalchemy.orm.session.Session object at 0x146ab5d50>
test_user = <app.models.user.User object at 0x146a7dc50>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhNWFkYTU5Yi0yNDQ1LTQ1ZWYtYjczOC1kOTQ2OWJkZGY...cGUiOiJhY2Nlc3MifQ.g7CS0HdhUWiqMw13AxjzFwzQqUVxx5mU6gpYhd-vubw', 'X-Tenant-ID': '245f10c4-1cd7-4df0-b483-df57e858f5f7'}
test_tenant = <app.models.tenant.Tenant object at 0x146ab4ed0>

    def test_get_orders_list(client, db_session, test_user, auth_headers, test_tenant):
        """Test getting all orders without filters"""
        response = client.get("/api/v1/orders", headers=auth_headers)
    
        # Check response
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_order_operations.py:116: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:58,605 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:58,606 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:58,606 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:58,606 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:58,606 - app.main - INFO - Startup complete
2025-07-10 03:05:58,606 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:58,608 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 245f10c4
2025-07-10 03:05:58,608 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:58,609 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user a5ada59b
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 245f10c4
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user a5ada59b
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:58,609 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:58,630 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:58,630 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:05:58,630 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
______________________ test_get_orders_with_status_filter ______________________

client = <starlette.testclient.TestClient object at 0x146a9c790>
db_session = <sqlalchemy.orm.session.Session object at 0x14715db50>
test_user = <app.models.user.User object at 0x14715e910>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMGQ4Y2FmYS1iMzI2LTQ5N2MtYTA1MS02MzRkMTAwOGE...cGUiOiJhY2Nlc3MifQ.kjgU6Uknp9sdySMACEdWj6LxLP315XXb9BIlhM5yWoU', 'X-Tenant-ID': 'e1e35e88-97b4-4ce8-b987-b994619372a4'}
test_tenant = <app.models.tenant.Tenant object at 0x14715d990>

    def test_get_orders_with_status_filter(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test filtering orders by status"""
        # Filter by pending status
        response = client.get("/api/v1/orders?status=pending", headers=auth_headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_order_operations.py:128: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:58,724 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:58,725 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:58,725 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:58,725 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:58,725 - app.main - INFO - Startup complete
2025-07-10 03:05:58,725 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:58,727 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant e1e35e88
2025-07-10 03:05:58,727 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:58,727 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 20d8cafa
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant e1e35e88
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 20d8cafa
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:58,728 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:58,748 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:58,748 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:05:58,748 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders?status=pending "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders?status=pending "HTTP/1.1 403 Forbidden"
______________________ test_get_orders_with_source_filter ______________________

client = <starlette.testclient.TestClient object at 0x147ae6190>
db_session = <sqlalchemy.orm.session.Session object at 0x147c50d90>
test_user = <app.models.user.User object at 0x14772fa50>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzNDMzYWI0Yy0xNzYxLTQ4OWYtOWQwNS0zMDQ2Mjc1MWR...cGUiOiJhY2Nlc3MifQ.7Vyi80EzYzdYgmOKhj_MFOLrU0603xU9PXXYZOukuqo', 'X-Tenant-ID': 'f090bc08-1ebe-477d-a229-fd8b7c1013fe'}
test_tenant = <app.models.tenant.Tenant object at 0x147c53bd0>

    def test_get_orders_with_source_filter(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test filtering orders by source"""
        # Filter by website source
        response = client.get("/api/v1/orders?order_source=website", headers=auth_headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_order_operations.py:158: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:58,950 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:58,951 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:58,951 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:58,951 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:58,951 - app.main - INFO - Startup complete
2025-07-10 03:05:58,951 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:58,953 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant f090bc08
2025-07-10 03:05:58,953 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:58,954 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 3433ab4c
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant f090bc08
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 3433ab4c
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:58,954 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:58,974 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:58,974 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:05:58,974 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders?order_source=website "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders?order_source=website "HTTP/1.1 403 Forbidden"
____________________ test_get_orders_with_combined_filters _____________________

client = <starlette.testclient.TestClient object at 0x1469c86d0>
db_session = <sqlalchemy.orm.session.Session object at 0x1476a15d0>
test_user = <app.models.user.User object at 0x1480a62d0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjMjdmMDkzNy00OTQ0LTQ3YTQtYmIyMS0yNWFiNjJiMGF...cGUiOiJhY2Nlc3MifQ.9i2pSQLkzW4sIazzQ4NRnTBtx6j3baPOzwsQTkkZ0uU', 'X-Tenant-ID': '788f9830-fe24-42a2-9a59-8172c406254d'}
test_tenant = <app.models.tenant.Tenant object at 0x1480a4b90>

    def test_get_orders_with_combined_filters(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test combining multiple filters"""
        # No results expected with this combination
        response = client.get(
            "/api/v1/orders?status=pending&order_source=whatsapp", headers=auth_headers
        )
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_order_operations.py:192: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,070 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,071 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,071 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,071 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,071 - app.main - INFO - Startup complete
2025-07-10 03:05:59,071 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,072 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 788f9830
2025-07-10 03:05:59,072 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,073 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user c27f0937
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 788f9830
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user c27f0937
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:59,074 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:59,094 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:59,094 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:05:59,094 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders?status=pending&order_source=whatsapp "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders?status=pending&order_source=whatsapp "HTTP/1.1 403 Forbidden"
_________________________ test_get_orders_with_search __________________________

client = <starlette.testclient.TestClient object at 0x147158b10>
db_session = <sqlalchemy.orm.session.Session object at 0x146e410d0>
test_user = <app.models.user.User object at 0x148198990>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjY2JjYWFhNy1jMWY1LTRkZjMtOTUwYS1kNjM2OTI3ZWY...cGUiOiJhY2Nlc3MifQ.h1MUHWzCofIK3UdCNLkmSCJys85Q4PSQv_b2csHZlf4', 'X-Tenant-ID': 'b568f0f1-aedd-4af7-92ef-cd067ce7ee60'}
test_tenant = <app.models.tenant.Tenant object at 0x146e42390>

    def test_get_orders_with_search(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test search functionality in orders list"""
        # Search by buyer name
        response = client.get("/api/v1/orders?search=WhatsApp+Buyer", headers=auth_headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_order_operations.py:213: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,187 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,188 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,188 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,188 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,188 - app.main - INFO - Startup complete
2025-07-10 03:05:59,189 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,190 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant b568f0f1
2025-07-10 03:05:59,190 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,191 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user ccbcaaa7
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant b568f0f1
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user ccbcaaa7
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:59,191 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:59,211 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:59,211 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:05:59,211 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders?search=WhatsApp+Buyer "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders?search=WhatsApp+Buyer "HTTP/1.1 403 Forbidden"
_______________________ test_get_orders_with_pagination ________________________

client = <starlette.testclient.TestClient object at 0x147439710>
db_session = <sqlalchemy.orm.session.Session object at 0x1480a6cd0>
test_user = <app.models.user.User object at 0x1480a6650>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyNTgxNWMxNy0zYmEwLTQ3YjAtYjc1Ny1lMDk5NGU5NjE...cGUiOiJhY2Nlc3MifQ.zZiX3UMJ3ZH-utr6EQWvfgREG2FWVSpStaqEQDksZuU', 'X-Tenant-ID': '1b052537-507b-4c88-a755-6fb891fc10d2'}
test_tenant = <app.models.tenant.Tenant object at 0x1480a78d0>

    def test_get_orders_with_pagination(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test pagination for orders list"""
        # Create 10 orders for pagination testing
        orders = []
        for i in range(10):
            order = Order(
>               product_id=test_products[0].id,
                seller_id=test_user.id,
                buyer_name=f"Pagination Buyer {i}",
                buyer_phone=f"+1000000{i:04d}",
                quantity=1,
                total_amount=Decimal("10.99"),
                status=OrderStatus.pending,
                order_source=OrderSource.website,
            )
E           TypeError: 'function' object is not subscriptable

tests/api/test_order_operations.py:233: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,408 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,409 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,409 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,409 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,409 - app.main - INFO - Startup complete
2025-07-10 03:05:59,409 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,410 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 1b052537
2025-07-10 03:05:59,410 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,411 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 25815c17
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 1b052537
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 25815c17
_____________________________ test_get_order_by_id _____________________________

client = <starlette.testclient.TestClient object at 0x148704a90>
db_session = <sqlalchemy.orm.session.Session object at 0x146e41490>
test_user = <app.models.user.User object at 0x147431050>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzNGY3M2MyOC00NjZiLTQ1ZDEtYjkzNy0zYWUxNWU1YWY...cGUiOiJhY2Nlc3MifQ.oyQ4woREfZZHm8OWEbZ6Hy-tH3-sSxBFQHqHSBEwwsg', 'X-Tenant-ID': '84c17ca1-3807-464d-b113-45422bac9da8'}
test_tenant = <app.models.tenant.Tenant object at 0x147430ad0>

    def test_get_order_by_id(client, db_session, test_user, auth_headers, test_tenant):
        """Test getting a specific order by ID"""
>       order_id = str(test_orders[0].id)
E       TypeError: 'function' object is not subscriptable

tests/api/test_order_operations.py:274: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,504 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,505 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,505 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,505 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,505 - app.main - INFO - Startup complete
2025-07-10 03:05:59,505 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,507 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 84c17ca1
2025-07-10 03:05:59,507 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,508 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 34f73c28
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 84c17ca1
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 34f73c28
__________________________ test_get_nonexistent_order __________________________

client = <starlette.testclient.TestClient object at 0x1480a4b90>
db_session = <sqlalchemy.orm.session.Session object at 0x14739df90>
test_user = <app.models.user.User object at 0x14739ddd0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1YmM3ZThmNy00MDA0LTRkNTEtODYwZi0xMjY1YmM5OTI...cGUiOiJhY2Nlc3MifQ.k9JYaRr-dPJFXUKUHvd8vc6As8Q22MuBxfIEHhc3SbY', 'X-Tenant-ID': '7f9eccfb-d5ed-407b-a3e6-df0f10a4b767'}
test_tenant = <app.models.tenant.Tenant object at 0x14739cb10>

    def test_get_nonexistent_order(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test getting a non-existent order ID"""
        nonexistent_id = str(uuid4())
        response = client.get(f"/api/v1/orders/{nonexistent_id}", headers=auth_headers)
>       assert response.status_code == 404
E       assert 403 == 404
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_order_operations.py:292: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,710 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,711 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,711 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,711 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,711 - app.main - INFO - Startup complete
2025-07-10 03:05:59,711 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,712 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 7f9eccfb
2025-07-10 03:05:59,712 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,713 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 5bc7e8f7
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 7f9eccfb
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 5bc7e8f7
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:59,714 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:59,733 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:59,733 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/8bd788be-ef0d-40b8-9351-811b9922b192
2025-07-10 03:05:59,734 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders/8bd788be-ef0d-40b8-9351-811b9922b192 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/8bd788be-ef0d-40b8-9351-811b9922b192
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders/8bd788be-ef0d-40b8-9351-811b9922b192 "HTTP/1.1 403 Forbidden"
_________________________ test_get_order_invalid_uuid __________________________

client = <starlette.testclient.TestClient object at 0x147380c50>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlZjU4NmU0NS04MmRiLTQ5NjgtYTY3ZC02ZTFiOGRhZWR...cGUiOiJhY2Nlc3MifQ.g3tGU86kQ5c_XD6ucCmX93PgN3efMHzhyUSKXTFx-Vk', 'X-Tenant-ID': 'ea44005f-ce4a-4306-a5c0-d506128c0766'}

    def test_get_order_invalid_uuid(client, auth_headers):
        """Test getting an order with invalid UUID format"""
        response = client.get("/api/v1/orders/not-a-valid-uuid", headers=auth_headers)
>       assert response.status_code == 422  # Validation error for invalid UUID
E       assert 403 == 422
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_order_operations.py:299: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,828 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,829 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,829 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,829 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,829 - app.main - INFO - Startup complete
2025-07-10 03:05:59,829 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,830 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant ea44005f
2025-07-10 03:05:59,830 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,831 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user ef586e45
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant ea44005f
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user ef586e45
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:05:59,832 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:05:59,851 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:05:59,851 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/not-a-valid-uuid
2025-07-10 03:05:59,851 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders/not-a-valid-uuid "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/not-a-valid-uuid
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders/not-a-valid-uuid "HTTP/1.1 403 Forbidden"
___________________________ test_update_order_status ___________________________

client = <starlette.testclient.TestClient object at 0x1481486d0>
db_session = <sqlalchemy.orm.session.Session object at 0x1482f7e50>
test_user = <app.models.user.User object at 0x146d309d0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjMzExNDZlMi04ODFjLTRiYmMtOGEyMC01ZWEwMzY0YjA...cGUiOiJhY2Nlc3MifQ.U0tHkMAhFPnU6nIfJGRgltNkprP4jpWiFMJcXSsa0Jk', 'X-Tenant-ID': '174a02c9-a517-4d1b-b96b-c180554b4e4a'}
test_tenant = <app.models.tenant.Tenant object at 0x1482f5190>

    def test_update_order_status(client, db_session, test_user, auth_headers, test_tenant):
        """Test updating an order's status"""
>       order_id = str(test_orders[0].id)
E       TypeError: 'function' object is not subscriptable

tests/api/test_order_operations.py:305: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:05:59,945 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:05:59,946 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:05:59,946 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:05:59,946 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:05:59,946 - app.main - INFO - Startup complete
2025-07-10 03:05:59,946 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:05:59,947 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 174a02c9
2025-07-10 03:05:59,947 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:05:59,948 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user c31146e2
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 174a02c9
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user c31146e2
______________________ test_update_order_multiple_fields _______________________

client = <starlette.testclient.TestClient object at 0x1473d5510>
db_session = <sqlalchemy.orm.session.Session object at 0x1473aafd0>
test_user = <app.models.user.User object at 0x1473a90d0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3MDk1Zjk2Ny02MjcwLTRiZmMtYWI4ZS1jYmIxNzkyNWM...cGUiOiJhY2Nlc3MifQ.glmzleWoKJA2JJvKTfFNyaSnlFobkKotQNsXRe2UsYw', 'X-Tenant-ID': 'bfd1a5c4-8443-4a93-9643-9f88fc63c7f9'}
test_tenant = <app.models.tenant.Tenant object at 0x1473abe90>

    def test_update_order_multiple_fields(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test updating multiple fields of an order"""
>       order_id = str(test_orders[1].id)
E       TypeError: 'function' object is not subscriptable

tests/api/test_order_operations.py:328: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:00,169 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:00,170 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:00,170 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:00,170 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:00,170 - app.main - INFO - Startup complete
2025-07-10 03:06:00,171 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:00,172 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant bfd1a5c4
2025-07-10 03:06:00,172 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:00,173 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 7095f967
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant bfd1a5c4
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 7095f967
________________________ test_update_nonexistent_order _________________________

client = <starlette.testclient.TestClient object at 0x1473fb650>
db_session = <sqlalchemy.orm.session.Session object at 0x148046050>
test_user = <app.models.user.User object at 0x148045d50>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjYzVhZWE2My1lNmI4LTQyMTQtYWE0Yi00Y2MzODBiYzk...cGUiOiJhY2Nlc3MifQ.OMRy0xcf-9QsnoUFPSWF60tqX480-IOnC7DdtPnr7Ww', 'X-Tenant-ID': '3e20d084-6e1d-4d6b-988a-ce86afb71771'}
test_tenant = <app.models.tenant.Tenant object at 0x148047a50>

    def test_update_nonexistent_order(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test updating a non-existent order"""
        nonexistent_id = str(uuid4())
        update_data = {"status": "confirmed"}
    
        response = client.put(
            f"/api/v1/orders/{nonexistent_id}", headers=auth_headers, json=update_data
        )
>       assert response.status_code == 404
E       assert 403 == 404
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_order_operations.py:361: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:00,266 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:00,267 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:00,267 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:00,267 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:00,267 - app.main - INFO - Startup complete
2025-07-10 03:06:00,267 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:00,269 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 3e20d084
2025-07-10 03:06:00,269 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:00,269 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user cc5aea63
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 3e20d084
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user cc5aea63
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:00,270 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:00,289 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:00,289 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=PUT, path=/api/v1/orders/92b8f753-c8d1-40a4-aef4-c94b207beab0
2025-07-10 03:06:00,290 - httpx - INFO - HTTP Request: PUT http://testserver/api/v1/orders/92b8f753-c8d1-40a4-aef4-c94b207beab0 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=PUT, path=/api/v1/orders/92b8f753-c8d1-40a4-aef4-c94b207beab0
INFO     httpx:_client.py:1027 HTTP Request: PUT http://testserver/api/v1/orders/92b8f753-c8d1-40a4-aef4-c94b207beab0 "HTTP/1.1 403 Forbidden"
______________________________ test_delete_order _______________________________

client = <starlette.testclient.TestClient object at 0x148198290>
db_session = <sqlalchemy.orm.session.Session object at 0x14807fb90>
test_user = <app.models.user.User object at 0x14807cc50>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlMWMzNTA1Ni02YzhiLTQ0NWEtOTYzMS1iNzBlYWRhMTY...cGUiOiJhY2Nlc3MifQ._1vemsiopSSilRPIR_52KBsyr5tOGkUQTANhfUu2V9U', 'X-Tenant-ID': '9413f8e9-6eca-4d3f-abb8-0db02739d380'}
test_tenant = <app.models.tenant.Tenant object at 0x14807e010>

    def test_delete_order(client, db_session, test_user, auth_headers, test_tenant):
        """Test deleting an order (soft delete)"""
>       order_id = str(test_orders[0].id)
E       TypeError: 'function' object is not subscriptable

tests/api/test_order_operations.py:379: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:00,689 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:00,689 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:00,689 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:00,690 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:00,690 - app.main - INFO - Startup complete
2025-07-10 03:06:00,690 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:00,691 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 9413f8e9
2025-07-10 03:06:00,691 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:00,692 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user e1c35056
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 9413f8e9
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user e1c35056
________________________ test_delete_nonexistent_order _________________________

client = <starlette.testclient.TestClient object at 0x14719f250>
db_session = <sqlalchemy.orm.session.Session object at 0x1478fd310>
test_user = <app.models.user.User object at 0x1478fdb90>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmODQwNTIzMC00NzI0LTQ5MDEtOTI4Ni1mOTAxZGU0M2M...cGUiOiJhY2Nlc3MifQ.u4AxtIABFkHNFybdvcdA0G4CuIJiflPyXS4VrRvdccc', 'X-Tenant-ID': 'f15cd4a7-22fa-43ec-a5d0-2cf2f62a3ebe'}
test_tenant = <app.models.tenant.Tenant object at 0x1478fcc10>

    def test_delete_nonexistent_order(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test deleting a non-existent order"""
        nonexistent_id = str(uuid4())
    
        response = client.delete(f"/api/v1/orders/{nonexistent_id}", headers=auth_headers)
>       assert response.status_code == 404
E       assert 403 == 404
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_order_operations.py:403: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:00,887 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:00,888 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:00,888 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:00,888 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:00,888 - app.main - INFO - Startup complete
2025-07-10 03:06:00,888 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:00,890 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant f15cd4a7
2025-07-10 03:06:00,890 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:00,890 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user f8405230
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant f15cd4a7
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user f8405230
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:00,891 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:00,910 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:00,910 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/orders/555e78c2-a84d-4ec1-9d00-76efd1f55666
2025-07-10 03:06:00,910 - httpx - INFO - HTTP Request: DELETE http://testserver/api/v1/orders/555e78c2-a84d-4ec1-9d00-76efd1f55666 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/orders/555e78c2-a84d-4ec1-9d00-76efd1f55666
INFO     httpx:_client.py:1027 HTTP Request: DELETE http://testserver/api/v1/orders/555e78c2-a84d-4ec1-9d00-76efd1f55666 "HTTP/1.1 403 Forbidden"
______________________ test_delete_already_deleted_order _______________________

client = <starlette.testclient.TestClient object at 0x148545150>
db_session = <sqlalchemy.orm.session.Session object at 0x148171390>
test_user = <app.models.user.User object at 0x147889b50>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3YWY4MGQ0Yi0xMmIwLTQ1MWEtYWUzYS0wMjk2ZTYyM2F...cGUiOiJhY2Nlc3MifQ.-ekZf74VC-T1diUYnZtj9Gxn1qkvOPKK2Jp1lF_7lmI', 'X-Tenant-ID': '0d1d0b1b-1189-48ab-ab79-28773c5447fa'}
test_tenant = <app.models.tenant.Tenant object at 0x148170050>

    def test_delete_already_deleted_order(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test deleting an already deleted order"""
>       order_id = str(test_orders[2].id)
E       TypeError: 'function' object is not subscriptable

tests/api/test_order_operations.py:411: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:01,003 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:01,004 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:01,004 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:01,004 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:01,004 - app.main - INFO - Startup complete
2025-07-10 03:06:01,005 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:01,006 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 0d1d0b1b
2025-07-10 03:06:01,006 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:01,007 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 7af80d4b
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 0d1d0b1b
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 7af80d4b
______________________________ test_create_order _______________________________

client = <starlette.testclient.TestClient object at 0x148590bd0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI4ZjQxZmVjNS1hODE5LTQzYzAtYjFhNi05ODJhNzk0M2J...cGUiOiJhY2Nlc3MifQ.j0-GyHATiMGJK8IT8DhTMFxaqQwAWqT5KJdZcFg_nHg', 'X-Tenant-ID': 'f3995805-15a0-4913-8965-2ced4ad2f2bb'}
db_session = <sqlalchemy.orm.session.Session object at 0x148261b90>
test_user = <app.models.user.User object at 0x146e2fd50>
test_tenant = <app.models.tenant.Tenant object at 0x148263a10>

    def test_create_order(client, auth_headers, db_session, test_user, test_tenant):
        """Test creating a new order"""
        # First create a test product
        product = Product(
            name="Test Product",
            description="Test Description",
            price=Decimal("99.99"),
            seller_id=test_user.id,
            is_featured=False,
            show_on_storefront=True,
        )
        db_session.add(product)
        db_session.commit()
        db_session.refresh(product)
    
        # Create order data
        order_data = {
            "product_id": str(product.id),
            "buyer_name": "Test Buyer",
            "buyer_phone": "+1234567890",
            "buyer_email": "buyer@example.com",
            "buyer_address": "123 Test St, Test City",
            "quantity": 1,
            "total_amount": 99.99,
            "notes": "Test order notes",
            "order_source": "website",
        }
    
        # Store the user ID as a string for comparison
        user_id_str = str(test_user.id)
    
        # Submit the order
        response = client.post("/api/v1/orders", headers=auth_headers, json=order_data)
    
        # Check response
>       assert response.status_code == 201
E       assert 403 == 201
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_orders.py:46: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:01,513 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:01,514 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:01,514 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:01,514 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:01,514 - app.main - INFO - Startup complete
2025-07-10 03:06:01,514 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:01,515 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant f3995805
2025-07-10 03:06:01,516 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:01,516 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 8f41fec5
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant f3995805
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 8f41fec5
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:01,518 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:01,538 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:01,538 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders
2025-07-10 03:06:01,539 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
__________________________ test_create_whatsapp_order __________________________

client = <starlette.testclient.TestClient object at 0x147c44090>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI4MjUyYzNjOS0yYjQ2LTRkYzQtYTE0OC1jZTRjMjE2NzY...cGUiOiJhY2Nlc3MifQ.p3lqxUvQ3tm2VUpTEI0GIpisF3_zu2sFKjBHGcft3V4', 'X-Tenant-ID': '1eecd335-0788-4020-b5a8-eaa6c1db50e5'}
db_session = <sqlalchemy.orm.session.Session object at 0x1487077d0>
test_user = <app.models.user.User object at 0x148170f50>
test_tenant = <app.models.tenant.Tenant object at 0x148704750>

    def test_create_whatsapp_order(
        client, auth_headers, db_session, test_user, test_tenant
    ):
        """Test creating a WhatsApp order"""
        # First create a test product
        product = Product(
            name="WhatsApp Product",
            description="Test product for WhatsApp order",
            price=49.99,
            seller_id=test_user.id,
            show_on_whatsapp=True,
        )
        db_session.add(product)
        db_session.commit()
        db_session.refresh(product)
    
        # Create WhatsApp order data with channel metadata
        order_data = {
            "product_id": str(product.id),
            "buyer_name": "WhatsApp Buyer",
            "buyer_phone": "+1987654321",
            "quantity": 2,
            "total_amount": 99.98,
            "whatsapp_number": str(test_tenant.whatsapp_number or "+1987654321"),
            "message_id": "test_message_id",
            "conversation_id": "test_conversation_id",
            "channel_metadata": {
                "channel": "whatsapp",
                "message_id": "test_message_id",
                "chat_session_id": "test_conversation_id",
            },
        }
    
        # Store the user ID as a string for comparison
        user_id_str = str(test_user.id)
    
        # Submit the WhatsApp order
        response = client.post(
            "/api/v1/orders/whatsapp", headers=auth_headers, json=order_data
        )
    
        # Check response
>       assert response.status_code == 201
E       assert 403 == 201
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_orders.py:105: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:01,632 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:01,633 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:01,633 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:01,633 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:01,633 - app.main - INFO - Startup complete
2025-07-10 03:06:01,633 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:01,634 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 1eecd335
2025-07-10 03:06:01,635 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:01,635 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 8252c3c9
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 1eecd335
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 8252c3c9
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:01,637 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:01,657 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:01,657 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
2025-07-10 03:06:01,657 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
_____________________________ test_get_orders_list _____________________________

self = <sqlalchemy.engine.base.Connection object at 0x147a47e10>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x14633bf50>
statement = <sqlalchemy.dialects.postgresql.base.PGCompiler object at 0x146338550>
parameters = [{'buyer_address': None, 'buyer_email': None, 'buyer_name': 'List Buyer 1', 'buyer_phone': '+11111111111', ...}]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x1471271f0; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': None, 'buyer_name': 'List Buyer 1', 'buyer_phone': '+11111111111', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x14633bf50>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (b58273ff-9255-490c-b255-fc021d5a1969, f74f7351-396e-4d6a-b9f5-492158b57d22, f3451053-f65c-41ae-9639-ceeffafca7e4, List Buyer 1, +11111111111, null, null, 1, 10, whatsapp, pending, null, 1, f, null, f, 2025-07-10 03:06:01.863799-06, null, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

client = <starlette.testclient.TestClient object at 0x147caead0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmMzQ1MTA1My1mNjVjLTQxYWUtOTYzOS1jZWVmZmFmY2E...cGUiOiJhY2Nlc3MifQ.izwU3bnh80myoxHRh_vs2MiihgK7waNFZ6ejwdcCCLw', 'X-Tenant-ID': 'cb7542b1-616d-4be7-9ec0-cc472b6d58ac'}
db_session = <sqlalchemy.orm.session.Session object at 0x147a47e90>
test_user = <app.models.user.User object at 0x147a44950>

    def test_get_orders_list(client, auth_headers, db_session, test_user):
        """Test getting a list of orders"""
        # Create multiple test products
        product1 = Product(
            name="List Test Product 1",
            description="Test Description 1",
            price=Decimal("10.00"),
            seller_id=test_user.id,
        )
        product2 = Product(
            name="List Test Product 2",
            description="Test Description 2",
            price=Decimal("20.00"),
            seller_id=test_user.id,
        )
        db_session.add_all([product1, product2])
        db_session.commit()
        db_session.refresh(product1)
        db_session.refresh(product2)
    
        # Create test orders
        order1 = Order(
            product_id=product1.id,
            seller_id=test_user.id,
            buyer_name="List Buyer 1",
            buyer_phone="+11111111111",
            quantity=1,
            total_amount=10.00,
            status=OrderStatus.pending,
        )
        order2 = Order(
            product_id=product2.id,
            seller_id=test_user.id,
            buyer_name="List Buyer 2",
            buyer_phone="+22222222222",
            quantity=2,
            total_amount=40.00,
            status=OrderStatus.confirmed,
            order_source=OrderSource.website,
        )
        db_session.add_all([order1, order2])
>       db_session.commit()

tests/api/test_orders.py:183: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1227: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x1471271f0; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': None, 'buyer_name': 'List Buyer 1', 'buyer_phone': '+11111111111', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x14633bf50>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (b58273ff-9255-490c-b255-fc021d5a1969, f74f7351-396e-4d6a-b9f5-492158b57d22, f3451053-f65c-41ae-9639-ceeffafca7e4, List Buyer 1, +11111111111, null, null, 1, 10, whatsapp, pending, null, 1, f, null, f, 2025-07-10 03:06:01.863799-06, null, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_address, quantity, total_amount, order_source, status, notes, version, notification_sent, last_notification_at, is_deleted, updated_at, cancelled_at, returned_at, cancellation_reason, return_reason) VALUES (%(id)s::UUID, %(product_id)s::UUID, %(seller_id)s::UUID, %(tenant_id)s::UUID, %(customer_id)s::UUID, %(buyer_name)s, %(buyer_phone)s, %(buyer_email)s, %(buyer_address)s, %(quantity)s, %(total_amount)s, %(order_source)s, %(status)s, %(notes)s, %(version)s, %(notification_sent)s, %(last_notification_at)s, %(is_deleted)s, %(updated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at]
E       [parameters: {'id': UUID('b58273ff-9255-490c-b255-fc021d5a1969'), 'product_id': UUID('f74f7351-396e-4d6a-b9f5-492158b57d22'), 'seller_id': UUID('f3451053-f65c-41ae-9639-ceeffafca7e4'), 'tenant_id': None, 'customer_id': None, 'buyer_name': 'List Buyer 1', 'buyer_phone': '+11111111111', 'buyer_email': None, 'buyer_address': None, 'quantity': 1, 'total_amount': 10.0, 'order_source': 'whatsapp', 'status': 'pending', 'notes': None, 'version': 1, 'notification_sent': False, 'last_notification_at': None, 'is_deleted': False, 'updated_at': None, 'cancelled_at': None, 'returned_at': None, 'cancellation_reason': None, 'return_reason': None}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:01,861 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:01,862 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:01,863 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:01,863 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:01,863 - app.main - INFO - Startup complete
2025-07-10 03:06:01,863 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:01,864 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant cb7542b1
2025-07-10 03:06:01,864 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:01,865 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user f3451053
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant cb7542b1
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user f3451053
_____________________________ test_get_order_by_id _____________________________

self = <sqlalchemy.engine.base.Connection object at 0x1482ec490>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x145ba39d0>
statement = <sqlalchemy.dialects.postgresql.base.PGCompiler object at 0x146338550>
parameters = [{'buyer_address': None, 'buyer_email': 'detail@example.com', 'buyer_name': 'Detail Buyer', 'buyer_phone': '+13333333333', ...}]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x147127880; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': 'detail@example.com', 'buyer_name': 'Detail Buyer', 'buyer_phone': '+13333333333', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x145ba39d0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (2663f73d-36b9-48bd-ba70-3be030c60890, 10b95316-353c-4128-93a5-1d25c17514c4, 2c0dbc78-6a31-44a2-8c29-c4f636bb6dfe, Detail Buyer, +13333333333, detail@example.com, null, 3, 46.5, whatsapp, processing, null, 1, f, null, f, 2025-07-10 03:06:02.190024-06, null, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

client = <starlette.testclient.TestClient object at 0x14856d810>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyYzBkYmM3OC02YTMxLTQ0YTItOGMyOS1jNGY2MzZiYjZ...cGUiOiJhY2Nlc3MifQ.r1viAESleFW4Z_IWg7TgY5cz85J2E4J1dzVq7FUljJk', 'X-Tenant-ID': '8cb5e5bb-4c5e-45e1-a456-8c5ecd7f9acd'}
db_session = <sqlalchemy.orm.session.Session object at 0x1482ef710>
test_user = <app.models.user.User object at 0x1482ecfd0>

    def test_get_order_by_id(client, auth_headers, db_session, test_user):
        """Test getting a specific order by ID"""
        # Create test product
        product = Product(
            name="Detail Test Product",
            description="Test Description",
            price=Decimal("15.50"),
            seller_id=test_user.id,
        )
        db_session.add(product)
        db_session.commit()
        db_session.refresh(product)
    
        # Create test order
        order = Order(
            product_id=product.id,
            seller_id=test_user.id,
            buyer_name="Detail Buyer",
            buyer_phone="+13333333333",
            quantity=3,
            total_amount=46.50,
            buyer_email="detail@example.com",
            status=OrderStatus.processing,
        )
        db_session.add(order)
>       db_session.commit()

tests/api/test_orders.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1227: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x147127880; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': 'detail@example.com', 'buyer_name': 'Detail Buyer', 'buyer_phone': '+13333333333', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x145ba39d0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (2663f73d-36b9-48bd-ba70-3be030c60890, 10b95316-353c-4128-93a5-1d25c17514c4, 2c0dbc78-6a31-44a2-8c29-c4f636bb6dfe, Detail Buyer, +13333333333, detail@example.com, null, 3, 46.5, whatsapp, processing, null, 1, f, null, f, 2025-07-10 03:06:02.190024-06, null, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_address, quantity, total_amount, order_source, status, notes, version, notification_sent, last_notification_at, is_deleted, updated_at, cancelled_at, returned_at, cancellation_reason, return_reason) VALUES (%(id)s::UUID, %(product_id)s::UUID, %(seller_id)s::UUID, %(tenant_id)s::UUID, %(customer_id)s::UUID, %(buyer_name)s, %(buyer_phone)s, %(buyer_email)s, %(buyer_address)s, %(quantity)s, %(total_amount)s, %(order_source)s, %(status)s, %(notes)s, %(version)s, %(notification_sent)s, %(last_notification_at)s, %(is_deleted)s, %(updated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at]
E       [parameters: {'id': UUID('2663f73d-36b9-48bd-ba70-3be030c60890'), 'product_id': UUID('10b95316-353c-4128-93a5-1d25c17514c4'), 'seller_id': UUID('2c0dbc78-6a31-44a2-8c29-c4f636bb6dfe'), 'tenant_id': None, 'customer_id': None, 'buyer_name': 'Detail Buyer', 'buyer_phone': '+13333333333', 'buyer_email': 'detail@example.com', 'buyer_address': None, 'quantity': 3, 'total_amount': 46.5, 'order_source': 'whatsapp', 'status': 'processing', 'notes': None, 'version': 1, 'notification_sent': False, 'last_notification_at': None, 'is_deleted': False, 'updated_at': None, 'cancelled_at': None, 'returned_at': None, 'cancellation_reason': None, 'return_reason': None}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:02,086 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:02,087 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:02,087 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:02,087 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:02,087 - app.main - INFO - Startup complete
2025-07-10 03:06:02,189 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:02,190 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 8cb5e5bb
2025-07-10 03:06:02,190 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:02,191 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 2c0dbc78
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 8cb5e5bb
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 2c0dbc78
___________________________ test_update_order_status ___________________________

self = <sqlalchemy.engine.base.Connection object at 0x1471f9bd0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x147b256d0>
statement = <sqlalchemy.dialects.postgresql.base.PGCompiler object at 0x146338550>
parameters = [{'buyer_address': None, 'buyer_email': None, 'buyer_name': 'Status Buyer', 'buyer_phone': '+14444444444', ...}]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x146bd7c40; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': None, 'buyer_name': 'Status Buyer', 'buyer_phone': '+14444444444', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x147b256d0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (485ad11f-b1fb-43ff-92b8-05cd1f7de78e, c2d90d18-ff40-4f86-913b-dab915e3627d, 247c1a37-9f41-4e78-adbd-c1d88983a2cf, Status Buyer, +14444444444, null, null, 1, 25.75, whatsapp, pending, null, 1, f, null, f, 2025-07-10 03:06:02.523472-06, null, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

client = <starlette.testclient.TestClient object at 0x14807ab90>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyNDdjMWEzNy05ZjQxLTRlNzgtYWRiZC1jMWQ4ODk4M2E...cGUiOiJhY2Nlc3MifQ.qaE6LS5ReQXAbNZPTS2zmLwXQCwX4UdnyESCJMPdOUM', 'X-Tenant-ID': '15b2ae35-3159-47b4-8356-32047e22a7bd'}
db_session = <sqlalchemy.orm.session.Session object at 0x1471f9b50>
test_user = <app.models.user.User object at 0x1471fbf50>

    def test_update_order_status(client, auth_headers, db_session, test_user):
        """Test updating an order's status"""
        # Create test product
        product = Product(
            name="Status Test Product",
            description="Test Description",
            price=Decimal("25.75"),
            seller_id=test_user.id,
        )
        db_session.add(product)
        db_session.commit()
        db_session.refresh(product)
    
        # Create test order
        order = Order(
            product_id=product.id,
            seller_id=test_user.id,
            buyer_name="Status Buyer",
            buyer_phone="+14444444444",
            quantity=1,
            total_amount=25.75,
            status=OrderStatus.pending,
        )
        db_session.add(order)
>       db_session.commit()

tests/api/test_orders.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1227: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x146bd7c40; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': None, 'buyer_name': 'Status Buyer', 'buyer_phone': '+14444444444', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x147b256d0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (485ad11f-b1fb-43ff-92b8-05cd1f7de78e, c2d90d18-ff40-4f86-913b-dab915e3627d, 247c1a37-9f41-4e78-adbd-c1d88983a2cf, Status Buyer, +14444444444, null, null, 1, 25.75, whatsapp, pending, null, 1, f, null, f, 2025-07-10 03:06:02.523472-06, null, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_address, quantity, total_amount, order_source, status, notes, version, notification_sent, last_notification_at, is_deleted, updated_at, cancelled_at, returned_at, cancellation_reason, return_reason) VALUES (%(id)s::UUID, %(product_id)s::UUID, %(seller_id)s::UUID, %(tenant_id)s::UUID, %(customer_id)s::UUID, %(buyer_name)s, %(buyer_phone)s, %(buyer_email)s, %(buyer_address)s, %(quantity)s, %(total_amount)s, %(order_source)s, %(status)s, %(notes)s, %(version)s, %(notification_sent)s, %(last_notification_at)s, %(is_deleted)s, %(updated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at]
E       [parameters: {'id': UUID('485ad11f-b1fb-43ff-92b8-05cd1f7de78e'), 'product_id': UUID('c2d90d18-ff40-4f86-913b-dab915e3627d'), 'seller_id': UUID('247c1a37-9f41-4e78-adbd-c1d88983a2cf'), 'tenant_id': None, 'customer_id': None, 'buyer_name': 'Status Buyer', 'buyer_phone': '+14444444444', 'buyer_email': None, 'buyer_address': None, 'quantity': 1, 'total_amount': 25.75, 'order_source': 'whatsapp', 'status': 'pending', 'notes': None, 'version': 1, 'notification_sent': False, 'last_notification_at': None, 'is_deleted': False, 'updated_at': None, 'cancelled_at': None, 'returned_at': None, 'cancellation_reason': None, 'return_reason': None}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:02,521 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:02,522 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:02,522 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:02,522 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:02,522 - app.main - INFO - Startup complete
2025-07-10 03:06:02,523 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:02,524 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 15b2ae35
2025-07-10 03:06:02,524 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:02,525 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 247c1a37
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 15b2ae35
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 247c1a37
______________________________ test_delete_order _______________________________

self = <sqlalchemy.engine.base.Connection object at 0x1473776d0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x147b25950>
statement = <sqlalchemy.dialects.postgresql.base.PGCompiler object at 0x14862b590>
parameters = [{'buyer_address': None, 'buyer_email': None, 'buyer_name': 'Delete Buyer', 'buyer_phone': '+15555555555', ...}]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x146bd6980; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': None, 'buyer_name': 'Delete Buyer', 'buyer_phone': '+15555555555', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x147b25950>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (9a246237-98dd-4fb0-8b05-15a1efe74776, d3b1cb4c-9625-4154-b0ca-57c352c21c29, 9f18d3f2-ddc8-46d6-87e1-ad20aec6c12d, Delete Buyer, +15555555555, null, null, 1, 5.99, whatsapp, pending, null, 1, f, null, f, 2025-07-10 03:06:02.857208-06, null, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

client = <starlette.testclient.TestClient object at 0x148263850>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5ZjE4ZDNmMi1kZGM4LTQ2ZDYtODdlMS1hZDIwYWVjNmM...cGUiOiJhY2Nlc3MifQ.0cc_CLE3WdR-KN1NL74vXfaCbiqHaJAQ_p3rgHTwObA', 'X-Tenant-ID': '1570bb9b-a1ae-441b-a475-e954de07dbb3'}
db_session = <sqlalchemy.orm.session.Session object at 0x1473755d0>
test_user = <app.models.user.User object at 0x147377c90>

    def test_delete_order(client, auth_headers, db_session, test_user):
        """Test deleting an order (soft delete)"""
        # Create test product
        product = Product(
            name="Delete Test Product",
            description="Test Description",
            price=Decimal("5.99"),
            seller_id=test_user.id,
        )
        db_session.add(product)
        db_session.commit()
        db_session.refresh(product)
    
        # Create test order
        order = Order(
            product_id=product.id,
            seller_id=test_user.id,
            buyer_name="Delete Buyer",
            buyer_phone="+15555555555",
            quantity=1,
            total_amount=5.99,
        )
        db_session.add(order)
>       db_session.commit()

tests/api/test_orders.py:357: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1227: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x146bd6980; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': None, 'buyer_name': 'Delete Buyer', 'buyer_phone': '+15555555555', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x147b25950>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (9a246237-98dd-4fb0-8b05-15a1efe74776, d3b1cb4c-9625-4154-b0ca-57c352c21c29, 9f18d3f2-ddc8-46d6-87e1-ad20aec6c12d, Delete Buyer, +15555555555, null, null, 1, 5.99, whatsapp, pending, null, 1, f, null, f, 2025-07-10 03:06:02.857208-06, null, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_address, quantity, total_amount, order_source, status, notes, version, notification_sent, last_notification_at, is_deleted, updated_at, cancelled_at, returned_at, cancellation_reason, return_reason) VALUES (%(id)s::UUID, %(product_id)s::UUID, %(seller_id)s::UUID, %(tenant_id)s::UUID, %(customer_id)s::UUID, %(buyer_name)s, %(buyer_phone)s, %(buyer_email)s, %(buyer_address)s, %(quantity)s, %(total_amount)s, %(order_source)s, %(status)s, %(notes)s, %(version)s, %(notification_sent)s, %(last_notification_at)s, %(is_deleted)s, %(updated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at]
E       [parameters: {'id': UUID('9a246237-98dd-4fb0-8b05-15a1efe74776'), 'product_id': UUID('d3b1cb4c-9625-4154-b0ca-57c352c21c29'), 'seller_id': UUID('9f18d3f2-ddc8-46d6-87e1-ad20aec6c12d'), 'tenant_id': None, 'customer_id': None, 'buyer_name': 'Delete Buyer', 'buyer_phone': '+15555555555', 'buyer_email': None, 'buyer_address': None, 'quantity': 1, 'total_amount': 5.99, 'order_source': 'whatsapp', 'status': 'pending', 'notes': None, 'version': 1, 'notification_sent': False, 'last_notification_at': None, 'is_deleted': False, 'updated_at': None, 'cancelled_at': None, 'returned_at': None, 'cancellation_reason': None, 'return_reason': None}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:02,855 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:02,856 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:02,856 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:02,856 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:02,856 - app.main - INFO - Startup complete
2025-07-10 03:06:02,856 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:02,858 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 1570bb9b
2025-07-10 03:06:02,858 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:02,859 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 9f18d3f2
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 1570bb9b
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 9f18d3f2
__________________________ test_order_dashboard_stats __________________________

self = <sqlalchemy.engine.base.Connection object at 0x148046150>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x148694790>

    def _exec_insertmany_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for an "insertmanyvalues"
        operation, which will invoke DBAPI
        cursor.execute() one or more times with individual log and
        event hook calls.
    
        """
    
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
        else:
            generic_setinputsizes = None
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters = parameters
    
        engine_events = self._has_events or self.engine._has_events
        if self.dialect._has_events:
            do_execute_dispatch: Iterable[
                Any
            ] = self.dialect.dispatch.do_execute
        else:
            do_execute_dispatch = ()
    
        if self._echo:
            stats = context._get_cache_stats() + " (insertmanyvalues)"
    
        for imv_batch in dialect._deliver_insertmanyvalues_batches(
            cursor,
            str_statement,
            effective_parameters,
            generic_setinputsizes,
            context,
        ):
            if imv_batch.processed_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor,
                        imv_batch.processed_setinputsizes,
                        context,
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e,
                        sql_util._long_statement(imv_batch.replaced_statement),
                        imv_batch.replaced_parameters,
                        None,
                        context,
                    )
    
            sub_stmt = imv_batch.replaced_statement
            sub_params = imv_batch.replaced_parameters
    
            if engine_events:
                for fn in self.dispatch.before_cursor_execute:
                    sub_stmt, sub_params = fn(
                        self,
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                        True,
                    )
    
            if self._echo:
                self._log_info(sql_util._long_statement(sub_stmt))
    
                imv_stats = f""" {imv_batch.batchnum}/{
                            imv_batch.total_batches
                } ({
                    'ordered'
                    if imv_batch.rows_sorted else 'unordered'
                }{
                    '; batch not supported'
                    if imv_batch.is_downgraded
                    else ''
                })"""
    
                if imv_batch.batchnum == 1:
                    stats += imv_stats
                else:
                    stats = f"insertmanyvalues{imv_stats}"
    
                if not self.engine.hide_parameters:
                    self._log_info(
                        "[%s] %r",
                        stats,
                        sql_util._repr_params(
                            sub_params,
                            batches=10,
                            ismulti=False,
                        ),
                    )
                else:
                    self._log_info(
                        "[%s] [SQL parameters hidden due to "
                        "hide_parameters=True]",
                        stats,
                    )
    
            try:
                for fn in do_execute_dispatch:
                    if fn(
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                    ):
                        break
                else:
>                   dialect.do_execute(
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x1469aea70; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...at__4)s, %(updated_at__4)s, %(cancelled_at__4)s, %(returned_at__4)s, %(cancellation_reason__4)s, %(return_reason__4)s)'
parameters = {'buyer_address__0': None, 'buyer_address__1': None, 'buyer_address__2': None, 'buyer_address__3': None, ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x148694790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (dbba6355-9ed4-46f1-b16e-40d09dab428f, a154f3b0-dccf-42c9-b241-3d3e64c2fd4c, 3c1c191d-94f2-4d4c-afe0-93b71dac1542, Stats Buyer 1, +16666666661, null, null, 1, 10, whatsapp, pending, null, 1, f, null, f, 2025-07-05 03:06:03.084496-06, null, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

client = <starlette.testclient.TestClient object at 0x1485707d0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzYzFjMTkxZC05NGYyLTRkNGMtYWZlMC05M2I3MWRhYzE...cGUiOiJhY2Nlc3MifQ.flUcwRq-5AT6IKWtOzBUkeV4LWp5FkzGffuWtgGNz6I', 'X-Tenant-ID': '750dd54b-fe4e-4a93-9c57-15bc9c11a5ed'}
db_session = <sqlalchemy.orm.session.Session object at 0x148046850>
test_user = <app.models.user.User object at 0x147c8e090>

    def test_order_dashboard_stats(client, auth_headers, db_session, test_user):
        """Test the order statistics endpoint for the seller dashboard"""
        # Create test products
        product1 = Product(
            name="Stats Product 1",
            description="Test Description 1",
            price=Decimal("10.00"),
            seller_id=test_user.id,
        )
        product2 = Product(
            name="Stats Product 2",
            description="Test Description 2",
            price=Decimal("20.00"),
            seller_id=test_user.id,
        )
        db_session.add_all([product1, product2])
        db_session.commit()
        db_session.refresh(product1)
        db_session.refresh(product2)
    
        # Store IDs as strings for comparison
        product1_id_str = str(product1.id)
        product2_id_str = str(product2.id)
    
        # Create multiple orders with different statuses and sources
        orders = [
            # WhatsApp orders
            Order(
                product_id=product1.id,
                seller_id=test_user.id,
                buyer_name="Stats Buyer 1",
                buyer_phone="+16666666661",
                quantity=1,
                total_amount=10.00,
                status=OrderStatus.pending,
                order_source=OrderSource.whatsapp,
                created_at=datetime.now(timezone.utc) - timedelta(days=5),
            ),
            Order(
                product_id=product1.id,
                seller_id=test_user.id,
                buyer_name="Stats Buyer 2",
                buyer_phone="+16666666662",
                quantity=2,
                total_amount=20.00,
                status=OrderStatus.shipped,
                order_source=OrderSource.whatsapp,
                created_at=datetime.now(timezone.utc) - timedelta(days=3),
            ),
            # Website orders
            Order(
                product_id=product2.id,
                seller_id=test_user.id,
                buyer_name="Stats Buyer 3",
                buyer_phone="+16666666663",
                buyer_email="stats3@example.com",
                quantity=1,
                total_amount=20.00,
                status=OrderStatus.delivered,
                order_source=OrderSource.website,
                created_at=datetime.now(timezone.utc) - timedelta(days=10),
            ),
            Order(
                product_id=product2.id,
                seller_id=test_user.id,
                buyer_name="Stats Buyer 4",
                buyer_phone="+16666666664",
                buyer_email="stats4@example.com",
                quantity=3,
                total_amount=60.00,
                status=OrderStatus.confirmed,
                order_source=OrderSource.website,
                created_at=datetime.now(timezone.utc) - timedelta(days=1),
            ),
            # Instagram order
            Order(
                product_id=product2.id,
                seller_id=test_user.id,
                buyer_name="Stats Buyer 5",
                buyer_phone="+16666666665",
                quantity=1,
                total_amount=20.00,
                status=OrderStatus.processing,
                order_source=OrderSource.instagram,
                created_at=datetime.now(timezone.utc) - timedelta(days=2),
            ),
        ]
        db_session.add_all(orders)
>       db_session.commit()

tests/api/test_orders.py:473: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1137: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_insertmany_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2121: in _exec_insertmany_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2113: in _exec_insertmany_context
    dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x1469aea70; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...at__4)s, %(updated_at__4)s, %(cancelled_at__4)s, %(returned_at__4)s, %(cancellation_reason__4)s, %(return_reason__4)s)'
parameters = {'buyer_address__0': None, 'buyer_address__1': None, 'buyer_address__2': None, 'buyer_address__3': None, ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x148694790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (dbba6355-9ed4-46f1-b16e-40d09dab428f, a154f3b0-dccf-42c9-b241-3d3e64c2fd4c, 3c1c191d-94f2-4d4c-afe0-93b71dac1542, Stats Buyer 1, +16666666661, null, null, 1, 10, whatsapp, pending, null, 1, f, null, f, 2025-07-05 03:06:03.084496-06, null, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_address, quantity, total_amount, order_source, status, notes, version, notification_sent, last_notification_at, is_deleted, created_at, ... 2511 characters truncated ... _at__4)s, %(cancelled_at__4)s, %(returned_at__4)s, %(cancellation_reason__4)s, %(return_reason__4)s)]
E       [parameters: {'product_id__0': UUID('a154f3b0-dccf-42c9-b241-3d3e64c2fd4c'), 'customer_id__0': None, 'return_reason__0': None, 'created_at__0': datetime.datetime(2025, 7, 5, 9, 6, 3, 84496, tzinfo=datetime.timezone.utc), 'returned_at__0': None, 'order_source__0': 'whatsapp', 'cancelled_at__0': None, 'buyer_phone__0': '+16666666661', 'buyer_address__0': None, 'last_notification_at__0': None, 'is_deleted__0': False, 'version__0': 1, 'cancellation_reason__0': None, 'seller_id__0': UUID('3c1c191d-94f2-4d4c-afe0-93b71dac1542'), 'notes__0': None, 'quantity__0': 1, 'tenant_id__0': None, 'notification_sent__0': False, 'status__0': 'pending', 'buyer_name__0': 'Stats Buyer 1', 'total_amount__0': 10.0, 'buyer_email__0': None, 'id__0': UUID('dbba6355-9ed4-46f1-b16e-40d09dab428f'), 'updated_at__0': None, 'product_id__1': UUID('a154f3b0-dccf-42c9-b241-3d3e64c2fd4c'), 'customer_id__1': None, 'return_reason__1': None, 'created_at__1': datetime.datetime(2025, 7, 7, 9, 6, 3, 84515, tzinfo=datetime.timezone.utc), 'returned_at__1': None, 'order_source__1': 'whatsapp', 'cancelled_at__1': None, 'buyer_phone__1': '+16666666662', 'buyer_address__1': None, 'last_notification_at__1': None, 'is_deleted__1': False, 'version__1': 1, 'cancellation_reason__1': None, 'seller_id__1': UUID('3c1c191d-94f2-4d4c-afe0-93b71dac1542'), 'notes__1': None, 'quantity__1': 2, 'tenant_id__1': None, 'notification_sent__1': False, 'status__1': 'shipped', 'buyer_name__1': 'Stats Buyer 2', 'total_amount__1': 20.0, 'buyer_email__1': None, 'id__1': UUID('0192c610-82a3-44fe-8c99-02cc92e50a02'), 'updated_at__1': None, 'product_id__2': UUID('dba3d462-3ee2-4d35-aa80-32706196dc72'), 'customer_id__2': None ... 20 parameters truncated ... 'id__2': UUID('bc6752c6-9983-4c46-b0c6-ec83b35381b7'), 'updated_at__2': None, 'product_id__3': UUID('dba3d462-3ee2-4d35-aa80-32706196dc72'), 'customer_id__3': None, 'return_reason__3': None, 'created_at__3': datetime.datetime(2025, 7, 9, 9, 6, 3, 84534, tzinfo=datetime.timezone.utc), 'returned_at__3': None, 'order_source__3': 'website', 'cancelled_at__3': None, 'buyer_phone__3': '+16666666664', 'buyer_address__3': None, 'last_notification_at__3': None, 'is_deleted__3': False, 'version__3': 1, 'cancellation_reason__3': None, 'seller_id__3': UUID('3c1c191d-94f2-4d4c-afe0-93b71dac1542'), 'notes__3': None, 'quantity__3': 3, 'tenant_id__3': None, 'notification_sent__3': False, 'status__3': 'confirmed', 'buyer_name__3': 'Stats Buyer 4', 'total_amount__3': 60.0, 'buyer_email__3': 'stats4@example.com', 'id__3': UUID('f1b2a913-4fba-4a64-9b9c-897a17f05f47'), 'updated_at__3': None, 'product_id__4': UUID('dba3d462-3ee2-4d35-aa80-32706196dc72'), 'customer_id__4': None, 'return_reason__4': None, 'created_at__4': datetime.datetime(2025, 7, 8, 9, 6, 3, 84542, tzinfo=datetime.timezone.utc), 'returned_at__4': None, 'order_source__4': 'instagram', 'cancelled_at__4': None, 'buyer_phone__4': '+16666666665', 'buyer_address__4': None, 'last_notification_at__4': None, 'is_deleted__4': False, 'version__4': 1, 'cancellation_reason__4': None, 'seller_id__4': UUID('3c1c191d-94f2-4d4c-afe0-93b71dac1542'), 'notes__4': None, 'quantity__4': 1, 'tenant_id__4': None, 'notification_sent__4': False, 'status__4': 'processing', 'buyer_name__4': 'Stats Buyer 5', 'total_amount__4': 20.0, 'buyer_email__4': None, 'id__4': UUID('e78308ce-b105-44c0-985d-e6ecd0ccd6a9'), 'updated_at__4': None}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,079 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:03,080 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:03,080 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:03,080 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:03,080 - app.main - INFO - Startup complete
2025-07-10 03:06:03,080 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:03,082 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 750dd54b
2025-07-10 03:06:03,082 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:03,082 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 3c1c191d
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 750dd54b
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 3c1c191d
_______________________ test_order_notification_marking ________________________

self = <sqlalchemy.engine.base.Connection object at 0x147b268d0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x146d54810>
statement = <sqlalchemy.dialects.postgresql.base.PGCompiler object at 0x146d55850>
parameters = [{'buyer_address': None, 'buyer_email': None, 'buyer_name': 'Notification Buyer', 'buyer_phone': '+17777777777', ...}]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x1471246d0; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': None, 'buyer_name': 'Notification Buyer', 'buyer_phone': '+17777777777', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x146d54810>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (24aa57ad-8d9e-403b-913b-2d88a3b46cf9, 20951075-8cf8-4069-b6f8-34dc4f254c6b, 84817660-6247-4f04-99e5-855272a1f16b, Notification Buyer, +17777777777, null, null, 1, 35.5, whatsapp, pending, null, 1, f, null, f, 2025-07-10 03:06:03.521129-06, null, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

client = <starlette.testclient.TestClient object at 0x14862b750>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI4NDgxNzY2MC02MjQ3LTRmMDQtOTllNS04NTUyNzJhMWY...cGUiOiJhY2Nlc3MifQ.wy-pNVycuM1SaTRCS36TnmeYyTk5v8MdTjhDpuw5WWM', 'X-Tenant-ID': '683f4ddb-1f86-4306-9330-39b609dec466'}
db_session = <sqlalchemy.orm.session.Session object at 0x147b26550>
test_user = <app.models.user.User object at 0x14739da10>

    def test_order_notification_marking(client, auth_headers, db_session, test_user):
        """Test marking an order as having had notifications sent"""
        # Create test product
        product = Product(
            name="Notification Test Product",
            description="Test Description",
            price=Decimal("35.50"),
            seller_id=test_user.id,
        )
        db_session.add(product)
        db_session.commit()
        db_session.refresh(product)
    
        # Create test order
        order = Order(
            product_id=product.id,
            seller_id=test_user.id,
            buyer_name="Notification Buyer",
            buyer_phone="+17777777777",
            quantity=1,
            total_amount=35.50,
            notification_sent=False,
        )
        db_session.add(order)
>       db_session.commit()

tests/api/test_orders.py:542: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1227: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x1471246d0; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': None, 'buyer_name': 'Notification Buyer', 'buyer_phone': '+17777777777', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x146d54810>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (24aa57ad-8d9e-403b-913b-2d88a3b46cf9, 20951075-8cf8-4069-b6f8-34dc4f254c6b, 84817660-6247-4f04-99e5-855272a1f16b, Notification Buyer, +17777777777, null, null, 1, 35.5, whatsapp, pending, null, 1, f, null, f, 2025-07-10 03:06:03.521129-06, null, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_address, quantity, total_amount, order_source, status, notes, version, notification_sent, last_notification_at, is_deleted, updated_at, cancelled_at, returned_at, cancellation_reason, return_reason) VALUES (%(id)s::UUID, %(product_id)s::UUID, %(seller_id)s::UUID, %(tenant_id)s::UUID, %(customer_id)s::UUID, %(buyer_name)s, %(buyer_phone)s, %(buyer_email)s, %(buyer_address)s, %(quantity)s, %(total_amount)s, %(order_source)s, %(status)s, %(notes)s, %(version)s, %(notification_sent)s, %(last_notification_at)s, %(is_deleted)s, %(updated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at]
E       [parameters: {'id': UUID('24aa57ad-8d9e-403b-913b-2d88a3b46cf9'), 'product_id': UUID('20951075-8cf8-4069-b6f8-34dc4f254c6b'), 'seller_id': UUID('84817660-6247-4f04-99e5-855272a1f16b'), 'tenant_id': None, 'customer_id': None, 'buyer_name': 'Notification Buyer', 'buyer_phone': '+17777777777', 'buyer_email': None, 'buyer_address': None, 'quantity': 1, 'total_amount': 35.5, 'order_source': 'whatsapp', 'status': 'pending', 'notes': None, 'version': 1, 'notification_sent': False, 'last_notification_at': None, 'is_deleted': False, 'updated_at': None, 'cancelled_at': None, 'returned_at': None, 'cancellation_reason': None, 'return_reason': None}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,519 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:03,520 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:03,520 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:03,520 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:03,520 - app.main - INFO - Startup complete
2025-07-10 03:06:03,520 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:03,522 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 683f4ddb
2025-07-10 03:06:03,522 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:03,523 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 84817660
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 683f4ddb
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 84817660
________________________ test_mpesa_initialize_payment _________________________

    def test_mpesa_initialize_payment():
        with patch(
            "app.services.payment.payment_provider.MpesaProvider._get_access_token",
            return_value="mock_token",
        ), patch("requests.post") as mock_post:
            mock_post.return_value.json.return_value = {
                "CheckoutRequestID": "mock_checkout_id"
            }
            mock_post.return_value.raise_for_status = lambda: None
            payload = {
                "order_id": "order123",
                "provider": "MPESA",
                "amount": {"value": 100, "currency": "KES"},
                "customer_phone": "+254700000000",
                "redirect_url": "https://example.com/callback",
                "customer_email": "test@example.com",
                "customer_name": "Test User",
                "metadata": {},
            }
            response = client.post("/api/v1/payments/initialize", json=payload)
>           assert response.status_code == 200
E           assert 403 == 200
E            +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_payments.py:31: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,744 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:03,745 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:03,765 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:03,765 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/initialize
2025-07-10 03:06:03,765 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/payments/initialize "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/initialize
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/payments/initialize "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:03,768 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
______________________________ test_mpesa_webhook ______________________________

    def test_mpesa_webhook():
        payload = {"CheckoutRequestID": "mock_checkout_id"}
        response = client.post("/api/v1/payments/webhook/mpesa", json=payload)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_payments.py:41: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,768 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:03,769 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:03,787 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:03,788 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/webhook/mpesa
2025-07-10 03:06:03,788 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/payments/webhook/mpesa "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/webhook/mpesa
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/payments/webhook/mpesa "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:03,790 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________________________ test_mpesa_ussd_fallback ___________________________

    def test_mpesa_ussd_fallback():
        with patch(
            "app.services.payment.payment_provider.MpesaProvider._get_access_token",
            return_value="mock_token",
        ), patch("requests.post") as mock_post:
            mock_post.return_value.json.return_value = {
                "CheckoutRequestID": "mock_checkout_id"
            }
            mock_post.return_value.raise_for_status = lambda: None
            payload = {
                "order_id": "order123",
                "provider": "MPESA",
                "amount": {"value": 100, "currency": "KES"},
                "customer_phone": "+254700000000",
                "redirect_url": "https://example.com/callback",
                "customer_email": "test@example.com",
                "customer_name": "Test User",
                "metadata": {},
            }
            response = client.post("/api/v1/payments/initialize", json=payload)
>           assert response.status_code == 200
E           assert 403 == 200
E            +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_payments.py:85: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,791 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:03,792 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:03,809 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:03,809 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/initialize
2025-07-10 03:06:03,810 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/payments/initialize "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/initialize
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/payments/initialize "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:03,812 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________________________ test_paystack_webhook _____________________________

    def test_paystack_webhook():
        payload = {"event": "charge.success", "data": {"reference": "mock_ref"}}
        response = client.post("/api/v1/payments/webhook/paystack", json=payload)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_payments.py:95: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,812 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:03,812 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:03,829 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:03,829 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/webhook/paystack
2025-07-10 03:06:03,830 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/payments/webhook/paystack "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/webhook/paystack
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/payments/webhook/paystack "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:03,831 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________________________ test_flutterwave_webhook ___________________________

    def test_flutterwave_webhook():
        payload = {"event": "charge.completed", "data": {"tx_ref": "mock_ref"}}
        response = client.post("/api/v1/payments/webhook/flutterwave", json=payload)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_payments.py:102: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,832 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:03,832 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:03,848 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:03,848 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/webhook/flutterwave
2025-07-10 03:06:03,849 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/payments/webhook/flutterwave "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/webhook/flutterwave
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/payments/webhook/flutterwave "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:03,850 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
________________________ test_stripe_initialize_payment ________________________

    def test_stripe_initialize_payment():
        with patch("app.services.payment.payment_provider.requests.post") as mock_post:
            mock_post.return_value.json.return_value = {
                "id": "pi_123",
                "client_secret": "secret_abc",
            }
            mock_post.return_value.raise_for_status = lambda: None
            payload = {
                "order_id": "order123",
                "provider": "stripe",
                "amount": {"value": 100, "currency": "USD"},
                "customer_email": "test@example.com",
                "customer_name": "Test User",
                "metadata": {},
            }
            response = client.post("/api/v1/payments/initialize", json=payload)
>           assert response.status_code == 200
E           assert 403 == 200
E            +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_payments.py:125: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,850 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:03,851 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:03,868 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:03,868 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/initialize
2025-07-10 03:06:03,869 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/payments/initialize "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/initialize
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/payments/initialize "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:03,871 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_____________________________ test_stripe_webhook ______________________________

    def test_stripe_webhook():
        payload = {"type": "payment_intent.succeeded", "data": {"object": {"id": "pi_123"}}}
        response = client.post("/api/v1/payments/webhook/stripe", json=payload)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_payments.py:135: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,871 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:03,871 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:03,886 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:03,886 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/webhook/stripe
2025-07-10 03:06:03,887 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/payments/webhook/stripe "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/payments/webhook/stripe
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/payments/webhook/stripe "HTTP/1.1 403 Forbidden"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:03,889 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_____________________________ test_create_product ______________________________

client = <starlette.testclient.TestClient object at 0x1485cc690>
db_session = <sqlalchemy.orm.session.Session object at 0x14865d410>
test_user = <app.models.user.User object at 0x147ab4a10>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmNDU0OWU2MC02YTZmLTQ1YWMtODYzNC01NjM2ZjE4ZTU...cGUiOiJhY2Nlc3MifQ.tKJtBSH0OluxAGDMzT0H-YaQOWusOM9tZf3w4zeL3rQ', 'X-Tenant-ID': '52633853-0bce-4ef0-944b-85458d3134e3'}
test_tenant = <app.models.tenant.Tenant object at 0x146d32a50>

    def test_create_product(
        client: TestClient,
        db_session: Session,
        test_user: User,
        auth_headers: dict,
        test_tenant,
    ):
        """Test creating a product."""
        # The test_user fixture now handles ensuring the user exists
    
        # Create a local copy of the test data WITHOUT seller_id since the endpoint sets it
        product_data = TEST_PRODUCT_DATA.copy()
        if "seller_id" in product_data:
            del product_data["seller_id"]
    
        # Use string URLs instead of HttpUrl objects to avoid adaptation issues
        for field in [
            "image_url",
            "video_url",
            "whatsapp_status_url",
            "instagram_story_url",
            "storefront_url",
        ]:
            if field in product_data and product_data[field] is not None:
                product_data[field] = str(product_data[field])
    
        # Ensure auth_headers has X-Tenant-ID
        response = client.post("/api/v1/products/", json=product_data, headers=auth_headers)
>       assert (
            response.status_code == 201
        ), f"Expected 201 but got {response.status_code}. Response: {response.text}"
E       AssertionError: Expected 201 but got 403. Response: Invalid tenant ID: 52633853-0bce-4ef0-944b-85458d3134e3
E       assert 403 == 201
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:124: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:03,889 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:03,890 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:03,890 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:03,890 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:03,890 - app.main - INFO - Startup complete
2025-07-10 03:06:03,890 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:03,892 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 52633853
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 52633853
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:03,895 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:03,910 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:03,910 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products/
2025-07-10 03:06:03,911 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
________________________ test_create_product_validation ________________________

client = <starlette.testclient.TestClient object at 0x148284b50>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiMjIwNmE5Yi1hZDAxLTQ4MmEtOWNkOC01ODI0OTdkYzQ...cGUiOiJhY2Nlc3MifQ.IGzHYADO3ss4qThru4ui4DB9EZceyOYCzYwxuyR2HOc', 'X-Tenant-ID': '51d6b664-c26a-4472-83f7-83c7e930929d'}

    def test_create_product_validation(client: TestClient, auth_headers: dict):
        """Test product creation validation."""
        # Test missing required fields
        response = client.post("/api/v1/products/", json={}, headers=auth_headers)
>       assert response.status_code == 422
E       assert 403 == 422
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:139: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:04,132 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:04,133 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:04,133 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:04,133 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:04,133 - app.main - INFO - Startup complete
2025-07-10 03:06:04,134 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:04,135 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 51d6b664
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 51d6b664
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:04,137 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:04,157 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:04,157 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products/
2025-07-10 03:06:04,157 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
_______________________________ test_get_product _______________________________

client = <starlette.testclient.TestClient object at 0x1481709d0>
db_session = <sqlalchemy.orm.session.Session object at 0x1475f7c90>
test_user = <app.models.user.User object at 0x1475f4710>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjZGNmZThmZC0wMWUyLTRkMjEtOTk0Zi0yZGYwMDQyNzI...cGUiOiJhY2Nlc3MifQ.Teou_1dH9lcqtgUXfoI7TlalI6bwBc7RRG9zPxWl32M', 'X-Tenant-ID': 'baab1371-79d5-475e-aa66-c54c2671d3fd'}
test_tenant = <app.models.tenant.Tenant object at 0x1475f4350>

    def test_get_product(
        client: TestClient,
        db_session: Session,
        test_user: User,
        auth_headers: dict,
        test_tenant,
    ):
        """Test retrieving a product."""
        # Create a product
        product = Product(
            name="Test Product",
            description="Test Description",
            price=Decimal("99.99"),
            image_url="https://example.com/image.jpg",
            seller_id=test_user.id,
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc),
        )
        db_session.add(product)
        db_session.commit()
    
        # Get the product
        response = client.get(f"/api/v1/products/{product.id}", headers=auth_headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:173: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:04,255 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:04,256 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:04,256 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:04,256 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:04,256 - app.main - INFO - Startup complete
2025-07-10 03:06:04,256 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:04,257 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant baab1371
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant baab1371
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:04,262 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:04,281 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:04,281 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/28dca694-3b9e-43e7-8635-a6190f05fd02
2025-07-10 03:06:04,281 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/28dca694-3b9e-43e7-8635-a6190f05fd02 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/28dca694-3b9e-43e7-8635-a6190f05fd02
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/28dca694-3b9e-43e7-8635-a6190f05fd02 "HTTP/1.1 403 Forbidden"
__________________________ test_get_product_not_found __________________________

client = <starlette.testclient.TestClient object at 0x147382a10>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkNDE4NDgyMi04NDY2LTRjYmUtODU1Zi0yMWRmYTg4NDA...cGUiOiJhY2Nlc3MifQ.lqVP-asfKORv_OTVPaQEL0wGHWkYHH3QctrKgDFM1sI', 'X-Tenant-ID': '3db9fce3-373e-4147-a255-6630a2a69d0b'}

    def test_get_product_not_found(client: TestClient, auth_headers: dict):
        """Test getting a non-existent product."""
        response = client.get(f"/api/v1/products/{uuid4()}", headers=auth_headers)
>       assert response.status_code == 404
E       assert 403 == 404
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:183: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:04,488 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:04,489 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:04,489 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:04,489 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:04,489 - app.main - INFO - Startup complete
2025-07-10 03:06:04,489 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:04,491 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 3db9fce3
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 3db9fce3
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:04,493 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:04,513 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:04,513 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/b97fabc9-b68b-4be7-82a5-fa729c88cdde
2025-07-10 03:06:04,513 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/b97fabc9-b68b-4be7-82a5-fa729c88cdde "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/b97fabc9-b68b-4be7-82a5-fa729c88cdde
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/b97fabc9-b68b-4be7-82a5-fa729c88cdde "HTTP/1.1 403 Forbidden"
______________________________ test_list_products ______________________________

client = <starlette.testclient.TestClient object at 0x1482d4dd0>
db_session = <sqlalchemy.orm.session.Session object at 0x146dca090>
test_user = <app.models.user.User object at 0x146dc9090>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmZjI0ZDMzMy1hNWVhLTRmZGMtYjM4Yy0zYThhYTJiNGR...cGUiOiJhY2Nlc3MifQ.o2N6_oPIsqYeMnkCBCirzu2QwXR2ge6MjFvRVISfOYg', 'X-Tenant-ID': '090aef28-9751-41b5-88d0-bc68090d5793'}
test_tenant = <app.models.tenant.Tenant object at 0x146dcb290>

    def test_list_products(
        client: TestClient,
        db_session: Session,
        test_user: User,
        auth_headers: dict,
        test_tenant,
    ):
        """Test listing products."""
        # Create test products
        products = [
            Product(
                name=f"Test Product {i}",
                description="Test Description",
                price=Decimal("99.99"),
                image_url="https://example.com/image.jpg",
                seller_id=test_user.id,
                created_at=datetime.now(timezone.utc),
                updated_at=datetime.now(timezone.utc),
            )
            for i in range(3)
        ]
        db_session.add_all(products)
        db_session.commit()
    
        # List products
        response = client.get("/api/v1/products/", headers=auth_headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:212: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:04,609 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:04,610 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:04,610 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:04,610 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:04,610 - app.main - INFO - Startup complete
2025-07-10 03:06:04,610 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:04,612 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 090aef28
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 090aef28
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:04,616 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:04,635 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:04,635 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:04,635 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
_______________________ test_list_products_with_filters ________________________

client = <starlette.testclient.TestClient object at 0x147601a90>
db_session = <sqlalchemy.orm.session.Session object at 0x147caf510>
test_user = <app.models.user.User object at 0x1478e02d0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5OWU4ZmQzZC1lMzI0LTQwYjQtODMzOC03ZTg5NTIwOWJ...cGUiOiJhY2Nlc3MifQ.8CCMF0bQiZ6UdruXRi8Unbo5X-lfDMWC8B_ye7TOnoU', 'X-Tenant-ID': 'e6823208-d9fe-40c8-bfa9-b6837cbddb93'}
test_tenant = <app.models.tenant.Tenant object at 0x147cac690>

    def test_list_products_with_filters(
        client: TestClient,
        db_session: Session,
        test_user: User,
        auth_headers: dict,
        test_tenant,
    ):
        """Test listing products with filters."""
        # Create test products
        products = [
            Product(
                name=f"Test Product {i}",
                description="Test Description",
                price=Decimal("100.00"),
                image_url="https://example.com/image.jpg",
                seller_id=test_user.id,
                created_at=datetime.now(timezone.utc),
                updated_at=datetime.now(timezone.utc),
                is_featured=i == 0,
            )
            for i in range(2)
        ]
        db_session.add_all(products)
        db_session.commit()
    
        # Test price filter
        response = client.get(
            "/api/v1/products/?min_price=100&max_price=100", headers=auth_headers
        )
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:247: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:04,846 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:04,847 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:04,847 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:04,847 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:04,847 - app.main - INFO - Startup complete
2025-07-10 03:06:04,847 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:04,850 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant e6823208
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant e6823208
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:04,854 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:04,873 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:04,873 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:04,874 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/?min_price=100&max_price=100 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/?min_price=100&max_price=100 "HTTP/1.1 403 Forbidden"
_____________________________ test_update_product ______________________________

client = <starlette.testclient.TestClient object at 0x147585990>
db_session = <sqlalchemy.orm.session.Session object at 0x14854ca10>
test_user = <app.models.user.User object at 0x14854f190>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ZDFhNzI5Yy0xMGM1LTQ0NWQtOTc4Yi1iMzRlNzQ0NjF...cGUiOiJhY2Nlc3MifQ.PfGYjbru7Us1GNKOOh7wr9E_M29xPWEBb_z1gbhrqpA', 'X-Tenant-ID': '2734b35b-9bda-4733-b027-a113672b8ba2'}
test_tenant = <app.models.tenant.Tenant object at 0x14854d110>

    def test_update_product(
        client: TestClient,
        db_session: Session,
        test_user: User,
        auth_headers: dict,
        test_tenant,
    ):
        """Test updating a product."""
        # Create a product
        product = Product(
            name="Test Product",
            description="Test Description",
            price=Decimal("99.99"),
            image_url="https://example.com/image.jpg",
            seller_id=test_user.id,
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc),
        )
        db_session.add(product)
        db_session.commit()
    
        # Update the product
        update_data = {
            "name": "Updated Product",
            "price": 149.99,  # Using float for JSON serialization
        }
        response = client.patch(
            f"/api/v1/products/{product.id}", json=update_data, headers=auth_headers
        )
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:282: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:04,972 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:04,973 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:04,973 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:04,973 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:04,973 - app.main - INFO - Startup complete
2025-07-10 03:06:04,974 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:04,975 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 2734b35b
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 2734b35b
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:04,979 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,000 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,000 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=PATCH, path=/api/v1/products/950c8bb1-144e-440e-bc83-a7e7c2660d4a
2025-07-10 03:06:05,001 - httpx - INFO - HTTP Request: PATCH http://testserver/api/v1/products/950c8bb1-144e-440e-bc83-a7e7c2660d4a "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=PATCH, path=/api/v1/products/950c8bb1-144e-440e-bc83-a7e7c2660d4a
INFO     httpx:_client.py:1027 HTTP Request: PATCH http://testserver/api/v1/products/950c8bb1-144e-440e-bc83-a7e7c2660d4a "HTTP/1.1 403 Forbidden"
_______________________ test_update_product_unauthorized _______________________

client = <starlette.testclient.TestClient object at 0x1482ef490>
db_session = <sqlalchemy.orm.session.Session object at 0x146df6c90>
test_user = <app.models.user.User object at 0x146a7e390>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyNDVhNzU1ZC05MWUxLTQ3YjItODMzMi0wNTcwYjQ0NGN...cGUiOiJhY2Nlc3MifQ.ktMCAsWaQ3LT-GdP3fZQyu4GUOfZT9NlfMlg_Fd29zo', 'X-Tenant-ID': '1c7a526e-0f8c-40ee-99ec-2ca427c0cf57'}
test_tenant = <app.models.tenant.Tenant object at 0x146df6c10>

    def test_update_product_unauthorized(
        client: TestClient,
        db_session: Session,
        test_user: User,
        auth_headers: dict,
        test_tenant,
    ):
        """Test updating a product with unauthorized user."""
        # Create a product owned by a different user
        # First, create a different user (with ID "00000000-0000-0000-0000-000000000002")
        other_user = User(email="otheruser@example.com", is_seller=True)
        db_session.add(other_user)
        db_session.commit()
    
        # If needed, set tenant_id after creation
        other_user.tenant_id = test_tenant.id
        db_session.commit()
    
        # Now create a product owned by this other user
        product = Product(
            name="Other User Product",
            description="This product belongs to the other user",
            price=Decimal("99.99"),
            image_url="https://example.com/image.jpg",
            seller_id=other_user.id,  # The other user owns this product
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc),
        )
    
        db_session.add(product)
        db_session.commit()
    
        # Now try to update with the main test user's token (not the owner)
        # This should fail with a 403 since the product belongs to other_user
        response = client.patch(
            f"/api/v1/products/{product.id}",
            json={
                "name": "Updated Product",
                "description": "This product belongs to the other user",
            },
            headers=auth_headers,  # Use the main test_user token to try to update other user's product
        )
    
        # Verify that the response matches what we expect from the permission check
        assert (
            response.status_code == 403
        ), f"Expected 403 but got {response.status_code}. Response: {response.text}"
>       assert (
            "Not authorized to update this product" in response.text
        ), f"Expected authorization error but got: {response.text}"
E       AssertionError: Expected authorization error but got: Invalid tenant ID: 1c7a526e-0f8c-40ee-99ec-2ca427c0cf57
E       assert 'Not authorized to update this product' in 'Invalid tenant ID: 1c7a526e-0f8c-40ee-99ec-2ca427c0cf57'
E        +  where 'Invalid tenant ID: 1c7a526e-0f8c-40ee-99ec-2ca427c0cf57' = <Response [403 Forbidden]>.text

tests/api/test_products.py:335: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:05,097 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:05,097 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:05,097 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:05,098 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:05,098 - app.main - INFO - Startup complete
2025-07-10 03:06:05,098 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:05,099 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 1c7a526e
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 1c7a526e
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:05,104 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,124 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,124 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=PATCH, path=/api/v1/products/b4f4e776-8264-4c7c-b20e-5d698bb19eda
2025-07-10 03:06:05,125 - httpx - INFO - HTTP Request: PATCH http://testserver/api/v1/products/b4f4e776-8264-4c7c-b20e-5d698bb19eda "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=PATCH, path=/api/v1/products/b4f4e776-8264-4c7c-b20e-5d698bb19eda
INFO     httpx:_client.py:1027 HTTP Request: PATCH http://testserver/api/v1/products/b4f4e776-8264-4c7c-b20e-5d698bb19eda "HTTP/1.1 403 Forbidden"
_____________________________ test_delete_product ______________________________

client = <starlette.testclient.TestClient object at 0x146be0290>
db_session = <sqlalchemy.orm.session.Session object at 0x14854f6d0>
test_user = <app.models.user.User object at 0x1476db8d0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhYTQ0YWE1ZS1jNDgxLTRkODMtODdmZS0yNTc2YTQ4OWM...cGUiOiJhY2Nlc3MifQ.8KpkMAfiQ-YYIHhtR3g3uQlLnH7i-1ooXVbu7lizVD4', 'X-Tenant-ID': '472b3153-0b17-4e5e-b415-8416ee704c1e'}
test_tenant = <app.models.tenant.Tenant object at 0x14854c490>

    def test_delete_product(
        client: TestClient,
        db_session: Session,
        test_user: User,
        auth_headers: dict,
        test_tenant,
    ):
        """Test deleting a product."""
        # Create a product with a consistent UUID
        product_id = uuid4()
        product = Product(
            id=product_id,  # Set a specific ID to avoid session issues
            name="Test Product",
            description="Test Description",
            price=Decimal("99.99"),
            image_url="https://example.com/image.jpg",
            seller_id=test_user.id,
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc),
        )
        db_session.add(product)
        db_session.commit()  # Actually commit this time
    
        # Delete the product
        response = client.delete(f"/api/v1/products/{product_id}", headers=auth_headers)
>       assert response.status_code == 204
E       assert 403 == 204
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:365: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:05,329 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:05,330 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:05,330 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:05,330 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:05,330 - app.main - INFO - Startup complete
2025-07-10 03:06:05,331 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:05,332 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 472b3153
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 472b3153
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:05,336 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,355 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,355 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/products/4bfae04b-4e28-4b83-b7ca-8487b616c3b9
2025-07-10 03:06:05,356 - httpx - INFO - HTTP Request: DELETE http://testserver/api/v1/products/4bfae04b-4e28-4b83-b7ca-8487b616c3b9 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/products/4bfae04b-4e28-4b83-b7ca-8487b616c3b9
INFO     httpx:_client.py:1027 HTTP Request: DELETE http://testserver/api/v1/products/4bfae04b-4e28-4b83-b7ca-8487b616c3b9 "HTTP/1.1 403 Forbidden"
_______________________ test_delete_product_unauthorized _______________________

client = <starlette.testclient.TestClient object at 0x147638f10>
db_session = <sqlalchemy.orm.session.Session object at 0x14862ded0>
test_user = <app.models.user.User object at 0x14862e490>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhYWExM2E4Ni1lNmQ2LTQzMWMtODYyMy1kMzUwZTJiZmJ...cGUiOiJhY2Nlc3MifQ.MDQp-SA4UzojvKAUFJGxnlToGGLTyUeT3CwxKpWgPZU', 'X-Tenant-ID': 'b75255ea-a1ef-407f-b5ba-9c6bb404dec2'}
test_tenant = <app.models.tenant.Tenant object at 0x14862e250>

    def test_delete_product_unauthorized(
        client: TestClient,
        db_session: Session,
        test_user: User,
        auth_headers: dict,
        test_tenant,
    ):
        """Test deleting a product with unauthorized user."""
        # Create a product owned by a different user
        # First, create a different user (with ID "00000000-0000-0000-0000-000000000002")
        other_user = User(email="otheruser@example.com", is_seller=True)
        # Check if user already exists
        existing_user = (
            db_session.query(User).filter(User.email == other_user.email).first()
        )
        if not existing_user:
            db_session.add(other_user)
            db_session.commit()
    
        # If needed, set tenant_id after creation
        other_user.tenant_id = test_tenant.id
        db_session.commit()
    
        # Now create a product owned by this other user
        product = Product(
            name="Other User Delete Product",
            description="This product belongs to the other user and should not be deletable",
            price=Decimal("99.99"),
            image_url="https://example.com/image.jpg",
            seller_id=other_user.id,  # The other user owns this product
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc),
        )
    
        db_session.add(product)
        db_session.commit()
    
        # Now try to delete with the main test user's token (not the owner)
        # This should fail with a 403 since the product belongs to other_user
        response = client.delete(
            f"/api/v1/products/{product.id}",
            headers=auth_headers,  # Use the main test_user token to try to delete other user's product
        )
    
        # Verify that the response matches what we expect from the permission check
        assert (
            response.status_code == 403
        ), f"Expected 403 but got {response.status_code}. Response: {response.text}"
>       assert (
            "Not authorized to delete this product" in response.text
        ), f"Expected authorization error but got: {response.text}"
E       AssertionError: Expected authorization error but got: Invalid tenant ID: b75255ea-a1ef-407f-b5ba-9c6bb404dec2
E       assert 'Not authorized to delete this product' in 'Invalid tenant ID: b75255ea-a1ef-407f-b5ba-9c6bb404dec2'
E        +  where 'Invalid tenant ID: b75255ea-a1ef-407f-b5ba-9c6bb404dec2' = <Response [403 Forbidden]>.text

tests/api/test_products.py:420: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:05,452 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:05,453 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:05,453 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:05,453 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:05,453 - app.main - INFO - Startup complete
2025-07-10 03:06:05,453 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:05,455 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant b75255ea
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant b75255ea
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:05,460 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,479 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,479 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/products/6a3d3bdc-6d37-4bf2-a516-2274711cbf5c
2025-07-10 03:06:05,480 - httpx - INFO - HTTP Request: DELETE http://testserver/api/v1/products/6a3d3bdc-6d37-4bf2-a516-2274711cbf5c "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/products/6a3d3bdc-6d37-4bf2-a516-2274711cbf5c
INFO     httpx:_client.py:1027 HTTP Request: DELETE http://testserver/api/v1/products/6a3d3bdc-6d37-4bf2-a516-2274711cbf5c "HTTP/1.1 403 Forbidden"
________________________ test_list_products_pagination _________________________

client = <starlette.testclient.TestClient object at 0x1485c31d0>
db_session = <sqlalchemy.orm.session.Session object at 0x1479a3110>
test_user = <app.models.user.User object at 0x146a001d0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwOWQ4NzQ2ZS0yMGQyLTRjODQtYWJlOS0wNjc3ZDI4MTk...cGUiOiJhY2Nlc3MifQ.nz19GgB06TxcATsGUtwYYfly7r0i-0IN75dQqSWjlWg', 'X-Tenant-ID': 'd0449a9d-959d-408e-9551-de6a073f8a89'}
test_tenant = <app.models.tenant.Tenant object at 0x1479a3610>

    def test_list_products_pagination(
        client: TestClient,
        db_session: Session,
        test_user: User,
        auth_headers: dict,
        test_tenant,
    ):
        """Test product listing pagination."""
        # Create test products
        products = [
            Product(
                name=f"Test Product {i}",
                description="Test Description",
                price=Decimal("99.99"),
                image_url="https://example.com/image.jpg",
                seller_id=test_user.id,
                created_at=datetime.now(timezone.utc),
                updated_at=datetime.now(timezone.utc),
            )
            for i in range(15)
        ]
        db_session.add_all(products)
        db_session.commit()
    
        # Test first page
        response = client.get("/api/v1/products/?limit=10&offset=0", headers=auth_headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:492: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:05,577 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:05,578 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:05,578 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:05,578 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:05,578 - app.main - INFO - Startup complete
2025-07-10 03:06:05,579 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:05,580 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant d0449a9d
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant d0449a9d
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:05,585 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,605 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,605 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:05,605 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/?limit=10&offset=0 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/?limit=10&offset=0 "HTTP/1.1 403 Forbidden"
__________________________ test_list_products_filters __________________________

client = <starlette.testclient.TestClient object at 0x14760d150>
db_session = <sqlalchemy.orm.session.Session object at 0x148284290>
test_user = <app.models.user.User object at 0x148285f90>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMmU1MTY1Yy1jOGZmLTQ4YWQtOGI3MS1jMTA5MjU3MDc...cGUiOiJhY2Nlc3MifQ.6gTUPYsgYe04ZqDSIgtmvbO1XTL9-eKELi3Co61X68s', 'X-Tenant-ID': '26076be4-9de0-4462-9c71-c8d2fcab5790'}
test_tenant = <app.models.tenant.Tenant object at 0x148286810>

    def test_list_products_filters(
        client: TestClient,
        db_session: Session,
        test_user: User,
        auth_headers: dict,
        test_tenant,
    ):
        """Test product listing with various filters."""
        # Create test products
        products = [
            Product(
                name=f"Test Product {i}",
                description="Test Description",
                price=Decimal("100.00"),
                image_url="https://example.com/image.jpg",
                seller_id=test_user.id,
                created_at=datetime.now(timezone.utc),
                updated_at=datetime.now(timezone.utc),
                is_featured=i == 0,
                show_on_storefront=i == 0,
            )
            for i in range(2)
        ]
        db_session.add_all(products)
        db_session.commit()
    
        # Test featured filter
        response = client.get("/api/v1/products/?featured=true", headers=auth_headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:537: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:05,807 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:05,808 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:05,808 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:05,808 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:05,808 - app.main - INFO - Startup complete
2025-07-10 03:06:05,808 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:05,809 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 26076be4
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 26076be4
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:05,813 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,834 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,834 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:05,834 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/?featured=true "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/?featured=true "HTTP/1.1 403 Forbidden"
_______________________________ test_soft_delete _______________________________

client = <starlette.testclient.TestClient object at 0x147e91350>
db_session = <sqlalchemy.orm.session.Session object at 0x1473e6510>
test_user = <app.models.user.User object at 0x14824fad0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMzQ1NGUwYS0wZjY0LTRiYTMtOTQ5ZS1jZjhlMmQ5NjE...cGUiOiJhY2Nlc3MifQ.SUBQs_LTCircnwmEi5CwSCuE2XKQ1WyUbi11mC5SqQQ', 'X-Tenant-ID': 'a04b9b14-776b-4ca8-aa43-48b7619ed4dd'}
test_tenant = <app.models.tenant.Tenant object at 0x1473e6c50>

    def test_soft_delete(
        client: TestClient,
        db_session: Session,
        test_user: User,
        auth_headers: dict,
        test_tenant,
    ):
        """Test soft delete functionality."""
        # Create a product
        product = Product(
            name="Test Product",
            description="Test Description",
            price=Decimal("99.99"),
            image_url="https://example.com/image.jpg",
            seller_id=test_user.id,
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc),
        )
        db_session.add(product)
        db_session.commit()
    
        # Get product ID before potential session detachment
        product_id = str(product.id)
        db_session.refresh(product)  # Ensure it's attached to the session
    
        # Soft delete the product
        response = client.delete(
            f"/api/v1/products/{product_id}?soft=true", headers=auth_headers
        )
>       assert response.status_code == 204
E       assert 403 == 204
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:572: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:05,930 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:05,931 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:05,931 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:05,931 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:05,931 - app.main - INFO - Startup complete
2025-07-10 03:06:05,932 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:05,933 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant a04b9b14
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant a04b9b14
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:05,936 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:05,956 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:05,956 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/products/3320138f-7e22-46b3-961d-49bd1ff8f60f
2025-07-10 03:06:05,956 - httpx - INFO - HTTP Request: DELETE http://testserver/api/v1/products/3320138f-7e22-46b3-961d-49bd1ff8f60f?soft=true "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=DELETE, path=/api/v1/products/3320138f-7e22-46b3-961d-49bd1ff8f60f
INFO     httpx:_client.py:1027 HTTP Request: DELETE http://testserver/api/v1/products/3320138f-7e22-46b3-961d-49bd1ff8f60f?soft=true "HTTP/1.1 403 Forbidden"
______________________________ test_rate_limiting ______________________________

client = <starlette.testclient.TestClient object at 0x14815a390>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ZDg2Mzc2MC1hYTQxLTRlNDctYjk4MS1jZjgzNTVkM2I...cGUiOiJhY2Nlc3MifQ.91GwAqZDI9UqZHYFCkK0axr0IOjWA1QIOh1Bamue4go', 'X-Tenant-ID': '7705ec79-d6a8-4533-8169-0f49ea8a4223'}

    def test_rate_limiting(client: TestClient, auth_headers: dict):
        """Test rate limiting."""
        # Make multiple requests quickly
        for _ in range(6):  # Should hit the rate limit
            response = client.get("/api/v1/products/", headers=auth_headers)
    
        # The last request should be rate limited
>       assert response.status_code == 429
E       assert 403 == 429
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:592: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:06,159 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:06,160 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:06,160 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:06,160 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:06,160 - app.main - INFO - Startup complete
2025-07-10 03:06:06,160 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:06,162 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 7705ec79
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 7705ec79
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:06,164 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,184 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,184 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:06,184 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
2025-07-10 03:06:06,185 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,203 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,203 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:06,203 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
2025-07-10 03:06:06,204 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,220 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,220 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:06,221 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
2025-07-10 03:06:06,221 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,237 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,237 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:06,238 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
2025-07-10 03:06:06,238 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,252 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,252 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:06,253 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
2025-07-10 03:06:06,253 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,263 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,263 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
2025-07-10 03:06:06,264 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/ "HTTP/1.1 403 Forbidden"
_____________________ test_create_product_with_all_fields ______________________

client = <starlette.testclient.TestClient object at 0x1473e3c90>
db_session = <sqlalchemy.orm.session.Session object at 0x1470eb550>
test_user = <app.models.user.User object at 0x1470eb310>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhODliNDQxMS03ZjVhLTQyMDgtYmJkNC1kZTA3NWYyMmM...cGUiOiJhY2Nlc3MifQ.Elx5WaE3abGb2oov451H1I60FQxSkuLJDfiMm1R9k_I', 'X-Tenant-ID': '799fca90-9f6d-4698-a52b-071db746edff'}
test_tenant = <app.models.tenant.Tenant object at 0x1470eb3d0>

    def test_create_product_with_all_fields(
        client: TestClient,
        db_session: Session,
        test_user: User,
        auth_headers: dict,
        test_tenant,
    ):
        """Test creating a product with all required fields."""
        # Create a product with all required fields
        product = Product(
            name="Test Product",
            description="Test product for products API",
            price=10.0,
            seller_id=test_user.id,
        )
        db_session.add(product)
        db_session.commit()
    
        # Get the product
        response = client.get(f"/api/v1/products/{product.id}", headers=auth_headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products.py:615: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:06,359 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:06,360 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:06,360 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:06,360 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:06,360 - app.main - INFO - Startup complete
2025-07-10 03:06:06,360 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:06,362 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 799fca90
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 799fca90
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:06,364 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,384 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,384 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/4bd75ddd-b823-4a97-a66b-e9984dc4f9b3
2025-07-10 03:06:06,384 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products/4bd75ddd-b823-4a97-a66b-e9984dc4f9b3 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products/4bd75ddd-b823-4a97-a66b-e9984dc4f9b3
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products/4bd75ddd-b823-4a97-a66b-e9984dc4f9b3 "HTTP/1.1 403 Forbidden"
___________ test_create_product_validation_cases[product_data0-201] ____________

client = <starlette.testclient.TestClient object at 0x147422190>
db_session = <sqlalchemy.orm.session.Session object at 0x147cef310>
test_user = <app.models.user.User object at 0x148046290>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2YTE4NzdlOS0wZGE5LTQyMGItOGY1YS05NjUwM2JiM2I...cGUiOiJhY2Nlc3MifQ.LEo9wPdlcDUqSC8HwQJfMZwmoLslfhTtmBnnp9M-d9A', 'X-Tenant-ID': '363c1a44-8ccd-45f3-b2a0-dfba7f6e7ecd'}
product_data = {'description': 'Description', 'name': 'Valid Product', 'price': 99.99}
expected_status = 201
test_tenant = <app.models.tenant.Tenant object at 0x147cef890>

    @pytest.mark.parametrize(
        "product_data, expected_status",
        [
            ({"name": "Valid Product", "description": "Description", "price": 99.99}, 201),
            ({"name": "", "description": "Description", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "Description", "price": -1}, 422),
            ({"name": "Valid Product", "description": "Description", "price": 0}, 422),
            (
                {
                    "name": "Valid Product" * 50,
                    "description": "Description",
                    "price": 99.99,
                },
                422,
            ),  # Name too long
            (
                {
                    "name": "Valid Product",
                    "description": "Description" * 200,
                    "price": 99.99,
                },
                422,
            ),  # Description too long
        ],
    )
    def test_create_product_validation_cases(
        client,
        db_session,
        test_user,
        auth_headers,
        product_data,
        expected_status,
        test_tenant,
    ):
        """
        Test product creation with different input data scenarios.
        Uses parameterized testing to cover multiple validation cases efficiently.
        """
        # Debug logging to diagnose 403 errors
        print(f"\n--- TEST DEBUG INFO ---")
        print(f"test_user: {test_user.id} (is_seller: {test_user.is_seller})")
        print(f"test_tenant: {test_tenant.id}")
        print(f"auth_headers: {auth_headers}")
    
        # Print database row count to verify database state
        import logging
        logger = logging.getLogger(__name__)
        logger.debug(f"User count: {db_session.query(User).count()}")
        logger.debug(f"Tenant count: {db_session.query(User).count()}")
    
        # Add seller_id to product_data
        modified_product_data = product_data.copy()
        modified_product_data['seller_id'] = str(test_user.id)
        modified_product_data['tenant_id'] = str(test_tenant.id)
        print(f"Product data with seller_id: {modified_product_data}")
    
        response = client.post("/api/v1/products", headers=auth_headers, json=modified_product_data)
    
        # Log response content for debugging
        print(f"Response status code: {response.status_code}")
        print(f"Response content: {response.content}")
        print(f"Response headers: {response.headers}")
        print("--- END TEST DEBUG INFO ---\n")
    
>       assert response.status_code == expected_status
E       assert 403 == 201
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:74: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:06,592 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:06,593 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:06,593 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:06,593 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:06,593 - app.main - INFO - Startup complete
2025-07-10 03:06:06,593 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:06,595 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 363c1a44
2025-07-10 03:06:06,595 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:06,596 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 6a1877e9
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 363c1a44
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 6a1877e9
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: 6a1877e9-0da9-420b-8f5a-96503bb3b1d6 (is_seller: True)
test_tenant: 363c1a44-8ccd-45f3-b2a0-dfba7f6e7ecd
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2YTE4NzdlOS0wZGE5LTQyMGItOGY1YS05NjUwM2JiM2IxZDYiLCJ0ZW5hbnRfaWQiOiIzNjNjMWE0NC04Y2NkLTQ1ZjMtYjJhMC1kZmJhN2Y2ZTdlY2QiLCJleHAiOjE3NTIxNDE5NjYsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.LEo9wPdlcDUqSC8HwQJfMZwmoLslfhTtmBnnp9M-d9A', 'X-Tenant-ID': '363c1a44-8ccd-45f3-b2a0-dfba7f6e7ecd'}
Product data with seller_id: {'name': 'Valid Product', 'description': 'Description', 'price': 99.99, 'seller_id': '6a1877e9-0da9-420b-8f5a-96503bb3b1d6', 'tenant_id': '363c1a44-8ccd-45f3-b2a0-dfba7f6e7ecd'}
2025-07-10 03:06:06,599 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,619 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,619 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:06,620 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: 363c1a44-8ccd-45f3-b2a0-dfba7f6e7ecd'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.019377946853637695'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
___________ test_create_product_validation_cases[product_data1-422] ____________

client = <starlette.testclient.TestClient object at 0x1470e99d0>
db_session = <sqlalchemy.orm.session.Session object at 0x147738190>
test_user = <app.models.user.User object at 0x147ab7cd0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiMzM4NWZiZi0zOTk0LTQyZGEtODM4YS1mMzhmZjNhZTk...cGUiOiJhY2Nlc3MifQ.GWYkrST4V7Vz7hmsxnaXrboXI8cwhA95AqG6uDI8QRM', 'X-Tenant-ID': 'b4eba768-ab5c-4755-b6f1-5640e075b845'}
product_data = {'description': 'Description', 'name': '', 'price': 99.99}
expected_status = 422
test_tenant = <app.models.tenant.Tenant object at 0x14773a450>

    @pytest.mark.parametrize(
        "product_data, expected_status",
        [
            ({"name": "Valid Product", "description": "Description", "price": 99.99}, 201),
            ({"name": "", "description": "Description", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "Description", "price": -1}, 422),
            ({"name": "Valid Product", "description": "Description", "price": 0}, 422),
            (
                {
                    "name": "Valid Product" * 50,
                    "description": "Description",
                    "price": 99.99,
                },
                422,
            ),  # Name too long
            (
                {
                    "name": "Valid Product",
                    "description": "Description" * 200,
                    "price": 99.99,
                },
                422,
            ),  # Description too long
        ],
    )
    def test_create_product_validation_cases(
        client,
        db_session,
        test_user,
        auth_headers,
        product_data,
        expected_status,
        test_tenant,
    ):
        """
        Test product creation with different input data scenarios.
        Uses parameterized testing to cover multiple validation cases efficiently.
        """
        # Debug logging to diagnose 403 errors
        print(f"\n--- TEST DEBUG INFO ---")
        print(f"test_user: {test_user.id} (is_seller: {test_user.is_seller})")
        print(f"test_tenant: {test_tenant.id}")
        print(f"auth_headers: {auth_headers}")
    
        # Print database row count to verify database state
        import logging
        logger = logging.getLogger(__name__)
        logger.debug(f"User count: {db_session.query(User).count()}")
        logger.debug(f"Tenant count: {db_session.query(User).count()}")
    
        # Add seller_id to product_data
        modified_product_data = product_data.copy()
        modified_product_data['seller_id'] = str(test_user.id)
        modified_product_data['tenant_id'] = str(test_tenant.id)
        print(f"Product data with seller_id: {modified_product_data}")
    
        response = client.post("/api/v1/products", headers=auth_headers, json=modified_product_data)
    
        # Log response content for debugging
        print(f"Response status code: {response.status_code}")
        print(f"Response content: {response.content}")
        print(f"Response headers: {response.headers}")
        print("--- END TEST DEBUG INFO ---\n")
    
>       assert response.status_code == expected_status
E       assert 403 == 422
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:74: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:06,712 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:06,712 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:06,713 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:06,713 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:06,713 - app.main - INFO - Startup complete
2025-07-10 03:06:06,713 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:06,714 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant b4eba768
2025-07-10 03:06:06,714 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:06,715 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user b3385fbf
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant b4eba768
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user b3385fbf
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: b3385fbf-3994-42da-838a-f38ff3ae905c (is_seller: True)
test_tenant: b4eba768-ab5c-4755-b6f1-5640e075b845
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiMzM4NWZiZi0zOTk0LTQyZGEtODM4YS1mMzhmZjNhZTkwNWMiLCJ0ZW5hbnRfaWQiOiJiNGViYTc2OC1hYjVjLTQ3NTUtYjZmMS01NjQwZTA3NWI4NDUiLCJleHAiOjE3NTIxNDE5NjYsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.GWYkrST4V7Vz7hmsxnaXrboXI8cwhA95AqG6uDI8QRM', 'X-Tenant-ID': 'b4eba768-ab5c-4755-b6f1-5640e075b845'}
Product data with seller_id: {'name': '', 'description': 'Description', 'price': 99.99, 'seller_id': 'b3385fbf-3994-42da-838a-f38ff3ae905c', 'tenant_id': 'b4eba768-ab5c-4755-b6f1-5640e075b845'}
2025-07-10 03:06:06,716 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,736 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,736 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:06,737 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: b4eba768-ab5c-4755-b6f1-5640e075b845'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.018923044204711914'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
___________ test_create_product_validation_cases[product_data2-422] ____________

client = <starlette.testclient.TestClient object at 0x147b25f90>
db_session = <sqlalchemy.orm.session.Session object at 0x147a3fe10>
test_user = <app.models.user.User object at 0x147a3e590>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzOTUwZWY2OC02YjMwLTQ2NWMtOGNiNS0xOTIwNmI0YTA...cGUiOiJhY2Nlc3MifQ.GnHpx-3jinhe5D_FADefEffcYBUlno_oI-9d-b2AbbA', 'X-Tenant-ID': '81a06c29-9b4c-4874-b309-2a7e52a04be0'}
product_data = {'description': '', 'name': 'Valid Product', 'price': 99.99}
expected_status = 422
test_tenant = <app.models.tenant.Tenant object at 0x147a3da50>

    @pytest.mark.parametrize(
        "product_data, expected_status",
        [
            ({"name": "Valid Product", "description": "Description", "price": 99.99}, 201),
            ({"name": "", "description": "Description", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "Description", "price": -1}, 422),
            ({"name": "Valid Product", "description": "Description", "price": 0}, 422),
            (
                {
                    "name": "Valid Product" * 50,
                    "description": "Description",
                    "price": 99.99,
                },
                422,
            ),  # Name too long
            (
                {
                    "name": "Valid Product",
                    "description": "Description" * 200,
                    "price": 99.99,
                },
                422,
            ),  # Description too long
        ],
    )
    def test_create_product_validation_cases(
        client,
        db_session,
        test_user,
        auth_headers,
        product_data,
        expected_status,
        test_tenant,
    ):
        """
        Test product creation with different input data scenarios.
        Uses parameterized testing to cover multiple validation cases efficiently.
        """
        # Debug logging to diagnose 403 errors
        print(f"\n--- TEST DEBUG INFO ---")
        print(f"test_user: {test_user.id} (is_seller: {test_user.is_seller})")
        print(f"test_tenant: {test_tenant.id}")
        print(f"auth_headers: {auth_headers}")
    
        # Print database row count to verify database state
        import logging
        logger = logging.getLogger(__name__)
        logger.debug(f"User count: {db_session.query(User).count()}")
        logger.debug(f"Tenant count: {db_session.query(User).count()}")
    
        # Add seller_id to product_data
        modified_product_data = product_data.copy()
        modified_product_data['seller_id'] = str(test_user.id)
        modified_product_data['tenant_id'] = str(test_tenant.id)
        print(f"Product data with seller_id: {modified_product_data}")
    
        response = client.post("/api/v1/products", headers=auth_headers, json=modified_product_data)
    
        # Log response content for debugging
        print(f"Response status code: {response.status_code}")
        print(f"Response content: {response.content}")
        print(f"Response headers: {response.headers}")
        print("--- END TEST DEBUG INFO ---\n")
    
>       assert response.status_code == expected_status
E       assert 403 == 422
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:74: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:06,829 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:06,830 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:06,830 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:06,830 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:06,830 - app.main - INFO - Startup complete
2025-07-10 03:06:06,831 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:06,832 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 81a06c29
2025-07-10 03:06:06,832 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:06,833 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 3950ef68
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 81a06c29
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 3950ef68
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: 3950ef68-6b30-465c-8cb5-19206b4a016c (is_seller: True)
test_tenant: 81a06c29-9b4c-4874-b309-2a7e52a04be0
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzOTUwZWY2OC02YjMwLTQ2NWMtOGNiNS0xOTIwNmI0YTAxNmMiLCJ0ZW5hbnRfaWQiOiI4MWEwNmMyOS05YjRjLTQ4NzQtYjMwOS0yYTdlNTJhMDRiZTAiLCJleHAiOjE3NTIxNDE5NjYsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.GnHpx-3jinhe5D_FADefEffcYBUlno_oI-9d-b2AbbA', 'X-Tenant-ID': '81a06c29-9b4c-4874-b309-2a7e52a04be0'}
Product data with seller_id: {'name': 'Valid Product', 'description': '', 'price': 99.99, 'seller_id': '3950ef68-6b30-465c-8cb5-19206b4a016c', 'tenant_id': '81a06c29-9b4c-4874-b309-2a7e52a04be0'}
2025-07-10 03:06:06,834 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:06,855 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:06,855 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:06,855 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: 81a06c29-9b4c-4874-b309-2a7e52a04be0'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.019840002059936523'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
___________ test_create_product_validation_cases[product_data3-422] ____________

client = <starlette.testclient.TestClient object at 0x147efcf50>
db_session = <sqlalchemy.orm.session.Session object at 0x147ea9850>
test_user = <app.models.user.User object at 0x147ea8810>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkNDYxOTcwZC1lODkxLTRkNDItOTkyOC1kMTQ5NzliMWU...cGUiOiJhY2Nlc3MifQ.JKUbFL3O4PpaYC6JEqER7_WBKW187QEvAnt-5YxfI2U', 'X-Tenant-ID': '73f84f7f-8458-4de0-bde9-dae0ac0f6765'}
product_data = {'description': 'Description', 'name': 'Valid Product', 'price': -1}
expected_status = 422
test_tenant = <app.models.tenant.Tenant object at 0x147ea9a10>

    @pytest.mark.parametrize(
        "product_data, expected_status",
        [
            ({"name": "Valid Product", "description": "Description", "price": 99.99}, 201),
            ({"name": "", "description": "Description", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "Description", "price": -1}, 422),
            ({"name": "Valid Product", "description": "Description", "price": 0}, 422),
            (
                {
                    "name": "Valid Product" * 50,
                    "description": "Description",
                    "price": 99.99,
                },
                422,
            ),  # Name too long
            (
                {
                    "name": "Valid Product",
                    "description": "Description" * 200,
                    "price": 99.99,
                },
                422,
            ),  # Description too long
        ],
    )
    def test_create_product_validation_cases(
        client,
        db_session,
        test_user,
        auth_headers,
        product_data,
        expected_status,
        test_tenant,
    ):
        """
        Test product creation with different input data scenarios.
        Uses parameterized testing to cover multiple validation cases efficiently.
        """
        # Debug logging to diagnose 403 errors
        print(f"\n--- TEST DEBUG INFO ---")
        print(f"test_user: {test_user.id} (is_seller: {test_user.is_seller})")
        print(f"test_tenant: {test_tenant.id}")
        print(f"auth_headers: {auth_headers}")
    
        # Print database row count to verify database state
        import logging
        logger = logging.getLogger(__name__)
        logger.debug(f"User count: {db_session.query(User).count()}")
        logger.debug(f"Tenant count: {db_session.query(User).count()}")
    
        # Add seller_id to product_data
        modified_product_data = product_data.copy()
        modified_product_data['seller_id'] = str(test_user.id)
        modified_product_data['tenant_id'] = str(test_tenant.id)
        print(f"Product data with seller_id: {modified_product_data}")
    
        response = client.post("/api/v1/products", headers=auth_headers, json=modified_product_data)
    
        # Log response content for debugging
        print(f"Response status code: {response.status_code}")
        print(f"Response content: {response.content}")
        print(f"Response headers: {response.headers}")
        print("--- END TEST DEBUG INFO ---\n")
    
>       assert response.status_code == expected_status
E       assert 403 == 422
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:74: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:07,057 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:07,058 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:07,058 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:07,058 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:07,058 - app.main - INFO - Startup complete
2025-07-10 03:06:07,059 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:07,060 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 73f84f7f
2025-07-10 03:06:07,060 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:07,061 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user d461970d
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 73f84f7f
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user d461970d
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: d461970d-e891-4d42-9928-d14979b1e6f5 (is_seller: True)
test_tenant: 73f84f7f-8458-4de0-bde9-dae0ac0f6765
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkNDYxOTcwZC1lODkxLTRkNDItOTkyOC1kMTQ5NzliMWU2ZjUiLCJ0ZW5hbnRfaWQiOiI3M2Y4NGY3Zi04NDU4LTRkZTAtYmRlOS1kYWUwYWMwZjY3NjUiLCJleHAiOjE3NTIxNDE5NjcsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.JKUbFL3O4PpaYC6JEqER7_WBKW187QEvAnt-5YxfI2U', 'X-Tenant-ID': '73f84f7f-8458-4de0-bde9-dae0ac0f6765'}
Product data with seller_id: {'name': 'Valid Product', 'description': 'Description', 'price': -1, 'seller_id': 'd461970d-e891-4d42-9928-d14979b1e6f5', 'tenant_id': '73f84f7f-8458-4de0-bde9-dae0ac0f6765'}
2025-07-10 03:06:07,063 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:07,083 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:07,083 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:07,083 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: 73f84f7f-8458-4de0-bde9-dae0ac0f6765'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.01989889144897461'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
___________ test_create_product_validation_cases[product_data4-422] ____________

client = <starlette.testclient.TestClient object at 0x1473805d0>
db_session = <sqlalchemy.orm.session.Session object at 0x147f11650>
test_user = <app.models.user.User object at 0x147f12190>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2YzE5YTUyNC0xYzU2LTQ4ZmMtYmY3NS1jNTg0NTQ3Mjc...cGUiOiJhY2Nlc3MifQ.lJ4N45HrKaGl4-kX0kFWYi0XVUVBFAW52VKoorOtON8', 'X-Tenant-ID': '96950fc8-013e-4de8-8d20-7681da2f618f'}
product_data = {'description': 'Description', 'name': 'Valid Product', 'price': 0}
expected_status = 422
test_tenant = <app.models.tenant.Tenant object at 0x147f11e50>

    @pytest.mark.parametrize(
        "product_data, expected_status",
        [
            ({"name": "Valid Product", "description": "Description", "price": 99.99}, 201),
            ({"name": "", "description": "Description", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "Description", "price": -1}, 422),
            ({"name": "Valid Product", "description": "Description", "price": 0}, 422),
            (
                {
                    "name": "Valid Product" * 50,
                    "description": "Description",
                    "price": 99.99,
                },
                422,
            ),  # Name too long
            (
                {
                    "name": "Valid Product",
                    "description": "Description" * 200,
                    "price": 99.99,
                },
                422,
            ),  # Description too long
        ],
    )
    def test_create_product_validation_cases(
        client,
        db_session,
        test_user,
        auth_headers,
        product_data,
        expected_status,
        test_tenant,
    ):
        """
        Test product creation with different input data scenarios.
        Uses parameterized testing to cover multiple validation cases efficiently.
        """
        # Debug logging to diagnose 403 errors
        print(f"\n--- TEST DEBUG INFO ---")
        print(f"test_user: {test_user.id} (is_seller: {test_user.is_seller})")
        print(f"test_tenant: {test_tenant.id}")
        print(f"auth_headers: {auth_headers}")
    
        # Print database row count to verify database state
        import logging
        logger = logging.getLogger(__name__)
        logger.debug(f"User count: {db_session.query(User).count()}")
        logger.debug(f"Tenant count: {db_session.query(User).count()}")
    
        # Add seller_id to product_data
        modified_product_data = product_data.copy()
        modified_product_data['seller_id'] = str(test_user.id)
        modified_product_data['tenant_id'] = str(test_tenant.id)
        print(f"Product data with seller_id: {modified_product_data}")
    
        response = client.post("/api/v1/products", headers=auth_headers, json=modified_product_data)
    
        # Log response content for debugging
        print(f"Response status code: {response.status_code}")
        print(f"Response content: {response.content}")
        print(f"Response headers: {response.headers}")
        print("--- END TEST DEBUG INFO ---\n")
    
>       assert response.status_code == expected_status
E       assert 403 == 422
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:74: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:07,177 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:07,178 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:07,178 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:07,178 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:07,178 - app.main - INFO - Startup complete
2025-07-10 03:06:07,178 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:07,179 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 96950fc8
2025-07-10 03:06:07,179 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:07,180 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 6c19a524
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 96950fc8
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 6c19a524
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: 6c19a524-1c56-48fc-bf75-c584547279f1 (is_seller: True)
test_tenant: 96950fc8-013e-4de8-8d20-7681da2f618f
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2YzE5YTUyNC0xYzU2LTQ4ZmMtYmY3NS1jNTg0NTQ3Mjc5ZjEiLCJ0ZW5hbnRfaWQiOiI5Njk1MGZjOC0wMTNlLTRkZTgtOGQyMC03NjgxZGEyZjYxOGYiLCJleHAiOjE3NTIxNDE5NjcsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.lJ4N45HrKaGl4-kX0kFWYi0XVUVBFAW52VKoorOtON8', 'X-Tenant-ID': '96950fc8-013e-4de8-8d20-7681da2f618f'}
Product data with seller_id: {'name': 'Valid Product', 'description': 'Description', 'price': 0, 'seller_id': '6c19a524-1c56-48fc-bf75-c584547279f1', 'tenant_id': '96950fc8-013e-4de8-8d20-7681da2f618f'}
2025-07-10 03:06:07,181 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:07,200 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:07,200 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:07,201 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: 96950fc8-013e-4de8-8d20-7681da2f618f'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.018360137939453125'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
___________ test_create_product_validation_cases[product_data5-422] ____________

client = <starlette.testclient.TestClient object at 0x14743ab90>
db_session = <sqlalchemy.orm.session.Session object at 0x147587050>
test_user = <app.models.user.User object at 0x147584410>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwMTQ4ZGY4OC1iNmYxLTQ0ODItYjJkYy1iNDRjZDIxYzk...cGUiOiJhY2Nlc3MifQ.6Df9NRdXf5OKVc-r1QOq5Ue0Ub9zQrZY_0jjD5GG-NM', 'X-Tenant-ID': 'c97a588f-2bfc-48e1-8941-346055261366'}
product_data = {'description': 'Description', 'name': 'Valid ProductValid ProductValid ProductValid ProductValid ProductValid Product...id ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid Product', 'price': 99.99}
expected_status = 422
test_tenant = <app.models.tenant.Tenant object at 0x1475860d0>

    @pytest.mark.parametrize(
        "product_data, expected_status",
        [
            ({"name": "Valid Product", "description": "Description", "price": 99.99}, 201),
            ({"name": "", "description": "Description", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "Description", "price": -1}, 422),
            ({"name": "Valid Product", "description": "Description", "price": 0}, 422),
            (
                {
                    "name": "Valid Product" * 50,
                    "description": "Description",
                    "price": 99.99,
                },
                422,
            ),  # Name too long
            (
                {
                    "name": "Valid Product",
                    "description": "Description" * 200,
                    "price": 99.99,
                },
                422,
            ),  # Description too long
        ],
    )
    def test_create_product_validation_cases(
        client,
        db_session,
        test_user,
        auth_headers,
        product_data,
        expected_status,
        test_tenant,
    ):
        """
        Test product creation with different input data scenarios.
        Uses parameterized testing to cover multiple validation cases efficiently.
        """
        # Debug logging to diagnose 403 errors
        print(f"\n--- TEST DEBUG INFO ---")
        print(f"test_user: {test_user.id} (is_seller: {test_user.is_seller})")
        print(f"test_tenant: {test_tenant.id}")
        print(f"auth_headers: {auth_headers}")
    
        # Print database row count to verify database state
        import logging
        logger = logging.getLogger(__name__)
        logger.debug(f"User count: {db_session.query(User).count()}")
        logger.debug(f"Tenant count: {db_session.query(User).count()}")
    
        # Add seller_id to product_data
        modified_product_data = product_data.copy()
        modified_product_data['seller_id'] = str(test_user.id)
        modified_product_data['tenant_id'] = str(test_tenant.id)
        print(f"Product data with seller_id: {modified_product_data}")
    
        response = client.post("/api/v1/products", headers=auth_headers, json=modified_product_data)
    
        # Log response content for debugging
        print(f"Response status code: {response.status_code}")
        print(f"Response content: {response.content}")
        print(f"Response headers: {response.headers}")
        print("--- END TEST DEBUG INFO ---\n")
    
>       assert response.status_code == expected_status
E       assert 403 == 422
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:74: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:07,294 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:07,295 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:07,295 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:07,295 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:07,295 - app.main - INFO - Startup complete
2025-07-10 03:06:07,295 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:07,296 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant c97a588f
2025-07-10 03:06:07,296 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:07,297 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 0148df88
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant c97a588f
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 0148df88
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: 0148df88-b6f1-4482-b2dc-b44cd21c9301 (is_seller: True)
test_tenant: c97a588f-2bfc-48e1-8941-346055261366
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwMTQ4ZGY4OC1iNmYxLTQ0ODItYjJkYy1iNDRjZDIxYzkzMDEiLCJ0ZW5hbnRfaWQiOiJjOTdhNTg4Zi0yYmZjLTQ4ZTEtODk0MS0zNDYwNTUyNjEzNjYiLCJleHAiOjE3NTIxNDE5NjcsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.6Df9NRdXf5OKVc-r1QOq5Ue0Ub9zQrZY_0jjD5GG-NM', 'X-Tenant-ID': 'c97a588f-2bfc-48e1-8941-346055261366'}
Product data with seller_id: {'name': 'Valid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid ProductValid Product', 'description': 'Description', 'price': 99.99, 'seller_id': '0148df88-b6f1-4482-b2dc-b44cd21c9301', 'tenant_id': 'c97a588f-2bfc-48e1-8941-346055261366'}
2025-07-10 03:06:07,299 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:07,317 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:07,317 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:07,318 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: c97a588f-2bfc-48e1-8941-346055261366'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.01799607276916504'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
___________ test_create_product_validation_cases[product_data6-422] ____________

client = <starlette.testclient.TestClient object at 0x1474217d0>
db_session = <sqlalchemy.orm.session.Session object at 0x14763a790>
test_user = <app.models.user.User object at 0x1476389d0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmN2FjZmUwYy02YjE3LTQ3NWUtOWI2MS0yMDlkMzViM2Y...cGUiOiJhY2Nlc3MifQ.pE87hzKH_S4POgzPYBjSDTtJBO_xgT1a2ZoNKl2Ts9c', 'X-Tenant-ID': '2cf356c5-2ce6-4546-9696-29e512601aae'}
product_data = {'description': 'DescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDe...escriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescription', 'name': 'Valid Product', 'price': 99.99}
expected_status = 422
test_tenant = <app.models.tenant.Tenant object at 0x147639fd0>

    @pytest.mark.parametrize(
        "product_data, expected_status",
        [
            ({"name": "Valid Product", "description": "Description", "price": 99.99}, 201),
            ({"name": "", "description": "Description", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "", "price": 99.99}, 422),
            ({"name": "Valid Product", "description": "Description", "price": -1}, 422),
            ({"name": "Valid Product", "description": "Description", "price": 0}, 422),
            (
                {
                    "name": "Valid Product" * 50,
                    "description": "Description",
                    "price": 99.99,
                },
                422,
            ),  # Name too long
            (
                {
                    "name": "Valid Product",
                    "description": "Description" * 200,
                    "price": 99.99,
                },
                422,
            ),  # Description too long
        ],
    )
    def test_create_product_validation_cases(
        client,
        db_session,
        test_user,
        auth_headers,
        product_data,
        expected_status,
        test_tenant,
    ):
        """
        Test product creation with different input data scenarios.
        Uses parameterized testing to cover multiple validation cases efficiently.
        """
        # Debug logging to diagnose 403 errors
        print(f"\n--- TEST DEBUG INFO ---")
        print(f"test_user: {test_user.id} (is_seller: {test_user.is_seller})")
        print(f"test_tenant: {test_tenant.id}")
        print(f"auth_headers: {auth_headers}")
    
        # Print database row count to verify database state
        import logging
        logger = logging.getLogger(__name__)
        logger.debug(f"User count: {db_session.query(User).count()}")
        logger.debug(f"Tenant count: {db_session.query(User).count()}")
    
        # Add seller_id to product_data
        modified_product_data = product_data.copy()
        modified_product_data['seller_id'] = str(test_user.id)
        modified_product_data['tenant_id'] = str(test_tenant.id)
        print(f"Product data with seller_id: {modified_product_data}")
    
        response = client.post("/api/v1/products", headers=auth_headers, json=modified_product_data)
    
        # Log response content for debugging
        print(f"Response status code: {response.status_code}")
        print(f"Response content: {response.content}")
        print(f"Response headers: {response.headers}")
        print("--- END TEST DEBUG INFO ---\n")
    
>       assert response.status_code == expected_status
E       assert 403 == 422
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:74: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:07,518 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:07,519 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:07,519 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:07,519 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:07,519 - app.main - INFO - Startup complete
2025-07-10 03:06:07,519 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:07,521 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 2cf356c5
2025-07-10 03:06:07,521 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:07,521 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user f7acfe0c
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 2cf356c5
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user f7acfe0c
----------------------------- Captured stdout call -----------------------------

--- TEST DEBUG INFO ---
test_user: f7acfe0c-6b17-475e-9b61-209d35b3f65f (is_seller: True)
test_tenant: 2cf356c5-2ce6-4546-9696-29e512601aae
auth_headers: {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmN2FjZmUwYy02YjE3LTQ3NWUtOWI2MS0yMDlkMzViM2Y2NWYiLCJ0ZW5hbnRfaWQiOiIyY2YzNTZjNS0yY2U2LTQ1NDYtOTY5Ni0yOWU1MTI2MDFhYWUiLCJleHAiOjE3NTIxNDE5NjcsInNjb3BlcyI6W10sImlzX3N1cGVydXNlciI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.pE87hzKH_S4POgzPYBjSDTtJBO_xgT1a2ZoNKl2Ts9c', 'X-Tenant-ID': '2cf356c5-2ce6-4546-9696-29e512601aae'}
Product data with seller_id: {'name': 'Valid Product', 'description': 'DescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescriptionDescription', 'price': 99.99, 'seller_id': 'f7acfe0c-6b17-475e-9b61-209d35b3f65f', 'tenant_id': '2cf356c5-2ce6-4546-9696-29e512601aae'}
2025-07-10 03:06:07,523 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:07,543 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:07,543 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:07,543 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Response status code: 403
Response content: b'Invalid tenant ID: 2cf356c5-2ce6-4546-9696-29e512601aae'
Response headers: Headers({'content-length': '55', 'x-process-time': '0.019435644149780273'})
--- END TEST DEBUG INFO ---

------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
_______ test_list_products_with_filters_parameterized[filter_params0-2] ________

client = <starlette.testclient.TestClient object at 0x147eae850>
db_session = <sqlalchemy.orm.session.Session object at 0x1485cc810>
test_user = <app.models.user.User object at 0x1482efa50>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjYTY2MTA1MC1jN2IzLTQwNzItODE0YS1hYjVjMTMxMzU...cGUiOiJhY2Nlc3MifQ.AUFIkDjK_doa51dbSOUS0D9r5Cx_-loeexYl2Uzao20', 'X-Tenant-ID': 'ad51c5d6-15ff-45da-9502-225ae1633c1d'}
filter_params = {'min_price': 50}, expected_count = 2
test_tenant = <app.models.tenant.Tenant object at 0x1485cc890>

    @pytest.mark.parametrize(
        "filter_params, expected_count",
        [
            ({"min_price": 50}, 2),  # Products with price >= 50
            (
                {"max_price": 50},
                2,
            ),  # Products with price <= 50 (both product1 and product2)
            ({"min_price": 30, "max_price": 60}, 1),  # Products with 30 <= price <= 60
            ({"search": "test"}, 3),  # Products with "test" in name or description
            ({"featured": True}, 1),  # Featured products
            ({"show_on_storefront": False}, 1),  # Products not shown on storefront
        ],
    )
    def test_list_products_with_filters_parameterized(
        client,
        db_session,
        test_user,
        auth_headers,
        filter_params,
        expected_count,
        test_tenant,
    ):
        """
        Test listing products with different filter parameters.
        Creates a set of test products and verifies filtering works correctly.
        """
        # test_user fixture ensures the user exists in the database
    
        # Create test products with different characteristics
        # Product 1: Low price, not featured, visible on storefront
        product1 = Product(
            name="Product 1",
            description="Test product 1",
            price=10.0,
            seller_id=test_user.id,
        )
        product1.tenant_id = test_tenant.id
    
        # Product 2: Medium price, not featured, visible on storefront
        product2 = Product(
            name="Product 2",
            description="Test product 2",
            price=20.0,
            seller_id=test_user.id,
        )
        product2.tenant_id = test_tenant.id
    
        # Product 3: High price, featured, not visible on storefront
        product3 = Product(
            name="Product 3",
            description="Test product 3",
            price=30.0,
            seller_id=test_user.id,
        )
        product3.tenant_id = test_tenant.id
    
        db_session.add_all([product1, product2, product3])
        db_session.commit()
    
        # Test with the parameterized filter
        response = client.get(
            "/api/v1/products", headers=auth_headers, params=filter_params
        )
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:148: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:07,636 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:07,637 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:07,637 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:07,637 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:07,637 - app.main - INFO - Startup complete
2025-07-10 03:06:07,638 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:07,639 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant ad51c5d6
2025-07-10 03:06:07,639 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:07,640 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user ca661050
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant ad51c5d6
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user ca661050
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:07,642 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:07,663 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:07,663 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:07,663 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products?min_price=50 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products?min_price=50 "HTTP/1.1 403 Forbidden"
_______ test_list_products_with_filters_parameterized[filter_params1-2] ________

client = <starlette.testclient.TestClient object at 0x1486b2d50>
db_session = <sqlalchemy.orm.session.Session object at 0x147f05dd0>
test_user = <app.models.user.User object at 0x1478e0110>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1NTUwYjQ4My01YTg4LTQ1MmMtOTFmMC1mMDRjYTc1YjI...cGUiOiJhY2Nlc3MifQ.W5kw_hTFYY4nFZpIivjqGIDMhovwxkxW8NP9oiV8A0w', 'X-Tenant-ID': '3de67e35-14cc-4941-a607-9452b94ed82a'}
filter_params = {'max_price': 50}, expected_count = 2
test_tenant = <app.models.tenant.Tenant object at 0x147f04cd0>

    @pytest.mark.parametrize(
        "filter_params, expected_count",
        [
            ({"min_price": 50}, 2),  # Products with price >= 50
            (
                {"max_price": 50},
                2,
            ),  # Products with price <= 50 (both product1 and product2)
            ({"min_price": 30, "max_price": 60}, 1),  # Products with 30 <= price <= 60
            ({"search": "test"}, 3),  # Products with "test" in name or description
            ({"featured": True}, 1),  # Featured products
            ({"show_on_storefront": False}, 1),  # Products not shown on storefront
        ],
    )
    def test_list_products_with_filters_parameterized(
        client,
        db_session,
        test_user,
        auth_headers,
        filter_params,
        expected_count,
        test_tenant,
    ):
        """
        Test listing products with different filter parameters.
        Creates a set of test products and verifies filtering works correctly.
        """
        # test_user fixture ensures the user exists in the database
    
        # Create test products with different characteristics
        # Product 1: Low price, not featured, visible on storefront
        product1 = Product(
            name="Product 1",
            description="Test product 1",
            price=10.0,
            seller_id=test_user.id,
        )
        product1.tenant_id = test_tenant.id
    
        # Product 2: Medium price, not featured, visible on storefront
        product2 = Product(
            name="Product 2",
            description="Test product 2",
            price=20.0,
            seller_id=test_user.id,
        )
        product2.tenant_id = test_tenant.id
    
        # Product 3: High price, featured, not visible on storefront
        product3 = Product(
            name="Product 3",
            description="Test product 3",
            price=30.0,
            seller_id=test_user.id,
        )
        product3.tenant_id = test_tenant.id
    
        db_session.add_all([product1, product2, product3])
        db_session.commit()
    
        # Test with the parameterized filter
        response = client.get(
            "/api/v1/products", headers=auth_headers, params=filter_params
        )
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:148: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:07,905 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:07,906 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:07,906 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:07,906 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:07,906 - app.main - INFO - Startup complete
2025-07-10 03:06:07,906 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:07,908 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 3de67e35
2025-07-10 03:06:07,908 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:07,909 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 5550b483
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 3de67e35
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 5550b483
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:07,910 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:07,929 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:07,929 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:07,930 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products?max_price=50 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products?max_price=50 "HTTP/1.1 403 Forbidden"
_______ test_list_products_with_filters_parameterized[filter_params2-1] ________

client = <starlette.testclient.TestClient object at 0x147f40b90>
db_session = <sqlalchemy.orm.session.Session object at 0x147eaec90>
test_user = <app.models.user.User object at 0x147eadc10>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI4NGU4NWYxYS00YzRiLTQ2NTgtYWFmZS1hYWExZmM1MDg...cGUiOiJhY2Nlc3MifQ.tVqgYDmmeAu00Jat-Fsq44orZOa4PIPvX_rMFajvAfs', 'X-Tenant-ID': '6280f03d-d402-4d90-9558-74895d1d1de6'}
filter_params = {'max_price': 60, 'min_price': 30}, expected_count = 1
test_tenant = <app.models.tenant.Tenant object at 0x147eae5d0>

    @pytest.mark.parametrize(
        "filter_params, expected_count",
        [
            ({"min_price": 50}, 2),  # Products with price >= 50
            (
                {"max_price": 50},
                2,
            ),  # Products with price <= 50 (both product1 and product2)
            ({"min_price": 30, "max_price": 60}, 1),  # Products with 30 <= price <= 60
            ({"search": "test"}, 3),  # Products with "test" in name or description
            ({"featured": True}, 1),  # Featured products
            ({"show_on_storefront": False}, 1),  # Products not shown on storefront
        ],
    )
    def test_list_products_with_filters_parameterized(
        client,
        db_session,
        test_user,
        auth_headers,
        filter_params,
        expected_count,
        test_tenant,
    ):
        """
        Test listing products with different filter parameters.
        Creates a set of test products and verifies filtering works correctly.
        """
        # test_user fixture ensures the user exists in the database
    
        # Create test products with different characteristics
        # Product 1: Low price, not featured, visible on storefront
        product1 = Product(
            name="Product 1",
            description="Test product 1",
            price=10.0,
            seller_id=test_user.id,
        )
        product1.tenant_id = test_tenant.id
    
        # Product 2: Medium price, not featured, visible on storefront
        product2 = Product(
            name="Product 2",
            description="Test product 2",
            price=20.0,
            seller_id=test_user.id,
        )
        product2.tenant_id = test_tenant.id
    
        # Product 3: High price, featured, not visible on storefront
        product3 = Product(
            name="Product 3",
            description="Test product 3",
            price=30.0,
            seller_id=test_user.id,
        )
        product3.tenant_id = test_tenant.id
    
        db_session.add_all([product1, product2, product3])
        db_session.commit()
    
        # Test with the parameterized filter
        response = client.get(
            "/api/v1/products", headers=auth_headers, params=filter_params
        )
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:148: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,022 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:08,023 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:08,023 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:08,023 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:08,023 - app.main - INFO - Startup complete
2025-07-10 03:06:08,024 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:08,025 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 6280f03d
2025-07-10 03:06:08,025 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:08,026 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 84e85f1a
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 6280f03d
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 84e85f1a
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,028 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:08,049 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:08,049 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:08,049 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products?min_price=30&max_price=60 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products?min_price=30&max_price=60 "HTTP/1.1 403 Forbidden"
_______ test_list_products_with_filters_parameterized[filter_params3-3] ________

client = <starlette.testclient.TestClient object at 0x1470dde50>
db_session = <sqlalchemy.orm.session.Session object at 0x1473a0e10>
test_user = <app.models.user.User object at 0x1473a1fd0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzODYzYmIyNC05MTFmLTQ3ZjctYTM5My01MzUyYjFmMTY...cGUiOiJhY2Nlc3MifQ.eqDV1qpvtNCFLWfTcNuIMiPCs1Ph8ISyscLtrwnTTcY', 'X-Tenant-ID': '56b45b75-2d91-40aa-85c3-14cddcfb45dc'}
filter_params = {'search': 'test'}, expected_count = 3
test_tenant = <app.models.tenant.Tenant object at 0x1473a0c10>

    @pytest.mark.parametrize(
        "filter_params, expected_count",
        [
            ({"min_price": 50}, 2),  # Products with price >= 50
            (
                {"max_price": 50},
                2,
            ),  # Products with price <= 50 (both product1 and product2)
            ({"min_price": 30, "max_price": 60}, 1),  # Products with 30 <= price <= 60
            ({"search": "test"}, 3),  # Products with "test" in name or description
            ({"featured": True}, 1),  # Featured products
            ({"show_on_storefront": False}, 1),  # Products not shown on storefront
        ],
    )
    def test_list_products_with_filters_parameterized(
        client,
        db_session,
        test_user,
        auth_headers,
        filter_params,
        expected_count,
        test_tenant,
    ):
        """
        Test listing products with different filter parameters.
        Creates a set of test products and verifies filtering works correctly.
        """
        # test_user fixture ensures the user exists in the database
    
        # Create test products with different characteristics
        # Product 1: Low price, not featured, visible on storefront
        product1 = Product(
            name="Product 1",
            description="Test product 1",
            price=10.0,
            seller_id=test_user.id,
        )
        product1.tenant_id = test_tenant.id
    
        # Product 2: Medium price, not featured, visible on storefront
        product2 = Product(
            name="Product 2",
            description="Test product 2",
            price=20.0,
            seller_id=test_user.id,
        )
        product2.tenant_id = test_tenant.id
    
        # Product 3: High price, featured, not visible on storefront
        product3 = Product(
            name="Product 3",
            description="Test product 3",
            price=30.0,
            seller_id=test_user.id,
        )
        product3.tenant_id = test_tenant.id
    
        db_session.add_all([product1, product2, product3])
        db_session.commit()
    
        # Test with the parameterized filter
        response = client.get(
            "/api/v1/products", headers=auth_headers, params=filter_params
        )
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:148: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,142 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:08,143 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:08,143 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:08,143 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:08,143 - app.main - INFO - Startup complete
2025-07-10 03:06:08,144 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:08,145 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 56b45b75
2025-07-10 03:06:08,145 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:08,146 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 3863bb24
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 56b45b75
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 3863bb24
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,148 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:08,167 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:08,167 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:08,168 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products?search=test "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products?search=test "HTTP/1.1 403 Forbidden"
_______ test_list_products_with_filters_parameterized[filter_params4-1] ________

client = <starlette.testclient.TestClient object at 0x1471b07d0>
db_session = <sqlalchemy.orm.session.Session object at 0x147e74590>
test_user = <app.models.user.User object at 0x147e75010>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlODI5MzVlMy0wZjhkLTQwMGEtYTZkMS0zNThjYzBkZjI...cGUiOiJhY2Nlc3MifQ.KbRJbjoHZ1axh10pRJeOibwVvyBCUOtvFwc6jfsmltE', 'X-Tenant-ID': 'afb64e4d-89b9-4a49-9ba7-973a945a9378'}
filter_params = {'featured': True}, expected_count = 1
test_tenant = <app.models.tenant.Tenant object at 0x147e77750>

    @pytest.mark.parametrize(
        "filter_params, expected_count",
        [
            ({"min_price": 50}, 2),  # Products with price >= 50
            (
                {"max_price": 50},
                2,
            ),  # Products with price <= 50 (both product1 and product2)
            ({"min_price": 30, "max_price": 60}, 1),  # Products with 30 <= price <= 60
            ({"search": "test"}, 3),  # Products with "test" in name or description
            ({"featured": True}, 1),  # Featured products
            ({"show_on_storefront": False}, 1),  # Products not shown on storefront
        ],
    )
    def test_list_products_with_filters_parameterized(
        client,
        db_session,
        test_user,
        auth_headers,
        filter_params,
        expected_count,
        test_tenant,
    ):
        """
        Test listing products with different filter parameters.
        Creates a set of test products and verifies filtering works correctly.
        """
        # test_user fixture ensures the user exists in the database
    
        # Create test products with different characteristics
        # Product 1: Low price, not featured, visible on storefront
        product1 = Product(
            name="Product 1",
            description="Test product 1",
            price=10.0,
            seller_id=test_user.id,
        )
        product1.tenant_id = test_tenant.id
    
        # Product 2: Medium price, not featured, visible on storefront
        product2 = Product(
            name="Product 2",
            description="Test product 2",
            price=20.0,
            seller_id=test_user.id,
        )
        product2.tenant_id = test_tenant.id
    
        # Product 3: High price, featured, not visible on storefront
        product3 = Product(
            name="Product 3",
            description="Test product 3",
            price=30.0,
            seller_id=test_user.id,
        )
        product3.tenant_id = test_tenant.id
    
        db_session.add_all([product1, product2, product3])
        db_session.commit()
    
        # Test with the parameterized filter
        response = client.get(
            "/api/v1/products", headers=auth_headers, params=filter_params
        )
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:148: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,369 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:08,370 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:08,370 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:08,370 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:08,370 - app.main - INFO - Startup complete
2025-07-10 03:06:08,371 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:08,372 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant afb64e4d
2025-07-10 03:06:08,372 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:08,373 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user e82935e3
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant afb64e4d
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user e82935e3
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,375 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:08,395 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:08,395 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:08,396 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products?featured=true "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products?featured=true "HTTP/1.1 403 Forbidden"
_______ test_list_products_with_filters_parameterized[filter_params5-1] ________

client = <starlette.testclient.TestClient object at 0x14835cf10>
db_session = <sqlalchemy.orm.session.Session object at 0x14760ab50>
test_user = <app.models.user.User object at 0x14760bf90>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0NThlMGE1Mi01Y2ZlLTRjYTEtODA0Yi1jMTA4NGNkN2M...cGUiOiJhY2Nlc3MifQ.Bw4QjWAV5Nms03bCMy0aPGS-_7lmk5XPO0vp3qHz9rQ', 'X-Tenant-ID': '8fbcba73-384c-4364-9b95-5c79d540496b'}
filter_params = {'show_on_storefront': False}, expected_count = 1
test_tenant = <app.models.tenant.Tenant object at 0x14760af10>

    @pytest.mark.parametrize(
        "filter_params, expected_count",
        [
            ({"min_price": 50}, 2),  # Products with price >= 50
            (
                {"max_price": 50},
                2,
            ),  # Products with price <= 50 (both product1 and product2)
            ({"min_price": 30, "max_price": 60}, 1),  # Products with 30 <= price <= 60
            ({"search": "test"}, 3),  # Products with "test" in name or description
            ({"featured": True}, 1),  # Featured products
            ({"show_on_storefront": False}, 1),  # Products not shown on storefront
        ],
    )
    def test_list_products_with_filters_parameterized(
        client,
        db_session,
        test_user,
        auth_headers,
        filter_params,
        expected_count,
        test_tenant,
    ):
        """
        Test listing products with different filter parameters.
        Creates a set of test products and verifies filtering works correctly.
        """
        # test_user fixture ensures the user exists in the database
    
        # Create test products with different characteristics
        # Product 1: Low price, not featured, visible on storefront
        product1 = Product(
            name="Product 1",
            description="Test product 1",
            price=10.0,
            seller_id=test_user.id,
        )
        product1.tenant_id = test_tenant.id
    
        # Product 2: Medium price, not featured, visible on storefront
        product2 = Product(
            name="Product 2",
            description="Test product 2",
            price=20.0,
            seller_id=test_user.id,
        )
        product2.tenant_id = test_tenant.id
    
        # Product 3: High price, featured, not visible on storefront
        product3 = Product(
            name="Product 3",
            description="Test product 3",
            price=30.0,
            seller_id=test_user.id,
        )
        product3.tenant_id = test_tenant.id
    
        db_session.add_all([product1, product2, product3])
        db_session.commit()
    
        # Test with the parameterized filter
        response = client.get(
            "/api/v1/products", headers=auth_headers, params=filter_params
        )
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_products_parameterized.py:148: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,489 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:08,490 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:08,490 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:08,490 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:08,490 - app.main - INFO - Startup complete
2025-07-10 03:06:08,490 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:08,491 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 8fbcba73
2025-07-10 03:06:08,491 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:08,492 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 458e0a52
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 8fbcba73
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 458e0a52
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,494 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:08,513 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:08,513 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:08,514 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products?show_on_storefront=false "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products?show_on_storefront=false "HTTP/1.1 403 Forbidden"
________________________ test_paystack_webhook_success _________________________

mock_payment_service_cls = <MagicMock name='PaymentService' id='5490554384'>
mock_record_webhook_event = <AsyncMock name='record_webhook_event' id='5490553872'>
mock_is_webhook_processed = <AsyncMock name='is_webhook_processed' id='5503375312'>
mock_verify_signature = <MagicMock name='verify_paystack_signature' id='5503384208'>
mock_get_db = <MagicMock name='get_db' id='5497028496'>
client = <starlette.testclient.TestClient object at 0x1473a0e10>
mock_db = <AsyncMock name='get_db()' spec='AsyncSession' id='5490550608'>
valid_paystack_payload = {'data': {'amount': 10000, 'customer': {'email': 'customer@example.com'}, 'id': 12345, 'reference': 'TEST_REFERENCE', ...}, 'event': 'charge.success', 'id': '99ffd526-4fff-4a01-868a-3f1f7295e984'}

    @pytest.mark.asyncio
    @patch("app.api.v1.endpoints.webhooks.get_db")
    @patch("app.api.v1.endpoints.webhooks.verify_paystack_signature")
    @patch("app.services.payment.webhook_event_service.WebhookEventService.is_webhook_processed")
    @patch("app.services.payment.webhook_event_service.WebhookEventService.record_webhook_event")
    @patch("app.api.v1.endpoints.webhooks.PaymentService")
    async def test_paystack_webhook_success(
        mock_payment_service_cls,
        mock_record_webhook_event,
        mock_is_webhook_processed,
        mock_verify_signature,
        mock_get_db,
        client,
        mock_db,
        valid_paystack_payload
    ):
        # Setup mocks
        mock_get_db.return_value = mock_db
        mock_verify_signature.return_value = True
        mock_is_webhook_processed.return_value = False
        mock_record_webhook_event.return_value = True
        mock_payment_service = mock_payment_service_cls.return_value
        mock_payment_service.process_successful_payment = AsyncMock()
    
        # Create signature
        signature = generate_paystack_signature(valid_paystack_payload)
    
        # Send request
        response = client.post(
            "/api/v1/webhooks/paystack",
            json=valid_paystack_payload,
            headers={"X-Paystack-Signature": signature}
        )
    
        # Assert response
        assert response.status_code == 200
        assert response.json() == {"status": "success", "message": "Webhook processed"}
    
        # Assert mocks called correctly
        mock_verify_signature.assert_called_once()
>       mock_is_webhook_processed.assert_called_once_with(
            mock_db, valid_paystack_payload["id"], "paystack"
        )

tests/api/test_webhook_handlers.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/unittest/mock.py:951: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AsyncMock name='is_webhook_processed' id='5503375312'>
args = (<AsyncMock name='get_db()' spec='AsyncSession' id='5490550608'>, '99ffd526-4fff-4a01-868a-3f1f7295e984', 'paystack')
kwargs = {}
expected = call(<AsyncMock name='get_db()' spec='AsyncSession' id='5490550608'>, '99ffd526-4fff-4a01-868a-3f1f7295e984', 'paystack')
actual = call(<sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1480b4b10>, '99ffd526-4fff-4a01-868a-3f1f7295e984', 'paystack')
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x14798ab60>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: is_webhook_processed(<AsyncMock name='get_db()' spec='AsyncSession' id='5490550608'>, '99ffd526-4fff-4a01-868a-3f1f7295e984', 'paystack')
E             Actual: is_webhook_processed(<sqlalchemy.ext.asyncio.session.AsyncSession object at 0x1480b4b10>, '99ffd526-4fff-4a01-868a-3f1f7295e984', 'paystack')

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/unittest/mock.py:939: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,721 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,725 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/webhooks/paystack "HTTP/1.1 200 OK"
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/webhooks/paystack "HTTP/1.1 200 OK"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:08,745 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
__________________________ test_mpesa_webhook_success __________________________

mock_payment_service_cls = <MagicMock name='PaymentService' id='5508966480'>
mock_record_webhook_event = <AsyncMock name='record_webhook_event' id='5508965072'>
mock_is_webhook_processed = <AsyncMock name='is_webhook_processed' id='5504611152'>
mock_get_db = <MagicMock name='get_db' id='5499426832'>
client = <starlette.testclient.TestClient object at 0x147eeb950>
mock_db = <AsyncMock name='get_db()' spec='AsyncSession' id='5504248592'>
valid_mpesa_payload = {'Body': {'stkCallback': {'CallbackMetadata': {'Item': [{'Name': 'Amount', 'Value': 1000.0}, {'Name': 'MpesaReceiptNum...}]}, 'CheckoutRequestID': 'e17a433a-0648-40bf-aa1f-449b6382f271', 'MerchantRequestID': '12345', 'ResultCode': 0, ...}}}

    @pytest.mark.asyncio
    @patch("app.api.v1.endpoints.webhooks.get_db")
    @patch("app.services.payment.webhook_event_service.WebhookEventService.is_webhook_processed")
    @patch("app.services.payment.webhook_event_service.WebhookEventService.record_webhook_event")
    @patch("app.api.v1.endpoints.webhooks.PaymentService")
    async def test_mpesa_webhook_success(
        mock_payment_service_cls,
        mock_record_webhook_event,
        mock_is_webhook_processed,
        mock_get_db,
        client,
        mock_db,
        valid_mpesa_payload
    ):
        # Setup mocks
        mock_get_db.return_value = mock_db
        mock_is_webhook_processed.return_value = False
        mock_record_webhook_event.return_value = True
        mock_payment_service = mock_payment_service_cls.return_value
        mock_payment_service.process_successful_payment = AsyncMock()
    
        # Disable IP validation for testing
        with patch("app.api.v1.endpoints.webhooks.settings") as mock_settings:
            mock_settings.VALIDATE_WEBHOOK_IPS = False
    
            response = client.post(
                "/api/v1/webhooks/mpesa",
                json=valid_mpesa_payload
            )
    
        # Assert response
        assert response.status_code == 200
        assert response.json() == {"status": "success", "message": "Webhook processed"}
    
        # Assert mocks called correctly
        event_id = valid_mpesa_payload["Body"]["stkCallback"]["CheckoutRequestID"]
>       mock_is_webhook_processed.assert_called_once_with(mock_db, event_id, "mpesa")

tests/api/test_webhook_handlers.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/unittest/mock.py:951: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AsyncMock name='is_webhook_processed' id='5504611152'>
args = (<AsyncMock name='get_db()' spec='AsyncSession' id='5504248592'>, 'e17a433a-0648-40bf-aa1f-449b6382f271', 'mpesa')
kwargs = {}
expected = call(<AsyncMock name='get_db()' spec='AsyncSession' id='5504248592'>, 'e17a433a-0648-40bf-aa1f-449b6382f271', 'mpesa')
actual = call(<sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147587ed0>, 'e17a433a-0648-40bf-aa1f-449b6382f271', 'mpesa')
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x1476ec180>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: is_webhook_processed(<AsyncMock name='get_db()' spec='AsyncSession' id='5504248592'>, 'e17a433a-0648-40bf-aa1f-449b6382f271', 'mpesa')
E             Actual: is_webhook_processed(<sqlalchemy.ext.asyncio.session.AsyncSession object at 0x147587ed0>, 'e17a433a-0648-40bf-aa1f-449b6382f271', 'mpesa')

/opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/unittest/mock.py:939: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,751 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,754 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/webhooks/mpesa "HTTP/1.1 200 OK"
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/webhooks/mpesa "HTTP/1.1 200 OK"
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:08,772 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
______________________ test_create_whatsapp_order_success ______________________

client = <starlette.testclient.TestClient object at 0x1475dd250>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5N2U1YWQ4Ni0yZmRiLTRhOGMtYTJlYi0xYzY0NmMzNzJ...cGUiOiJhY2Nlc3MifQ.yIoty_cBvlPPQJx3zP1jgXmYuJGs731ASQu8QE52CrI', 'X-Tenant-ID': 'b79d953c-0706-4689-b115-04c704f6e707'}
db_session = <sqlalchemy.orm.session.Session object at 0x148218e50>
whatsapp_product = <app.models.product.Product object at 0x1473d01d0>
test_tenant = <app.models.tenant.Tenant object at 0x146e353d0>

    def test_create_whatsapp_order_success(
        client, auth_headers, db_session, whatsapp_product, test_tenant
    ):
        """Test creating a WhatsApp order with all required fields"""
        # Create WhatsApp order data with channel metadata
        order_data = {
            "product_id": str(whatsapp_product.id),
            "buyer_name": "WhatsApp Buyer",
            "buyer_phone": "+1987654321",
            "quantity": 2,
            "total_amount": 99.98,
            "whatsapp_number": str(test_tenant.whatsapp_number or "+1987654321"),
            "message_id": "test_message_id",
            "conversation_id": "test_conversation_id",
            "channel_metadata": {
                "channel": "whatsapp",
                "message_id": "test_message_id",
                "chat_session_id": "test_conversation_id",
            },
        }
    
        # Submit the WhatsApp order
        response = client.post(
            "/api/v1/orders/whatsapp", headers=auth_headers, json=order_data
        )
    
        # Check response
>       assert (
            response.status_code == 201
        ), f"Expected 201, got {response.status_code}: {response.text}"
E       AssertionError: Expected 201, got 403: Invalid tenant ID: b79d953c-0706-4689-b115-04c704f6e707
E       assert 403 == 201
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_whatsapp_orders.py:60: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,773 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:08,774 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:08,774 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:08,774 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:08,774 - app.main - INFO - Startup complete
2025-07-10 03:06:08,774 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:08,775 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant b79d953c
2025-07-10 03:06:08,775 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:08,776 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 97e5ad86
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant b79d953c
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 97e5ad86
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,778 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:08,798 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:08,798 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
2025-07-10 03:06:08,798 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
______________ test_create_whatsapp_order_missing_whatsapp_fields ______________

client = <starlette.testclient.TestClient object at 0x148420310>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhOTUwMzI4My1jYWY5LTQ4NTEtOWZmNi1hNjRiY2ZhNGE...cGUiOiJhY2Nlc3MifQ.ostT11LXaR9rhO0VHTgODkAwlOpXcSrwx75uwBlHKEw', 'X-Tenant-ID': 'de82b377-bb9f-4911-b7df-ddc961c8b964'}
whatsapp_product = <app.models.product.Product object at 0x1480628d0>

    def test_create_whatsapp_order_missing_whatsapp_fields(
        client, auth_headers, whatsapp_product
    ):
        """Test creating a WhatsApp order without required WhatsApp-specific channel metadata"""
        # Attempt to create an order without channel_metadata
        incomplete_data = {
            "product_id": str(whatsapp_product.id),
            "buyer_name": "WhatsApp Buyer",
            "buyer_phone": "+1987654321",
            "quantity": 2,
            "total_amount": 99.98,
            # Missing channel_metadata
        }
    
        response = client.post(
            "/api/v1/orders/whatsapp", headers=auth_headers, json=incomplete_data
        )
>       assert response.status_code == 422
E       assert 403 == 422
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_whatsapp_orders.py:117: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:08,892 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:08,893 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:08,893 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:08,893 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:08,893 - app.main - INFO - Startup complete
2025-07-10 03:06:08,893 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:08,895 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant de82b377
2025-07-10 03:06:08,895 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:08,896 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user a9503283
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant de82b377
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user a9503283
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:08,898 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:08,917 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:08,917 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
2025-07-10 03:06:08,918 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
___________________ test_create_whatsapp_order_invalid_phone ___________________

client = <starlette.testclient.TestClient object at 0x148633150>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MjkyZTExZS1jMThlLTQ2ZTYtYmE0ZC0wYzY3YTdkOTJ...cGUiOiJhY2Nlc3MifQ.PrgPdyXyGmGcZeswWu9hLxcuYqPWBl-hxIVjPRGYQOY', 'X-Tenant-ID': '95f280c0-97f5-493f-9230-c99ce3392eb6'}
whatsapp_product = <app.models.product.Product object at 0x146d81c10>

    def test_create_whatsapp_order_invalid_phone(client, auth_headers, whatsapp_product):
        """Test creating a WhatsApp order with invalid phone number format"""
        order_data = {
            "product_id": str(whatsapp_product.id),
            "buyer_name": "WhatsApp Buyer",
            "buyer_phone": "invalid-phone",  # Invalid phone format
            "quantity": 1,
            "total_amount": 49.99,
            "channel_metadata": {
                "channel": "whatsapp",
                "message_id": "test_message_id",
                "chat_session_id": "test_conversation_id",
            },
        }
    
        response = client.post(
            "/api/v1/orders/whatsapp", headers=auth_headers, json=order_data
        )
>       assert response.status_code == 422
E       assert 403 == 422
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_whatsapp_orders.py:154: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:09,010 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:09,011 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:09,011 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:09,012 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:09,012 - app.main - INFO - Startup complete
2025-07-10 03:06:09,120 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:09,121 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 95f280c0
2025-07-10 03:06:09,121 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:09,122 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 6292e11e
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 95f280c0
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 6292e11e
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:09,124 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:09,142 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:09,142 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
2025-07-10 03:06:09,142 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/orders/whatsapp
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/orders/whatsapp "HTTP/1.1 403 Forbidden"
______________________ test_get_whatsapp_orders_by_number ______________________

self = <sqlalchemy.engine.base.Connection object at 0x148063fd0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x147d2d610>
statement = <sqlalchemy.dialects.postgresql.base.PGCompiler object at 0x147d2e610>
parameters = [{'buyer_address': None, 'buyer_email': None, 'buyer_name': 'WhatsApp Buyer 0', 'buyer_phone': '+9876543210', ...}]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x147125a80; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': None, 'buyer_name': 'WhatsApp Buyer 0', 'buyer_phone': '+9876543210', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x147d2d610>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (be28b50a-4215-4300-bf42-4b24a5a8dc49, e4fca7a3-e15f-4607-b36a-c76a56af54b9, 4b119637-fca2-4a33-9471-e0301a8359bc, WhatsApp Buyer 0, +9876543210, null, null, 1, 25, whatsapp, pending, null, 1, f, null, f, 2025-07-10 03:06:09.238212-06, null, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

client = <starlette.testclient.TestClient object at 0x148060b50>
db_session = <sqlalchemy.orm.session.Session object at 0x148345990>
test_user = <app.models.user.User object at 0x148345710>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0YjExOTYzNy1mY2EyLTRhMzMtOTQ3MS1lMDMwMWE4MzU...cGUiOiJhY2Nlc3MifQ.ATxqE5eh4A07tiS69gETKAKRDtIIIS0AJigg0OQmhbY', 'X-Tenant-ID': 'cb1891d5-93c4-4161-8080-a3832f4b47f6'}
test_tenant = <app.models.tenant.Tenant object at 0x148347f90>

    def test_get_whatsapp_orders_by_number(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test getting orders for a specific WhatsApp number"""
        # Create test product
        product = Product(
            name="WhatsApp Product",
            description="Test Description",
            price=Decimal("25.00"),
            seller_id=test_user.id,
            show_on_whatsapp=True,
        )
        db_session.add(product)
        db_session.commit()
    
        # Create multiple WhatsApp orders with the same number
        whatsapp_number = "+9876543210"
        orders = []
        order_channel_metas = []
    
        for i in range(3):
            order = Order(
                product_id=product.id,
                seller_id=test_user.id,
                buyer_name=f"WhatsApp Buyer {i}",
                buyer_phone=whatsapp_number,
                quantity=1,
                total_amount=25.00,
                status=OrderStatus.pending,
                order_source=OrderSource.whatsapp,
            )
            orders.append(order)
            db_session.add(order)
>           db_session.flush()  # Get the order ID without committing

tests/api/test_whatsapp_orders.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1227: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x147125a80; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': None, 'buyer_name': 'WhatsApp Buyer 0', 'buyer_phone': '+9876543210', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x147d2d610>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (be28b50a-4215-4300-bf42-4b24a5a8dc49, e4fca7a3-e15f-4607-b36a-c76a56af54b9, 4b119637-fca2-4a33-9471-e0301a8359bc, WhatsApp Buyer 0, +9876543210, null, null, 1, 25, whatsapp, pending, null, 1, f, null, f, 2025-07-10 03:06:09.238212-06, null, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_address, quantity, total_amount, order_source, status, notes, version, notification_sent, last_notification_at, is_deleted, updated_at, cancelled_at, returned_at, cancellation_reason, return_reason) VALUES (%(id)s::UUID, %(product_id)s::UUID, %(seller_id)s::UUID, %(tenant_id)s::UUID, %(customer_id)s::UUID, %(buyer_name)s, %(buyer_phone)s, %(buyer_email)s, %(buyer_address)s, %(quantity)s, %(total_amount)s, %(order_source)s, %(status)s, %(notes)s, %(version)s, %(notification_sent)s, %(last_notification_at)s, %(is_deleted)s, %(updated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at]
E       [parameters: {'id': UUID('be28b50a-4215-4300-bf42-4b24a5a8dc49'), 'product_id': UUID('e4fca7a3-e15f-4607-b36a-c76a56af54b9'), 'seller_id': UUID('4b119637-fca2-4a33-9471-e0301a8359bc'), 'tenant_id': None, 'customer_id': None, 'buyer_name': 'WhatsApp Buyer 0', 'buyer_phone': '+9876543210', 'buyer_email': None, 'buyer_address': None, 'quantity': 1, 'total_amount': 25.0, 'order_source': 'whatsapp', 'status': 'pending', 'notes': None, 'version': 1, 'notification_sent': False, 'last_notification_at': None, 'is_deleted': False, 'updated_at': None, 'cancelled_at': None, 'returned_at': None, 'cancellation_reason': None, 'return_reason': None}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:09,236 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:09,237 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:09,237 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:09,237 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:09,237 - app.main - INFO - Startup complete
2025-07-10 03:06:09,237 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:09,239 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant cb1891d5
2025-07-10 03:06:09,239 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:09,239 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 4b119637
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant cb1891d5
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 4b119637
____________________ test_get_whatsapp_orders_with_filters _____________________

self = <sqlalchemy.engine.base.Connection object at 0x1483c4b90>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x147a46910>
statement = <sqlalchemy.dialects.postgresql.base.PGCompiler object at 0x147d2e610>
parameters = [{'buyer_address': None, 'buyer_email': None, 'buyer_name': 'Pending Order', 'buyer_phone': '+5551234567', ...}]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x146a4b1f0; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': None, 'buyer_name': 'Pending Order', 'buyer_phone': '+5551234567', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x147a46910>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (c9858770-e640-452b-9b46-c9fb4b80cb76, e0bafac2-b3eb-4c13-9caf-bac97582bd38, b571b005-6263-4d97-b46f-58779d4d06b3, Pending Order, +5551234567, null, null, 1, 25, whatsapp, pending, null, 1, f, null, f, 2025-07-10 03:06:09.561792-06, null, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

client = <starlette.testclient.TestClient object at 0x1483c98d0>
db_session = <sqlalchemy.orm.session.Session object at 0x1483c4550>
test_user = <app.models.user.User object at 0x1483c5ad0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiNTcxYjAwNS02MjYzLTRkOTctYjQ2Zi01ODc3OWQ0ZDA...cGUiOiJhY2Nlc3MifQ.HgLGM5jcQMqSCqqJEI_PdTBQ1nJNoodXRLX8phfsyBU', 'X-Tenant-ID': 'c2141ddf-53a9-4b6e-ac99-f54c77da5b63'}
test_tenant = <app.models.tenant.Tenant object at 0x1483c6810>

    def test_get_whatsapp_orders_with_filters(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test getting WhatsApp orders with status filters"""
        # Create test product
        product = Product(
            name="Filter Test Product",
            description="Test Description",
            price=Decimal("25.00"),
            seller_id=test_user.id,
            show_on_whatsapp=True,
        )
        db_session.add(product)
        db_session.commit()
    
        # Create WhatsApp orders with different statuses
        whatsapp_number = "+5551234567"
    
        # Pending order
        pending_order = Order(
            product_id=product.id,
            seller_id=test_user.id,
            buyer_name="Pending Order",
            buyer_phone=whatsapp_number,
            quantity=1,
            total_amount=25.00,
            status=OrderStatus.pending,
            order_source=OrderSource.whatsapp,
        )
        db_session.add(pending_order)
>       db_session.flush()

tests/api/test_whatsapp_orders.py:252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1227: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x1457eaf50>
cursor = <cursor object at 0x146a4b1f0; closed: -1>
statement = 'INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_ad...dated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at'
parameters = {'buyer_address': None, 'buyer_email': None, 'buyer_name': 'Pending Order', 'buyer_phone': '+5551234567', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x147a46910>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "tenant_id" of relation "orders" violates not-null constraint
E       DETAIL:  Failing row contains (c9858770-e640-452b-9b46-c9fb4b80cb76, e0bafac2-b3eb-4c13-9caf-bac97582bd38, b571b005-6263-4d97-b46f-58779d4d06b3, Pending Order, +5551234567, null, null, 1, 25, whatsapp, pending, null, 1, f, null, f, 2025-07-10 03:06:09.561792-06, null, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO orders (id, product_id, seller_id, tenant_id, customer_id, buyer_name, buyer_phone, buyer_email, buyer_address, quantity, total_amount, order_source, status, notes, version, notification_sent, last_notification_at, is_deleted, updated_at, cancelled_at, returned_at, cancellation_reason, return_reason) VALUES (%(id)s::UUID, %(product_id)s::UUID, %(seller_id)s::UUID, %(tenant_id)s::UUID, %(customer_id)s::UUID, %(buyer_name)s, %(buyer_phone)s, %(buyer_email)s, %(buyer_address)s, %(quantity)s, %(total_amount)s, %(order_source)s, %(status)s, %(notes)s, %(version)s, %(notification_sent)s, %(last_notification_at)s, %(is_deleted)s, %(updated_at)s, %(cancelled_at)s, %(returned_at)s, %(cancellation_reason)s, %(return_reason)s) RETURNING orders.created_at]
E       [parameters: {'id': UUID('c9858770-e640-452b-9b46-c9fb4b80cb76'), 'product_id': UUID('e0bafac2-b3eb-4c13-9caf-bac97582bd38'), 'seller_id': UUID('b571b005-6263-4d97-b46f-58779d4d06b3'), 'tenant_id': None, 'customer_id': None, 'buyer_name': 'Pending Order', 'buyer_phone': '+5551234567', 'buyer_email': None, 'buyer_address': None, 'quantity': 1, 'total_amount': 25.0, 'order_source': 'whatsapp', 'status': 'pending', 'notes': None, 'version': 1, 'notification_sent': False, 'last_notification_at': None, 'is_deleted': False, 'updated_at': None, 'cancelled_at': None, 'returned_at': None, 'cancellation_reason': None, 'return_reason': None}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:09,559 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:09,560 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:09,560 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:09,560 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:09,561 - app.main - INFO - Startup complete
2025-07-10 03:06:09,561 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:09,562 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant c2141ddf
2025-07-10 03:06:09,562 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:09,563 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user b571b005
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant c2141ddf
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user b571b005
___________________ test_get_whatsapp_orders_invalid_number ____________________

client = <starlette.testclient.TestClient object at 0x14816d510>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5YmQwMTlkMi1hMDgyLTQyMjItYTBmZC1iMTljMjFiZjI...cGUiOiJhY2Nlc3MifQ.jpLyJD5NuS0p_3L-tKxX3Fp7yzKtorh7nCK9Zvb3eaU', 'X-Tenant-ID': '41042c3d-45f7-4ca8-b8ed-b9d0b6bbd45c'}

    def test_get_whatsapp_orders_invalid_number(client, auth_headers):
        """Test getting orders with an invalid WhatsApp number format"""
        response = client.get(
            "/api/v1/orders/whatsapp?whatsapp_number=invalid-number", headers=auth_headers
        )
>       assert response.status_code == 422
E       assert 403 == 422
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_whatsapp_orders.py:340: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:09,868 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:09,869 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:09,869 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:09,869 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:09,869 - app.main - INFO - Startup complete
2025-07-10 03:06:09,870 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:09,871 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 41042c3d
2025-07-10 03:06:09,871 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:09,872 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 9bd019d2
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 41042c3d
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 9bd019d2
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:09,873 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:09,892 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:09,892 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/whatsapp
2025-07-10 03:06:09,893 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders/whatsapp?whatsapp_number=invalid-number "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/whatsapp
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders/whatsapp?whatsapp_number=invalid-number "HTTP/1.1 403 Forbidden"
_________________ test_get_whatsapp_orders_nonexistent_number __________________

client = <starlette.testclient.TestClient object at 0x1485fc4d0>
db_session = <sqlalchemy.orm.session.Session object at 0x148063810>
test_user = <app.models.user.User object at 0x1483a2150>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMDk2MGMyZC1kYmY5LTQwMzAtYWRhZC0wMjVkYzcxMTE...cGUiOiJhY2Nlc3MifQ.0CFQ5RKSDQozIYyFcX_7x9hDMEMJAbeZvfQRrOy2yUU', 'X-Tenant-ID': '891236d1-f6f0-4ebd-936d-c69d15d8b35f'}
test_tenant = <app.models.tenant.Tenant object at 0x1483a1e90>

    def test_get_whatsapp_orders_nonexistent_number(
        client, db_session, test_user, auth_headers, test_tenant
    ):
        """Test getting orders with a nonexistent WhatsApp number (should return empty list)"""
        response = client.get(
            "/api/v1/orders/whatsapp?whatsapp_number=+1234567890", headers=auth_headers
        )
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/api/test_whatsapp_orders.py:350: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:09,985 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:09,986 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:09,987 - app.core.cache.redis_cache - WARNING - Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
2025-07-10 03:06:09,987 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:09,987 - app.main - INFO - Startup complete
2025-07-10 03:06:09,987 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:09,988 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 891236d1
2025-07-10 03:06:09,988 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:09,989 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 20960c2d
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
WARNING  app.core.cache.redis_cache:redis_cache.py:113 Failed to initialize Redis cache - continuing without cache: 'Settings' object has no attribute 'REDIS_CONNECT_TIMEOUT'
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 891236d1
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 20960c2d
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:09,989 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:10,009 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:10,009 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/whatsapp
2025-07-10 03:06:10,010 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders/whatsapp?whatsapp_number=+1234567890 "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders/whatsapp
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders/whatsapp?whatsapp_number=+1234567890 "HTTP/1.1 403 Forbidden"
_________ TestResponseOptimization.test_conditional_response_decorator _________

self = <test_response_optimization.TestResponseOptimization object at 0x14627f0d0>

    @pytest.mark.asyncio
    async def test_conditional_response_decorator(self):
        """Test the conditional_response decorator."""
        # Setup
        data = {"id": 1, "name": "Test Product"}
        etag = generate_etag(data)
    
        request = MagicMock()
        response = Response()
        request.headers = {}
    
        # Create decorated function
        @conditional_response(cache_control="public", max_age=600)
        async def test_function(request, response):
            return data
    
        # Execute
        result = await test_function(request, response)
    
        # Verify
        assert result == data
>       assert response.headers["ETag"] == etag

tests/core/test_response_optimization.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = MutableHeaders({'content-length': '0'}), key = 'ETag'

    def __getitem__(self, key: str) -> str:
        get_header_key = key.lower().encode("latin-1")
        for header_key, header_value in self._list:
            if header_key == get_header_key:
                return header_value.decode("latin-1")
>       raise KeyError(key)
E       KeyError: 'ETag'

../venv/lib/python3.11/site-packages/starlette/datastructures.py:534: KeyError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:10,231 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:10,238 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_________ TestResponseOptimization.test_conditional_response_with_304 __________

self = <test_response_optimization.TestResponseOptimization object at 0x14625d510>

    @pytest.mark.asyncio
    async def test_conditional_response_with_304(self):
        """Test the conditional_response decorator with 304 response."""
        # Setup
        data = {"id": 1, "name": "Test Product"}
        etag = generate_etag(data)
    
        request = MagicMock()
        response = Response()
        request.headers = {"If-None-Match": etag}
    
        # Create decorated function
        @conditional_response(cache_control="public", max_age=600)
        async def test_function(request, response):
            return data
    
        # Execute
        result = await test_function(request, response)
    
        # Verify
>       assert result is None
E       AssertionError: assert {'id': 1, 'name': 'Test Product'} is None

tests/core/test_response_optimization.py:186: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:10,238 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:10,240 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_____________________________ test_create_tenants ______________________________

self = <sqlalchemy.engine.base.Connection object at 0x1483caf10>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x144410150>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x1483c8590>

    def _exec_insertmany_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for an "insertmanyvalues"
        operation, which will invoke DBAPI
        cursor.execute() one or more times with individual log and
        event hook calls.
    
        """
    
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
        else:
            generic_setinputsizes = None
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters = parameters
    
        engine_events = self._has_events or self.engine._has_events
        if self.dialect._has_events:
            do_execute_dispatch: Iterable[
                Any
            ] = self.dialect.dispatch.do_execute
        else:
            do_execute_dispatch = ()
    
        if self._echo:
            stats = context._get_cache_stats() + " (insertmanyvalues)"
    
        for imv_batch in dialect._deliver_insertmanyvalues_batches(
            cursor,
            str_statement,
            effective_parameters,
            generic_setinputsizes,
            context,
        ):
            if imv_batch.processed_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor,
                        imv_batch.processed_setinputsizes,
                        context,
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e,
                        sql_util._long_statement(imv_batch.replaced_statement),
                        imv_batch.replaced_parameters,
                        None,
                        context,
                    )
    
            sub_stmt = imv_batch.replaced_statement
            sub_params = imv_batch.replaced_parameters
    
            if engine_events:
                for fn in self.dispatch.before_cursor_execute:
                    sub_stmt, sub_params = fn(
                        self,
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                        True,
                    )
    
            if self._echo:
                self._log_info(sql_util._long_statement(sub_stmt))
    
                imv_stats = f""" {imv_batch.batchnum}/{
                            imv_batch.total_batches
                } ({
                    'ordered'
                    if imv_batch.rows_sorted else 'unordered'
                }{
                    '; batch not supported'
                    if imv_batch.is_downgraded
                    else ''
                })"""
    
                if imv_batch.batchnum == 1:
                    stats += imv_stats
                else:
                    stats = f"insertmanyvalues{imv_stats}"
    
                if not self.engine.hide_parameters:
                    self._log_info(
                        "[%s] %r",
                        stats,
                        sql_util._repr_params(
                            sub_params,
                            batches=10,
                            ismulti=False,
                        ),
                    )
                else:
                    self._log_info(
                        "[%s] [SQL parameters hidden due to "
                        "hide_parameters=True]",
                        stats,
                    )
    
            try:
                for fn in do_execute_dispatch:
                    if fn(
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                    ):
                        break
                else:
>                   dialect.do_execute(
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x144410150>
cursor = <cursor object at 0x146bd44f0; closed: -1>
statement = 'INSERT INTO tenants (id, name, subdomain, custom_domain, domain_verified, is_verified, domain_verification_token, cou...%(is_active__1)s, %(storefront_enabled__1)s, %(updated_at__1)s, %(email__1)s) RETURNING tenants.created_at, tenants.id'
parameters = {'country_code__0': 'NG', 'country_code__1': 'NG', 'custom_domain__0': None, 'custom_domain__1': None, ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x1483c8590>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "updated_at" of relation "tenants" violates not-null constraint
E       DETAIL:  Failing row contains (cb4f4b6d-170d-4058-846c-38a839c6abc1, Tenant One, tenant-one-70e72e04-225a-4b64-b20e-15f90de8f326, null, f, null, null, NG, NOT_STARTED, null, null, null, +23488760113194, null, t, t, null, 2025-07-10 03:06:10.254422, null, null, null, f, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

db = <sqlalchemy.orm.session.Session object at 0x147422750>

    def test_create_tenants(db: Session):
        """Test creating two separate tenants."""
        tenant1 = Tenant(
            name="Tenant One",
            subdomain=f"tenant-one-{uuid.uuid4()}",
            phone_number=f"+2348{uuid.uuid4().int % 10000000000:010}",
            country_code="NG",
            kyc_status=KYCStatus.NOT_STARTED,
            storefront_enabled=True,
            is_active=True,
        )
        tenant2 = Tenant(
            name="Tenant Two",
            subdomain=f"tenant-two-{uuid.uuid4()}",
            phone_number=f"+2348{uuid.uuid4().int % 10000000000:010}",
            country_code="NG",
            kyc_status=KYCStatus.NOT_STARTED,
            storefront_enabled=True,
            is_active=True,
        )
        db.add(tenant1)
        db.add(tenant2)
>       db.commit()

tests/integration/test_tenant_rls.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1137: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_insertmany_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2121: in _exec_insertmany_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2113: in _exec_insertmany_context
    dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x144410150>
cursor = <cursor object at 0x146bd44f0; closed: -1>
statement = 'INSERT INTO tenants (id, name, subdomain, custom_domain, domain_verified, is_verified, domain_verification_token, cou...%(is_active__1)s, %(storefront_enabled__1)s, %(updated_at__1)s, %(email__1)s) RETURNING tenants.created_at, tenants.id'
parameters = {'country_code__0': 'NG', 'country_code__1': 'NG', 'custom_domain__0': None, 'custom_domain__1': None, ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x1483c8590>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "updated_at" of relation "tenants" violates not-null constraint
E       DETAIL:  Failing row contains (cb4f4b6d-170d-4058-846c-38a839c6abc1, Tenant One, tenant-one-70e72e04-225a-4b64-b20e-15f90de8f326, null, f, null, null, NG, NOT_STARTED, null, null, null, +23488760113194, null, t, t, null, 2025-07-10 03:06:10.254422, null, null, null, f, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO tenants (id, name, subdomain, custom_domain, domain_verified, is_verified, domain_verification_token, country_code, kyc_status, kyc_updated_at, phone_number, whatsapp_number, is_active, storefront_enabled, updated_at, email) VALUES (%(id_ ... 605 characters truncated ... %(storefront_enabled__1)s, %(updated_at__1)s, %(email__1)s) RETURNING tenants.created_at, tenants.id]
E       [parameters: {'kyc_status__0': 'NOT_STARTED', 'phone_number__0': '+23488760113194', 'is_verified__0': False, 'is_active__0': True, 'country_code__0': 'NG', 'domain_verification_token__0': None, 'whatsapp_number__0': None, 'domain_verified__0': False, 'storefront_enabled__0': True, 'email__0': None, 'kyc_updated_at__0': None, 'name__0': 'Tenant One', 'id__0': UUID('cb4f4b6d-170d-4058-846c-38a839c6abc1'), 'updated_at__0': None, 'custom_domain__0': None, 'subdomain__0': 'tenant-one-70e72e04-225a-4b64-b20e-15f90de8f326', 'kyc_status__1': 'NOT_STARTED', 'phone_number__1': '+23480408979074', 'is_verified__1': False, 'is_active__1': True, 'country_code__1': 'NG', 'domain_verification_token__1': None, 'whatsapp_number__1': None, 'domain_verified__1': False, 'storefront_enabled__1': True, 'email__1': None, 'kyc_updated_at__1': None, 'name__1': 'Tenant Two', 'id__1': UUID('a7912756-aa1a-48b4-9d7a-a5cd1ab8c427'), 'updated_at__1': None, 'custom_domain__1': None, 'subdomain__1': 'tenant-two-35c1fba8-dac5-45ac-8f33-abe40c6c8033'}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:10,245 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:10,381 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
____________________________ test_tenant_isolation _____________________________

self = <sqlalchemy.engine.base.Connection object at 0x148152590>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x144410150>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x148151c50>

    def _exec_insertmany_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for an "insertmanyvalues"
        operation, which will invoke DBAPI
        cursor.execute() one or more times with individual log and
        event hook calls.
    
        """
    
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
        else:
            generic_setinputsizes = None
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters = parameters
    
        engine_events = self._has_events or self.engine._has_events
        if self.dialect._has_events:
            do_execute_dispatch: Iterable[
                Any
            ] = self.dialect.dispatch.do_execute
        else:
            do_execute_dispatch = ()
    
        if self._echo:
            stats = context._get_cache_stats() + " (insertmanyvalues)"
    
        for imv_batch in dialect._deliver_insertmanyvalues_batches(
            cursor,
            str_statement,
            effective_parameters,
            generic_setinputsizes,
            context,
        ):
            if imv_batch.processed_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor,
                        imv_batch.processed_setinputsizes,
                        context,
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e,
                        sql_util._long_statement(imv_batch.replaced_statement),
                        imv_batch.replaced_parameters,
                        None,
                        context,
                    )
    
            sub_stmt = imv_batch.replaced_statement
            sub_params = imv_batch.replaced_parameters
    
            if engine_events:
                for fn in self.dispatch.before_cursor_execute:
                    sub_stmt, sub_params = fn(
                        self,
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                        True,
                    )
    
            if self._echo:
                self._log_info(sql_util._long_statement(sub_stmt))
    
                imv_stats = f""" {imv_batch.batchnum}/{
                            imv_batch.total_batches
                } ({
                    'ordered'
                    if imv_batch.rows_sorted else 'unordered'
                }{
                    '; batch not supported'
                    if imv_batch.is_downgraded
                    else ''
                })"""
    
                if imv_batch.batchnum == 1:
                    stats += imv_stats
                else:
                    stats = f"insertmanyvalues{imv_stats}"
    
                if not self.engine.hide_parameters:
                    self._log_info(
                        "[%s] %r",
                        stats,
                        sql_util._repr_params(
                            sub_params,
                            batches=10,
                            ismulti=False,
                        ),
                    )
                else:
                    self._log_info(
                        "[%s] [SQL parameters hidden due to "
                        "hide_parameters=True]",
                        stats,
                    )
    
            try:
                for fn in do_execute_dispatch:
                    if fn(
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                    ):
                        break
                else:
>                   dialect.do_execute(
                        cursor,
                        sub_stmt,
                        sub_params,
                        context,
                    )

../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x144410150>
cursor = <cursor object at 0x146971b70; closed: -1>
statement = 'INSERT INTO tenants (id, name, subdomain, custom_domain, domain_verified, is_verified, domain_verification_token, cou...%(is_active__1)s, %(storefront_enabled__1)s, %(updated_at__1)s, %(email__1)s) RETURNING tenants.created_at, tenants.id'
parameters = {'country_code__0': 'NG', 'country_code__1': 'NG', 'custom_domain__0': None, 'custom_domain__1': None, ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x148151c50>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.NotNullViolation: null value in column "updated_at" of relation "tenants" violates not-null constraint
E       DETAIL:  Failing row contains (e9ec54ef-28c5-4d0f-8bd1-4ba047b6f12c, Tenant One, tenant-one-f693086c-024c-44c4-af25-9c068ae26437, null, f, null, null, NG, NOT_STARTED, null, null, null, +23481003625433, null, t, t, null, 2025-07-10 03:06:10.383646, null, null, null, f, null, null, null, null, null, null).

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation

The above exception was the direct cause of the following exception:

db = <sqlalchemy.orm.session.Session object at 0x14854fbd0>

    def test_tenant_isolation(db: Session):
        """Test that RLS properly isolates tenant data."""
        # Create two tenants inline
        tenant1 = Tenant(
            name="Tenant One",
            subdomain=f"tenant-one-{uuid.uuid4()}",
            phone_number=f"+2348{uuid.uuid4().int % 10000000000:010}",
            country_code="NG",
            kyc_status=KYCStatus.NOT_STARTED,
            storefront_enabled=True,
            is_active=True,
        )
        tenant2 = Tenant(
            name="Tenant Two",
            subdomain=f"tenant-two-{uuid.uuid4()}",
            phone_number=f"+2348{uuid.uuid4().int % 10000000000:010}",
            country_code="NG",
            kyc_status=KYCStatus.NOT_STARTED,
            storefront_enabled=True,
            is_active=True,
        )
        db.add(tenant1)
        db.add(tenant2)
>       db.commit()

tests/integration/test_tenant_rls.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
../venv/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
../venv/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
../venv/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py:1137: in _emit_insert_statements
    result = connection.execute(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
../venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection
    return connection._execute_clauseelement(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_insertmany_context(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2121: in _exec_insertmany_context
    self._handle_dbapi_exception(
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2113: in _exec_insertmany_context
    dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x144410150>
cursor = <cursor object at 0x146971b70; closed: -1>
statement = 'INSERT INTO tenants (id, name, subdomain, custom_domain, domain_verified, is_verified, domain_verification_token, cou...%(is_active__1)s, %(storefront_enabled__1)s, %(updated_at__1)s, %(email__1)s) RETURNING tenants.created_at, tenants.id'
parameters = {'country_code__0': 'NG', 'country_code__1': 'NG', 'custom_domain__0': None, 'custom_domain__1': None, ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x148151c50>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "updated_at" of relation "tenants" violates not-null constraint
E       DETAIL:  Failing row contains (e9ec54ef-28c5-4d0f-8bd1-4ba047b6f12c, Tenant One, tenant-one-f693086c-024c-44c4-af25-9c068ae26437, null, f, null, null, NG, NOT_STARTED, null, null, null, +23481003625433, null, t, t, null, 2025-07-10 03:06:10.383646, null, null, null, f, null, null, null, null, null, null).
E       
E       [SQL: INSERT INTO tenants (id, name, subdomain, custom_domain, domain_verified, is_verified, domain_verification_token, country_code, kyc_status, kyc_updated_at, phone_number, whatsapp_number, is_active, storefront_enabled, updated_at, email) VALUES (%(id_ ... 605 characters truncated ... %(storefront_enabled__1)s, %(updated_at__1)s, %(email__1)s) RETURNING tenants.created_at, tenants.id]
E       [parameters: {'kyc_status__0': 'NOT_STARTED', 'phone_number__0': '+23481003625433', 'is_verified__0': False, 'is_active__0': True, 'country_code__0': 'NG', 'domain_verification_token__0': None, 'whatsapp_number__0': None, 'domain_verified__0': False, 'storefront_enabled__0': True, 'email__0': None, 'kyc_updated_at__0': None, 'name__0': 'Tenant One', 'id__0': UUID('e9ec54ef-28c5-4d0f-8bd1-4ba047b6f12c'), 'updated_at__0': None, 'custom_domain__0': None, 'subdomain__0': 'tenant-one-f693086c-024c-44c4-af25-9c068ae26437', 'kyc_status__1': 'NOT_STARTED', 'phone_number__1': '+23488664823179', 'is_verified__1': False, 'is_active__1': True, 'country_code__1': 'NG', 'domain_verification_token__1': None, 'whatsapp_number__1': None, 'domain_verified__1': False, 'storefront_enabled__1': True, 'email__1': None, 'kyc_updated_at__1': None, 'name__1': 'Tenant Two', 'id__1': UUID('43272d6f-1f51-4e25-9f3e-da949e0aaa37'), 'updated_at__1': None, 'custom_domain__1': None, 'subdomain__1': 'tenant-two-f19d96c8-c653-4662-8f8f-dd7b84b46f97'}]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:922: IntegrityError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:10,381 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:10,624 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_____________ TestSubdomainMiddleware.test_dispatch_excluded_path ______________

self = <test_subdomain.TestSubdomainMiddleware object at 0x1462b8a10>

    @pytest.mark.asyncio
    async def test_dispatch_excluded_path(self):
        """Test that middleware skips excluded paths."""
        # Setup
        app = AsyncMock()
        middleware = SubdomainMiddleware(app, exclude_paths=["/api/"])
    
        # Create mock request with excluded path
        request = MagicMock()
        request.url.path = "/api/v1/products"
    
        # Create mock call_next function
        async def call_next(request):
            return Response()
    
        # Execute
        response = await middleware.dispatch(request, call_next)
    
        # Verify that tenant context wasn't set
>       assert not hasattr(request.state, "tenant_context")
E       AssertionError: assert not True
E        +  where True = hasattr(<MagicMock name='mock.state' id='5496248784'>, 'tenant_context')
E        +    where <MagicMock name='mock.state' id='5496248784'> = <MagicMock id='5507255184'>.state

tests/middleware/test_subdomain.py:30: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:10,733 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:10,736 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________ TestAlembicMigrations.test_migration_head_matches_models ___________

self = <test_migrations.TestAlembicMigrations object at 0x1462c2110>
db_engine = Engine(postgresql://postgres:***@localhost/test_migrations)
alembic_config = <alembic.config.Config object at 0x147d23f10>

    def test_migration_head_matches_models(self, db_engine, alembic_config):
        """Test that migration head matches SQLAlchemy models."""
        # Set up migration context with connection
        with db_engine.connect() as connection:
            # Apply all migrations first
>           alembic.command.upgrade(alembic_config, "head")

tests/migration/test_migrations.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/alembic/command.py:403: in upgrade
    script.run_env()
../venv/lib/python3.11/site-packages/alembic/script/base.py:583: in run_env
    util.load_python_file(self.dir, "env.py")
../venv/lib/python3.11/site-packages/alembic/util/pyfiles.py:95: in load_python_file
    module = load_module_py(module_id, path)
../venv/lib/python3.11/site-packages/alembic/util/pyfiles.py:113: in load_module_py
    spec.loader.exec_module(module)  # type: ignore
<frozen importlib._bootstrap_external>:940: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
alembic/env.py:110: in <module>
    run_migrations_online()
alembic/env.py:91: in run_migrations_online
    with connectable.connect() as connection:
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:3269: in connect
    return self._connection_cls(self)
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:145: in __init__
    self._dbapi_connection = engine.raw_connection()
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:3293: in raw_connection
    return self.pool.connect()
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:452: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:1269: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:716: in checkout
    rec = pool._do_get()
../venv/lib/python3.11/site-packages/sqlalchemy/pool/impl.py:284: in _do_get
    return self._create_connection()
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:393: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:678: in __init__
    self.__connect()
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:902: in __connect
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:898: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.11/site-packages/sqlalchemy/engine/create.py:645: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:616: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:941: in connect
    await_only(creator_fn(*arg, **kw)),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

awaitable = <coroutine object connect at 0x14738a5c0>

    def await_only(awaitable: Awaitable[_T]) -> _T:
        """Awaits an async function in a sync method.
    
        The sync method must be inside a :func:`greenlet_spawn` context.
        :func:`await_only` calls cannot be nested.
    
        :param awaitable: The coroutine to call.
    
        """
        # this is called in the context greenlet while running fn
        current = getcurrent()
        if not isinstance(current, _AsyncIoGreenlet):
            _safe_cancel_awaitable(awaitable)
    
>           raise exc.MissingGreenlet(
                "greenlet_spawn has not been called; can't call await_only() "
                "here. Was IO attempted in an unexpected place?"
            )
E           sqlalchemy.exc.MissingGreenlet: greenlet_spawn has not been called; can't call await_only() here. Was IO attempted in an unexpected place? (Background on this error at: https://sqlalche.me/e/20/xd2s)

../venv/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:121: MissingGreenlet
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:10,743 - tests.fixtures.environment - INFO - Setting test environment variables
Note: (psycopg2.errors.DuplicateDatabase) database "test_migrations" already exists

[SQL: CREATE DATABASE test_migrations]
(Background on this error at: https://sqlalche.me/e/20/f405)
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:10,951 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
______________ TestAlembicMigrations.test_migration_reversibility ______________

self = <test_migrations.TestAlembicMigrations object at 0x1462c26d0>
db_engine = Engine(postgresql://postgres:***@localhost/test_migrations)
alembic_config = <alembic.config.Config object at 0x14697a8d0>

    def test_migration_reversibility(self, db_engine, alembic_config):
        """Test that all migrations can be applied and reversed."""
        # Get migration versions
        from alembic.script import ScriptDirectory
        script = ScriptDirectory.from_config(alembic_config)
        revisions = list(script.walk_revisions())
        rev_ids = [rev.revision for rev in revisions]
    
        # Apply migrations one by one and check each can be reversed
        for rev_id in reversed(rev_ids):
            # Upgrade to this revision
>           alembic.command.upgrade(alembic_config, rev_id)

tests/migration/test_migrations.py:112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/alembic/command.py:403: in upgrade
    script.run_env()
../venv/lib/python3.11/site-packages/alembic/script/base.py:583: in run_env
    util.load_python_file(self.dir, "env.py")
../venv/lib/python3.11/site-packages/alembic/util/pyfiles.py:95: in load_python_file
    module = load_module_py(module_id, path)
../venv/lib/python3.11/site-packages/alembic/util/pyfiles.py:113: in load_module_py
    spec.loader.exec_module(module)  # type: ignore
<frozen importlib._bootstrap_external>:940: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
alembic/env.py:110: in <module>
    run_migrations_online()
alembic/env.py:91: in run_migrations_online
    with connectable.connect() as connection:
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:3269: in connect
    return self._connection_cls(self)
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:145: in __init__
    self._dbapi_connection = engine.raw_connection()
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:3293: in raw_connection
    return self.pool.connect()
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:452: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:1269: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:716: in checkout
    rec = pool._do_get()
../venv/lib/python3.11/site-packages/sqlalchemy/pool/impl.py:284: in _do_get
    return self._create_connection()
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:393: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:678: in __init__
    self.__connect()
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:902: in __connect
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:898: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.11/site-packages/sqlalchemy/engine/create.py:645: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:616: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:941: in connect
    await_only(creator_fn(*arg, **kw)),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

awaitable = <coroutine object connect at 0x1476f4cc0>

    def await_only(awaitable: Awaitable[_T]) -> _T:
        """Awaits an async function in a sync method.
    
        The sync method must be inside a :func:`greenlet_spawn` context.
        :func:`await_only` calls cannot be nested.
    
        :param awaitable: The coroutine to call.
    
        """
        # this is called in the context greenlet while running fn
        current = getcurrent()
        if not isinstance(current, _AsyncIoGreenlet):
            _safe_cancel_awaitable(awaitable)
    
>           raise exc.MissingGreenlet(
                "greenlet_spawn has not been called; can't call await_only() "
                "here. Was IO attempted in an unexpected place?"
            )
E           sqlalchemy.exc.MissingGreenlet: greenlet_spawn has not been called; can't call await_only() here. Was IO attempted in an unexpected place? (Background on this error at: https://sqlalche.me/e/20/xd2s)

../venv/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:121: MissingGreenlet
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:10,952 - tests.fixtures.environment - INFO - Setting test environment variables
Note: (psycopg2.errors.DuplicateDatabase) database "test_migrations" already exists

[SQL: CREATE DATABASE test_migrations]
(Background on this error at: https://sqlalche.me/e/20/f405)
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:11,035 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
___________ TestAlembicMigrations.test_all_tables_have_primary_keys ____________

self = <test_migrations.TestAlembicMigrations object at 0x1462c2ad0>
db_engine = Engine(postgresql://postgres:***@localhost/test_migrations)
alembic_config = <alembic.config.Config object at 0x14758e3d0>

    def test_all_tables_have_primary_keys(self, db_engine, alembic_config):
        """Ensure all tables have primary keys defined."""
        # Apply all migrations
>       alembic.command.upgrade(alembic_config, "head")

tests/migration/test_migrations.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.11/site-packages/alembic/command.py:403: in upgrade
    script.run_env()
../venv/lib/python3.11/site-packages/alembic/script/base.py:583: in run_env
    util.load_python_file(self.dir, "env.py")
../venv/lib/python3.11/site-packages/alembic/util/pyfiles.py:95: in load_python_file
    module = load_module_py(module_id, path)
../venv/lib/python3.11/site-packages/alembic/util/pyfiles.py:113: in load_module_py
    spec.loader.exec_module(module)  # type: ignore
<frozen importlib._bootstrap_external>:940: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
alembic/env.py:110: in <module>
    run_migrations_online()
alembic/env.py:91: in run_migrations_online
    with connectable.connect() as connection:
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:3269: in connect
    return self._connection_cls(self)
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:145: in __init__
    self._dbapi_connection = engine.raw_connection()
../venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py:3293: in raw_connection
    return self.pool.connect()
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:452: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:1269: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:716: in checkout
    rec = pool._do_get()
../venv/lib/python3.11/site-packages/sqlalchemy/pool/impl.py:284: in _do_get
    return self._create_connection()
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:393: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:678: in __init__
    self.__connect()
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:902: in __connect
    with util.safe_reraise():
../venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../venv/lib/python3.11/site-packages/sqlalchemy/pool/base.py:898: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.11/site-packages/sqlalchemy/engine/create.py:645: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py:616: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)
../venv/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:941: in connect
    await_only(creator_fn(*arg, **kw)),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

awaitable = <coroutine object connect at 0x148193ba0>

    def await_only(awaitable: Awaitable[_T]) -> _T:
        """Awaits an async function in a sync method.
    
        The sync method must be inside a :func:`greenlet_spawn` context.
        :func:`await_only` calls cannot be nested.
    
        :param awaitable: The coroutine to call.
    
        """
        # this is called in the context greenlet while running fn
        current = getcurrent()
        if not isinstance(current, _AsyncIoGreenlet):
            _safe_cancel_awaitable(awaitable)
    
>           raise exc.MissingGreenlet(
                "greenlet_spawn has not been called; can't call await_only() "
                "here. Was IO attempted in an unexpected place?"
            )
E           sqlalchemy.exc.MissingGreenlet: greenlet_spawn has not been called; can't call await_only() here. Was IO attempted in an unexpected place? (Background on this error at: https://sqlalche.me/e/20/xd2s)

../venv/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:121: MissingGreenlet
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,036 - tests.fixtures.environment - INFO - Setting test environment variables
Note: (psycopg2.errors.DuplicateDatabase) database "test_migrations" already exists

[SQL: CREATE DATABASE test_migrations]
(Background on this error at: https://sqlalche.me/e/20/f405)
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:11,113 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_______ TestSuperAdminSecurityRegression.test_security_headers_injection _______

self = <test_security_regression.TestSuperAdminSecurityRegression object at 0x146306390>
client = <starlette.testclient.TestClient object at 0x147c0e5d0>

    @pytest.mark.asyncio
    async def test_security_headers_injection(self, client: AsyncClient):
        """Test that security headers are properly injected for admin endpoints."""
    
        # Test admin endpoint security headers
>       response = await client.get("/api/admin/health")
E       TypeError: object Response can't be used in 'await' expression

tests/security/test_security_regression.py:190: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,118 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:11,119 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:11,119 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:11,119 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:11,129 - app - ERROR - Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('6912f64f-3944-4a2f-a7b0-92bce9aaa5f0'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 120533, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/health', None, '{"event_type": "unauthorized_domain_access", "method": "GET", "path": "/api/admin/health", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-10 03:06:11,129 - httpx - INFO - HTTP Request: GET http://testserver/api/admin/health "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
ERROR    app:super_admin_security.py:385 Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('6912f64f-3944-4a2f-a7b0-92bce9aaa5f0'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 120533, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/health', None, '{"event_type": "unauthorized_domain_access", "method": "GET", "path": "/api/admin/health", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/admin/health "HTTP/1.1 403 Forbidden"
________ TestSuperAdminSecurityRegression.test_cors_domain_restrictions ________

self = <test_security_regression.TestSuperAdminSecurityRegression object at 0x1462ff8d0>
client = <starlette.testclient.TestClient object at 0x147becf10>

    @pytest.mark.asyncio
    async def test_cors_domain_restrictions(self, client: AsyncClient):
        """Test CORS domain restrictions for admin endpoints."""
    
        # Test allowed admin domain
        headers = {
            "Origin": "https://admin.enwhe.com",
            "Access-Control-Request-Method": "GET"
        }
    
>       response = await client.options("/api/admin/health", headers=headers)
E       TypeError: object Response can't be used in 'await' expression

tests/security/test_security_regression.py:220: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,337 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:11,338 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:11,338 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:11,338 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:11,348 - app - ERROR - Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('0938c3f2-a3ce-4e2b-a68c-52d90615a944'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 339181, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/health', None, '{"event_type": "unauthorized_domain_access", "method": "OPTIONS", "path": "/api/admin/health", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-10 03:06:11,348 - httpx - INFO - HTTP Request: OPTIONS http://testserver/api/admin/health "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
ERROR    app:super_admin_security.py:385 Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('0938c3f2-a3ce-4e2b-a68c-52d90615a944'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 339181, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/health', None, '{"event_type": "unauthorized_domain_access", "method": "OPTIONS", "path": "/api/admin/health", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
INFO     httpx:_client.py:1027 HTTP Request: OPTIONS http://testserver/api/admin/health "HTTP/1.1 403 Forbidden"
____ TestSecurityMiddlewareRegression.test_domain_specific_cors_middleware _____

self = <test_security_regression.TestSecurityMiddlewareRegression object at 0x146306e50>
client = <starlette.testclient.TestClient object at 0x14857a1d0>

    @pytest.mark.asyncio
    async def test_domain_specific_cors_middleware(self, client: AsyncClient):
        """Test domain-specific CORS middleware functionality."""
    
        # Test admin domain CORS policy
        admin_headers = {
            "Host": "admin.enwhe.com",
            "Origin": "https://admin.enwhe.com"
        }
    
>       response = await client.get("/api/admin/health", headers=admin_headers)
E       TypeError: object Response can't be used in 'await' expression

tests/security/test_security_regression.py:251: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,441 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:11,442 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:11,442 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:11,442 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:11,442 - app - ERROR - Error checking emergency lockout: Textual SQL expression 'SELECT COUNT(*) FROM syst...' should be explicitly declared as text('SELECT COUNT(*) FROM syst...')
2025-07-10 03:06:11,442 - app - ERROR - Error checking IP allowlist: Textual SQL expression 'SELECT is_enforced FROM i...' should be explicitly declared as text('SELECT is_enforced FROM i...')
2025-07-10 03:06:11,443 - app.main - ERROR - IP allowlist check failed: 'IPAllowlistService' object has no attribute 'is_ip_allowed_global'
2025-07-10 03:06:11,452 - app - ERROR - Error logging admin action: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('4fafad07-80d6-47d6-ae1d-038c2eda8f8e'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 443201, tzinfo=datetime.timezone.utc), 'GET /api/admin/health', 'error', 'admin_endpoint', '/api/admin/health', None, '{"method": "GET", "path": "/api/admin/health", "query_params": {}, "status_code": 500, "duration": 0.0002129077911376953, "user_agent": "testclient", "host": "admin.enwhe.com", "organization_validated": false}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-10 03:06:11,452 - httpx - INFO - HTTP Request: GET http://testserver/api/admin/health "HTTP/1.1 500 Internal Server Error"
------------------------------ Captured log call -------------------------------
ERROR    app:super_admin_security.py:227 Error checking emergency lockout: Textual SQL expression 'SELECT COUNT(*) FROM syst...' should be explicitly declared as text('SELECT COUNT(*) FROM syst...')
ERROR    app:super_admin_security.py:268 Error checking IP allowlist: Textual SQL expression 'SELECT is_enforced FROM i...' should be explicitly declared as text('SELECT is_enforced FROM i...')
ERROR    app.main:main.py:300 IP allowlist check failed: 'IPAllowlistService' object has no attribute 'is_ip_allowed_global'
ERROR    app:super_admin_security.py:356 Error logging admin action: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('4fafad07-80d6-47d6-ae1d-038c2eda8f8e'), None, 'testclient', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 443201, tzinfo=datetime.timezone.utc), 'GET /api/admin/health', 'error', 'admin_endpoint', '/api/admin/health', None, '{"method": "GET", "path": "/api/admin/health", "query_params": {}, "status_code": 500, "duration": 0.0002129077911376953, "user_agent": "testclient", "host": "admin.enwhe.com", "organization_validated": false}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/admin/health "HTTP/1.1 500 Internal Server Error"
____ TestSecurityMiddlewareRegression.test_super_admin_security_middleware _____

self = <test_security_regression.TestSecurityMiddlewareRegression object at 0x146306e90>
client = <starlette.testclient.TestClient object at 0x148348310>

    @pytest.mark.asyncio
    async def test_super_admin_security_middleware(self, client: AsyncClient):
        """Test SuperAdmin security middleware comprehensive protection."""
    
        # Test IP allowlist enforcement
        blocked_ip_headers = {"X-Forwarded-For": "10.0.0.1"}
>       response = await client.get("/api/admin/users", headers=blocked_ip_headers)
E       TypeError: object Response can't be used in 'await' expression

tests/security/test_security_regression.py:275: TypeError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,545 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:11,546 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:11,546 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:11,546 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:11,556 - app - ERROR - Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('3b7a9510-ab67-46fd-8c7b-6c640e5c4665'), None, '10.0.0.1', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 547400, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/users', None, '{"event_type": "unauthorized_domain_access", "method": "GET", "path": "/api/admin/users", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-10 03:06:11,557 - httpx - INFO - HTTP Request: GET http://testserver/api/admin/users "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
ERROR    app:super_admin_security.py:385 Error logging security event: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "status" of relation "audit_logs" does not exist
[SQL: INSERT INTO audit_logs (id, user_id, ip_address, user_agent, timestamp, action, status, resource_type, resource_id, tenant_id, details, message) VALUES ($1::UUID, $2::UUID, $3::VARCHAR, $4::VARCHAR, $5::TIMESTAMP WITHOUT TIME ZONE, $6::VARCHAR, $7::VARCHAR, $8::VARCHAR, $9::VARCHAR, $10::UUID, $11::JSON, $12::VARCHAR)]
[parameters: (UUID('3b7a9510-ab67-46fd-8c7b-6c640e5c4665'), None, '10.0.0.1', 'testclient', datetime.datetime(2025, 7, 10, 9, 6, 11, 547400, tzinfo=datetime.timezone.utc), 'security_event_unauthorized_domain_access', 'blocked', 'security', '/api/admin/users', None, '{"event_type": "unauthorized_domain_access", "method": "GET", "path": "/api/admin/users", "user_agent": "testclient", "host": "testserver", "allowed_domains": ["admin.enwhe.com", "localhost:3000", "127.0.0.1:3000", "enwhe.com"]}', None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/admin/users "HTTP/1.1 403 Forbidden"
___ TestSecurityConfigurationValidation.test_security_environment_variables ____

self = <test_security_regression.TestSecurityConfigurationValidation object at 0x1463152d0>

    def test_security_environment_variables(self):
        """Test that required security environment variables are properly configured."""
        import os
    
        # Test that critical security variables are set (in test environment)
        required_vars = [
            "SECRET_KEY",
            "CLERK_SECRET_KEY",
            "ADMIN_ENFORCE_IP_RESTRICTIONS",
            "ADMIN_REQUIRE_2FA"
        ]
    
        for var in required_vars:
            # In tests, these might be mocked, but structure should be validated
>           assert var in os.environ or var in [
                "SECRET_KEY", "CLERK_SECRET_KEY"], f"Missing required security environment variable: {var}"
E           AssertionError: Missing required security environment variable: ADMIN_ENFORCE_IP_RESTRICTIONS
E           assert ('ADMIN_ENFORCE_IP_RESTRICTIONS' in environ({'OSLogRateLimit': '64', 'MallocNanoZone': '0', 'USER': 'kess', 'COMMAND_MODE': 'unix2003', '__CFBundleIdentif...curity_regression.py::TestSecurityConfigurationValidation::test_security_environment_variables (call)', 'ENV': 'test'}) or 'ADMIN_ENFORCE_IP_RESTRICTIONS' in ['SECRET_KEY', 'CLERK_SECRET_KEY'])
E            +  where environ({'OSLogRateLimit': '64', 'MallocNanoZone': '0', 'USER': 'kess', 'COMMAND_MODE': 'unix2003', '__CFBundleIdentif...curity_regression.py::TestSecurityConfigurationValidation::test_security_environment_variables (call)', 'ENV': 'test'}) = <module 'os' (frozen)>.environ

tests/security/test_security_regression.py:347: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,762 - tests.fixtures.environment - INFO - Setting test environment variables
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
--------------------------- Captured stdout teardown ---------------------------
2025-07-10 03:06:11,764 - tests.fixtures.environment - INFO - Clearing test environment variables
---------------------------- Captured log teardown -----------------------------
INFO     tests.fixtures.environment:environment.py:75 Clearing test environment variables
_________________________ test_dashboard_without_token _________________________

unauth_client = <starlette.testclient.TestClient object at 0x1473d79d0>

    def test_dashboard_without_token(unauth_client):
        """Test dashboard access without authentication"""
        response = unauth_client.get("/api/v1/dashboard")
>       assert response.status_code == 401
E       assert 403 == 401
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/test_auth.py:45: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,768 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:11,802 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:11,802 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:11,802 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:11,803 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:11,823 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:11,823 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/dashboard
2025-07-10 03:06:11,823 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/dashboard "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/dashboard
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/dashboard "HTTP/1.1 403 Forbidden"
__________________________ test_dashboard_with_token ___________________________

client = <starlette.testclient.TestClient object at 0x1475c62d0>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1YjE3N2U1MC0xOWJkLTQ1ZGItODc1MS0xNDBhY2E4YjE...cGUiOiJhY2Nlc3MifQ.PZa6Mr_RzmMJvzjzUmAI7ql7Crhmt4NfFFOEWUEPsf0', 'X-Tenant-ID': '58ad4220-a206-48e2-b09c-3500723cddfb'}

    def test_dashboard_with_token(client, auth_headers):
        """Test dashboard access with authentication"""
        # Use the predefined auth_headers from the fixture
        response = client.get("/api/v1/dashboard", headers=auth_headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/test_auth.py:53: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:11,913 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:11,914 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:11,914 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:11,914 - app.main - INFO - Startup complete
2025-07-10 03:06:11,914 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:11,916 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 58ad4220
2025-07-10 03:06:11,916 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:11,916 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 5b177e50
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 58ad4220
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 5b177e50
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:11,917 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:11,937 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:11,937 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/dashboard
2025-07-10 03:06:11,938 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/dashboard "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/dashboard
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/dashboard "HTTP/1.1 403 Forbidden"
_________________________ test_products_without_token __________________________

unauth_client = <starlette.testclient.TestClient object at 0x1469e9b10>

    def test_products_without_token(unauth_client):
        """Test that products endpoint requires authentication"""
        response = unauth_client.get("/api/v1/products")
>       assert response.status_code == 401
E       assert 403 == 401
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/test_auth.py:60: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:12,149 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:12,181 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:12,182 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:12,182 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:12,183 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:12,203 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:12,203 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
2025-07-10 03:06:12,204 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
________________________ test_create_product_with_token ________________________

client = <starlette.testclient.TestClient object at 0x147ed7c90>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjZTZlNGQyOC01MWRlLTQyYjQtYTliNi05NTVhNGFkZDA...cGUiOiJhY2Nlc3MifQ.AyTbzL4-pYz0HE9pjuAkZPsUTvMe8Aawf32qJE5fYUY', 'X-Tenant-ID': '5f1ee703-01e8-456d-8023-bfd12518bc63'}
test_user = <app.models.user.User object at 0x147edc3d0>

    def test_create_product_with_token(client, auth_headers, test_user):
        """Test creating a product with authentication"""
        # Use the predefined auth_headers from the fixture
        product_data = {
            "name": "Test Auth Product",
            "description": "Test Description",
            "price": 99.99,
        }
        response = client.post("/api/v1/products", headers=auth_headers, json=product_data)
    
        # Print response info for debugging
        print(f"Status: {response.status_code}\nResponse: {response.text}")
    
        # Check if we have a successful response (either 200 or 201)
>       assert response.status_code in [
            200,
            201,
        ], f"Expected 200 or 201, got {response.status_code}: {response.text}"
E       AssertionError: Expected 200 or 201, got 403: Invalid tenant ID: 5f1ee703-01e8-456d-8023-bfd12518bc63
E       assert 403 in [200, 201]
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/test_auth.py:77: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:12,292 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:12,293 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:12,293 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:12,293 - app.main - INFO - Startup complete
2025-07-10 03:06:12,294 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:12,295 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 5f1ee703
2025-07-10 03:06:12,295 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:12,296 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user ce6e4d28
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 5f1ee703
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user ce6e4d28
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:12,297 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:12,316 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:12,316 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
2025-07-10 03:06:12,316 - httpx - INFO - HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
Status: 403
Response: Invalid tenant ID: 5f1ee703-01e8-456d-8023-bfd12518bc63
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=POST, path=/api/v1/products
INFO     httpx:_client.py:1027 HTTP Request: POST http://testserver/api/v1/products "HTTP/1.1 403 Forbidden"
__________________________ test_orders_without_token ___________________________

unauth_client = <starlette.testclient.TestClient object at 0x1482baf50>

    def test_orders_without_token(unauth_client):
        """Test that orders endpoint requires authentication"""
        response = unauth_client.get("/api/v1/orders")
>       assert response.status_code == 401
E       assert 403 == 401
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/test_auth.py:91: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:12,409 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:12,442 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:12,442 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:12,442 - app.main - INFO - Startup complete
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:12,442 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:12,463 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:12,463 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:06:12,464 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
____________________________ test_orders_with_token ____________________________

client = <starlette.testclient.TestClient object at 0x1485c3650>
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5YjgzNGEyYi1iN2I3LTQ0YzQtOTJlYy1mNDE2NTBhNGV...cGUiOiJhY2Nlc3MifQ.1b1OM6i8VqtSgGV85pLq0hlxlS3UZFCGQWGY20k3umo', 'X-Tenant-ID': '58d66e7b-a3f7-47a4-bfb4-1688ac4020c7'}

    def test_orders_with_token(client, auth_headers):
        """Test orders access with authentication"""
        # Use the predefined auth_headers from the fixture
        response = client.get("/api/v1/orders", headers=auth_headers)
>       assert response.status_code == 200
E       assert 403 == 200
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/test_auth.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-07-10 03:06:12,670 - tests.fixtures.environment - INFO - Setting test environment variables
2025-07-10 03:06:12,671 - app.main - INFO - Starting up ConversationalCommerce backend...
2025-07-10 03:06:12,671 - app.main - INFO - Redis cache initialized successfully
2025-07-10 03:06:12,671 - app.main - INFO - Startup complete
2025-07-10 03:06:12,671 - tests.fixtures.environment - INFO - [DEBUG] Entering test_tenant fixture
2025-07-10 03:06:12,673 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_tenant 58d66e7b
2025-07-10 03:06:12,673 - tests.fixtures.environment - INFO - [DEBUG] Entering test_user fixture
2025-07-10 03:06:12,674 - tests.fixtures.environment - INFO - [DEBUG] Yielding test_user 9b834a2b
------------------------------ Captured log setup ------------------------------
INFO     tests.fixtures.environment:environment.py:49 Setting test environment variables
INFO     app.main:main.py:256 Starting up ConversationalCommerce backend...
INFO     app.main:main.py:235 Redis cache initialized successfully
INFO     app.main:main.py:267 Startup complete
INFO     tests.fixtures.environment:environment.py:86 [DEBUG] Entering test_tenant fixture
INFO     tests.fixtures.environment:environment.py:107 [DEBUG] Yielding test_tenant 58d66e7b
INFO     tests.fixtures.environment:environment.py:114 [DEBUG] Entering test_user fixture
INFO     tests.fixtures.environment:environment.py:131 [DEBUG] Yielding test_user 9b834a2b
----------------------------- Captured stdout call -----------------------------
2025-07-10 03:06:12,674 - app - WARNING - Unknown domain requesting CORS: testserver, applying strict admin policy
2025-07-10 03:06:12,696 - app - WARNING - Unauthorized CORS origin attempt: None for host: testserver
2025-07-10 03:06:12,696 - app - INFO - CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
2025-07-10 03:06:12,696 - httpx - INFO - HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
------------------------------ Captured log call -------------------------------
WARNING  app:domain_specific_cors.py:170 Unknown domain requesting CORS: testserver, applying strict admin policy
WARNING  app:domain_specific_cors.py:231 Unauthorized CORS origin attempt: None for host: testserver
INFO     app:domain_specific_cors.py:275 CORS policy applied: admin for host=testserver, origin=, method=GET, path=/api/v1/orders
INFO     httpx:_client.py:1027 HTTP Request: GET http://testserver/api/v1/orders "HTTP/1.1 403 Forbidden"
=============================== warnings summary ===============================
app/models/settings.py:129
  /Users/kess/Projects/ConversationalCommerce/backend/app/models/settings.py:129: SADeprecationWarning: User-placed attribute Tenant.settings_domains on Mapper[Tenant(tenants)] is replacing an existing ORM-mapped attribute.  Behavior is not fully defined in this case.  This use is deprecated and will raise an error in a future release
    Tenant.settings_domains = relationship(

app/models/settings.py:131
  /Users/kess/Projects/ConversationalCommerce/backend/app/models/settings.py:131: SADeprecationWarning: User-placed attribute Tenant.settings on Mapper[Tenant(tenants)] is replacing an existing ORM-mapped attribute.  Behavior is not fully defined in this case.  This use is deprecated and will raise an error in a future release
    Tenant.settings = relationship(

../venv/lib/python3.11/site-packages/typer/completion.py:122
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/typer/completion.py:122: DeprecationWarning: 'BaseCommand' is deprecated and will be removed in Click 9.0. Use 'Command' instead.
    cli: click.BaseCommand,

../venv/lib/python3.11/site-packages/spacy/cli/_util.py:23
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/spacy/cli/_util.py:23: DeprecationWarning: Importing 'parser.split_arg_string' is deprecated, it will only be available in 'shell_completion' in Click 9.0.
    from click.parser import split_arg_string

../venv/lib/python3.11/site-packages/weasel/util/config.py:8
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/weasel/util/config.py:8: DeprecationWarning: Importing 'parser.split_arg_string' is deprecated, it will only be available in 'shell_completion' in Click 9.0.
    from click.parser import split_arg_string

app/schemas/theme_builder.py:24
  /Users/kess/Projects/ConversationalCommerce/backend/app/schemas/theme_builder.py:24: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator("*")

../venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
../venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
../venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
../venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
../venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
../venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

../venv/lib/python3.11/site-packages/passlib/utils/__init__.py:854
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/passlib/utils/__init__.py:854: DeprecationWarning: 'crypt' is deprecated and slated for removal in Python 3.13
    from crypt import crypt as _crypt

app/api/admin/endpoints/ip_allowlist.py:40
  /Users/kess/Projects/ConversationalCommerce/backend/app/api/admin/endpoints/ip_allowlist.py:40: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('ip_range')

app/api/admin/endpoints/ip_allowlist.py:49
  /Users/kess/Projects/ConversationalCommerce/backend/app/api/admin/endpoints/ip_allowlist.py:49: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('is_global')

../venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:373
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:373: UserWarning: Valid config keys have changed in V2:
  * 'orm_mode' has been renamed to 'from_attributes'
    warnings.warn(message, UserWarning)

app/api/admin/endpoints/ip_allowlist.py:86
  /Users/kess/Projects/ConversationalCommerce/backend/app/api/admin/endpoints/ip_allowlist.py:86: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('geo_restrict_countries', 'geo_block_countries')

app/api/admin/endpoints/ip_allowlist.py:122
  /Users/kess/Projects/ConversationalCommerce/backend/app/api/admin/endpoints/ip_allowlist.py:122: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('ip_address')

app/core/config/test_settings.py:8
  /Users/kess/Projects/ConversationalCommerce/backend/app/core/config/test_settings.py:8: PytestCollectionWarning: cannot collect test class 'TestSettings' because it has a __init__ constructor (from: app/core/config/test_settings.py)
    class TestSettings(BaseSettings):

../venv/lib/python3.11/site-packages/_pytest/mark/structures.py:357
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/_pytest/mark/structures.py:357: PytestRemovedIn9Warning: Marks applied to fixtures have no effect
  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function
    store_mark(func, self.mark)

tests/test_middleware.py:8
  /Users/kess/Projects/ConversationalCommerce/backend/tests/test_middleware.py:8: PytestCollectionWarning: cannot collect test class 'TestRateLimitMiddleware' because it has a __init__ constructor (from: tests/test_middleware.py)
    class TestRateLimitMiddleware(RateLimitMiddleware):

tests/test_middleware.py:21
  /Users/kess/Projects/ConversationalCommerce/backend/tests/test_middleware.py:21: PytestCollectionWarning: cannot collect test class 'TestTenantMiddleware' because it has a __init__ constructor (from: tests/test_middleware.py)
    class TestTenantMiddleware(BaseHTTPMiddleware):

app/domain/events/test_order_event_handlers.py::test_inventory_deduction_handler_decrements_inventory
  app/domain/events/test_order_event_handlers.py:190: PytestWarning: The test <Function test_inventory_deduction_handler_decrements_inventory> is marked with '@pytest.mark.asyncio' but it is not an async function. Please remove the asyncio mark. If the test is not marked explicitly, check for global marks applied via 'pytestmark'.
    @pytest.mark.asyncio

app/domain/events/test_order_event_handlers.py::test_handler_failure_isolation
  app/domain/events/test_order_event_handlers.py:226: PytestWarning: The test <Function test_handler_failure_isolation> is marked with '@pytest.mark.asyncio' but it is not an async function. Please remove the asyncio mark. If the test is not marked explicitly, check for global marks applied via 'pytestmark'.
    @pytest.mark.asyncio

app/domain/events/test_order_event_handlers.py::test_notification_handler_failure
  app/domain/events/test_order_event_handlers.py:241: PytestWarning: The test <Function test_notification_handler_failure> is marked with '@pytest.mark.asyncio' but it is not an async function. Please remove the asyncio mark. If the test is not marked explicitly, check for global marks applied via 'pytestmark'.
    @pytest.mark.asyncio

app/domain/events/test_order_event_handlers.py::test_sentry_prometheus_integration
  app/domain/events/test_order_event_handlers.py:268: PytestWarning: The test <Function test_sentry_prometheus_integration> is marked with '@pytest.mark.asyncio' but it is not an async function. Please remove the asyncio mark. If the test is not marked explicitly, check for global marks applied via 'pytestmark'.
    @pytest.mark.asyncio

app/tests/integration/admin/test_access_control.py::test_super_admin_full_access
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/_pytest/python.py:182: PytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.
  You need to install a suitable plugin for your async framework, for example:
    - anyio
    - pytest-asyncio
    - pytest-tornasync
    - pytest-trio
    - pytest-twisted
    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))

app/tests/integration/admin/test_access_control.py::test_super_admin_full_access
app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[SYSTEM_ADMIN-/api/v1/admin/tenants-DELETE-403]
app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[SUPPORT_ADMIN-/api/v1/admin/users-POST-403]
app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[SECURITY_ADMIN-/api/v1/admin/feature-flags-POST-403]
app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[READ_ONLY_ADMIN-/api/v1/admin/tenants-POST-403]
app/tests/integration/admin/test_access_control.py::TestPermissionInheritance::test_permission_inheritance[tenant_read-roles_with_access0]
app/tests/integration/admin/test_access_control.py::TestPermissionInheritance::test_permission_inheritance[security_write-roles_with_access1]
app/tests/integration/admin/test_access_control.py::TestPermissionInheritance::test_permission_inheritance[impersonation-roles_with_access2]
app/tests/integration/admin/test_access_control.py::TestPermissionInheritance::test_permission_inheritance[system_config-roles_with_access3]
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/_pytest/runner.py:143: RuntimeWarning: coroutine 'ensure_super_admin_in_db' was never awaited
    item.funcargs = None  # type: ignore[attr-defined]
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

app/tests/integration/admin/test_access_control.py::test_support_admin_permissions
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/sqlalchemy/sql/annotation.py:407: RuntimeWarning: coroutine 'ensure_super_admin_in_db' was never awaited
    _annotate = to_annotate._annotate
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[SUPER_ADMIN-/api/v1/admin/tenants-GET-200]
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:1315: RuntimeWarning: coroutine 'ensure_super_admin_in_db' was never awaited
    value = getattr(self, f"_memoized_attr_{key}")()
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[SYSTEM_ADMIN-/api/v1/admin/tenants-DELETE-403]
  /opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/weakref.py:428: RuntimeWarning: coroutine 'ensure_super_admin_in_db' was never awaited
    self.data[ref(key, self._remove)] = value
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[SUPPORT_ADMIN-/api/v1/admin/users-POST-403]
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py:345: RuntimeWarning: coroutine 'ensure_super_admin_in_db' was never awaited
    return ".".join([x for x in (module, qualname) if x])
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[SECURITY_ADMIN-/api/v1/admin/feature-flags-POST-403]
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:1910: RuntimeWarning: coroutine 'ensure_super_admin_in_db' was never awaited
    def go(*arg: Any, **kw: Any) -> Optional[_T]:
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[READ_ONLY_ADMIN-/api/v1/admin/tenants-POST-403]
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/asyncpg/connection.py:432: RuntimeWarning: coroutine 'ensure_super_admin_in_db' was never awaited
    statement = await self._protocol.prepare(
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

app/tests/integration/admin/test_access_control.py::TestContextAwarePermissions::test_impersonation_context_permissions
  /Users/kess/Projects/ConversationalCommerce/venv/lib/python3.11/site-packages/starlette/datastructures.py:534: RuntimeWarning: coroutine 'ensure_super_admin_in_db' was never awaited
    raise KeyError(key)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

app/tests/test_share_service.py::TestShareService::test_generate_whatsapp_share_link_success
  /Users/kess/Projects/ConversationalCommerce/backend/app/services/share_service.py:92: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    create_audit_log(
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/api/test_address_book.py::test_tenant_isolation
tests/api/test_dashboard_stats.py::test_stats_tenant_isolation
  sys:1: SAWarning: transaction already deassociated from connection

tests/api/test_order_error_handling.py: 1 warning
tests/api/test_order_operations.py: 2 warnings
tests/api/test_orders.py: 6 warnings
tests/api/test_whatsapp_orders.py: 2 warnings
  /Users/kess/Projects/ConversationalCommerce/backend/tests/fixtures/db.py:215: SAWarning: transaction already deassociated from connection
    transaction.rollback()

tests/middleware/test_domain_verification.py::TestDomainVerificationService::test_stop
  /opt/homebrew/Cellar/python@3.11/3.11.13/Frameworks/Python.framework/Versions/3.11/lib/python3.11/unittest/mock.py:2133: RuntimeWarning: coroutine 'DomainVerificationService._verification_loop' was never awaited
    setattr(_type, entry, MagicProxy(entry, self))
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED app/api/v1/endpoints/tests/test_onboarding_endpoints.py::test_onboarding_start_endpoint
FAILED app/api/v1/endpoints/tests/test_onboarding_endpoints.py::test_onboarding_start_domain_conflict
FAILED app/api/v1/endpoints/tests/test_onboarding_endpoints.py::test_submit_kyc_endpoint
FAILED app/api/v1/endpoints/tests/test_onboarding_endpoints.py::test_team_invite_endpoint
FAILED app/api/v1/endpoints/tests/test_onboarding_endpoints.py::test_upload_kyc_document_endpoint
FAILED app/domain/events/test_order_event_handlers.py::test_handle_order_delivered
FAILED app/domain/events/test_order_event_handlers.py::test_handle_payment_processed
FAILED app/domain/events/test_order_event_handlers.py::test_notification_handler_failure
FAILED app/services/tests/test_storefront_config_service.py::test_create_storefront_config_success
FAILED app/tests/integration/admin/test_access_control.py::test_system_admin_permissions
FAILED app/tests/integration/admin/test_access_control.py::test_support_admin_permissions
FAILED app/tests/integration/admin/test_access_control.py::test_security_admin_permissions
FAILED app/tests/integration/admin/test_access_control.py::test_readonly_admin_permissions
FAILED app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[SUPER_ADMIN-/api/v1/admin/tenants-GET-200]
FAILED app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[SUPER_ADMIN-/api/v1/admin/users-POST-201]
FAILED app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[SYSTEM_ADMIN-/api/v1/admin/feature-flags-PUT-200]
FAILED app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[SUPPORT_ADMIN-/api/v1/admin/tenants/123-GET-200]
FAILED app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[SECURITY_ADMIN-/api/v1/admin/audit-logs-GET-200]
FAILED app/tests/integration/admin/test_access_control.py::TestPermissionMatrix::test_permission_matrix[READ_ONLY_ADMIN-/api/v1/admin/tenants-GET-200]
FAILED app/tests/integration/admin/test_access_control.py::TestContextAwarePermissions::test_admin_context_permissions
FAILED app/tests/integration/admin/test_access_control.py::TestContextAwarePermissions::test_impersonation_context_permissions
FAILED app/tests/integration/admin/test_access_control.py::TestCustomRolePermissions::test_custom_role_permissions
FAILED app/tests/test_permissions_refactor.py::TestPermissionsRefactor::test_validator
FAILED app/tests/test_permissions_refactor.py::TestPermissionsRefactor::test_html_sanitizer
FAILED app/tests/test_share_service.py::TestShareService::test_generate_whatsapp_share_link_product_not_found
FAILED app/tests/test_share_service.py::TestShareService::test_generate_whatsapp_share_link_unverified_tenant
FAILED tests/api/test_address_book.py::test_tenant_isolation - RuntimeError: ...
FAILED tests/api/test_buyer_orders.py::test_list_buyer_orders - TypeError: ob...
FAILED tests/api/test_buyer_orders.py::test_buyer_cross_tenant_forbidden - Ty...
FAILED tests/api/test_create_order.py::test_create_order_invalid_product_id
FAILED tests/api/test_cross_domain_auth.py::test_admin_cors_headers - TypeErr...
FAILED tests/api/test_dashboard_stats.py::test_get_stats_empty_tenant - TypeE...
FAILED tests/api/test_dashboard_stats.py::test_get_stats_with_data - TypeErro...
FAILED tests/api/test_dashboard_stats.py::test_stats_tenant_isolation - sqlal...
FAILED tests/api/test_order_error_handling.py::test_error_format_consistency
FAILED tests/api/test_order_error_handling.py::test_authentication_error_consistency
FAILED tests/api/test_order_error_handling.py::test_optimistic_locking - sqla...
FAILED tests/api/test_order_error_handling.py::test_transaction_rollback - as...
FAILED tests/api/test_order_operations.py::test_get_orders_list - assert 403 ...
FAILED tests/api/test_order_operations.py::test_get_orders_with_status_filter
FAILED tests/api/test_order_operations.py::test_get_orders_with_source_filter
FAILED tests/api/test_order_operations.py::test_get_orders_with_combined_filters
FAILED tests/api/test_order_operations.py::test_get_orders_with_search - asse...
FAILED tests/api/test_order_operations.py::test_get_orders_with_pagination - ...
FAILED tests/api/test_order_operations.py::test_get_order_by_id - TypeError: ...
FAILED tests/api/test_order_operations.py::test_get_nonexistent_order - asser...
FAILED tests/api/test_order_operations.py::test_get_order_invalid_uuid - asse...
FAILED tests/api/test_order_operations.py::test_update_order_status - TypeErr...
FAILED tests/api/test_order_operations.py::test_update_order_multiple_fields
FAILED tests/api/test_order_operations.py::test_update_nonexistent_order - as...
FAILED tests/api/test_order_operations.py::test_delete_order - TypeError: 'fu...
FAILED tests/api/test_order_operations.py::test_delete_nonexistent_order - as...
FAILED tests/api/test_order_operations.py::test_delete_already_deleted_order
FAILED tests/api/test_orders.py::test_create_order - assert 403 == 201
FAILED tests/api/test_orders.py::test_create_whatsapp_order - assert 403 == 201
FAILED tests/api/test_orders.py::test_get_orders_list - sqlalchemy.exc.Integr...
FAILED tests/api/test_orders.py::test_get_order_by_id - sqlalchemy.exc.Integr...
FAILED tests/api/test_orders.py::test_update_order_status - sqlalchemy.exc.In...
FAILED tests/api/test_orders.py::test_delete_order - sqlalchemy.exc.Integrity...
FAILED tests/api/test_orders.py::test_order_dashboard_stats - sqlalchemy.exc....
FAILED tests/api/test_orders.py::test_order_notification_marking - sqlalchemy...
FAILED tests/api/test_payments.py::test_mpesa_initialize_payment - assert 403...
FAILED tests/api/test_payments.py::test_mpesa_webhook - assert 403 == 200
FAILED tests/api/test_payments.py::test_mpesa_ussd_fallback - assert 403 == 200
FAILED tests/api/test_payments.py::test_paystack_webhook - assert 403 == 200
FAILED tests/api/test_payments.py::test_flutterwave_webhook - assert 403 == 200
FAILED tests/api/test_payments.py::test_stripe_initialize_payment - assert 40...
FAILED tests/api/test_payments.py::test_stripe_webhook - assert 403 == 200
FAILED tests/api/test_products.py::test_create_product - AssertionError: Expe...
FAILED tests/api/test_products.py::test_create_product_validation - assert 40...
FAILED tests/api/test_products.py::test_get_product - assert 403 == 200
FAILED tests/api/test_products.py::test_get_product_not_found - assert 403 ==...
FAILED tests/api/test_products.py::test_list_products - assert 403 == 200
FAILED tests/api/test_products.py::test_list_products_with_filters - assert 4...
FAILED tests/api/test_products.py::test_update_product - assert 403 == 200
FAILED tests/api/test_products.py::test_update_product_unauthorized - Asserti...
FAILED tests/api/test_products.py::test_delete_product - assert 403 == 204
FAILED tests/api/test_products.py::test_delete_product_unauthorized - Asserti...
FAILED tests/api/test_products.py::test_list_products_pagination - assert 403...
FAILED tests/api/test_products.py::test_list_products_filters - assert 403 ==...
FAILED tests/api/test_products.py::test_soft_delete - assert 403 == 204
FAILED tests/api/test_products.py::test_rate_limiting - assert 403 == 429
FAILED tests/api/test_products.py::test_create_product_with_all_fields - asse...
FAILED tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data0-201]
FAILED tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data1-422]
FAILED tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data2-422]
FAILED tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data3-422]
FAILED tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data4-422]
FAILED tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data5-422]
FAILED tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data6-422]
FAILED tests/api/test_products_parameterized.py::test_list_products_with_filters_parameterized[filter_params0-2]
FAILED tests/api/test_products_parameterized.py::test_list_products_with_filters_parameterized[filter_params1-2]
FAILED tests/api/test_products_parameterized.py::test_list_products_with_filters_parameterized[filter_params2-1]
FAILED tests/api/test_products_parameterized.py::test_list_products_with_filters_parameterized[filter_params3-3]
FAILED tests/api/test_products_parameterized.py::test_list_products_with_filters_parameterized[filter_params4-1]
FAILED tests/api/test_products_parameterized.py::test_list_products_with_filters_parameterized[filter_params5-1]
FAILED tests/api/test_webhook_handlers.py::test_paystack_webhook_success - As...
FAILED tests/api/test_webhook_handlers.py::test_mpesa_webhook_success - Asser...
FAILED tests/api/test_whatsapp_orders.py::test_create_whatsapp_order_success
FAILED tests/api/test_whatsapp_orders.py::test_create_whatsapp_order_missing_whatsapp_fields
FAILED tests/api/test_whatsapp_orders.py::test_create_whatsapp_order_invalid_phone
FAILED tests/api/test_whatsapp_orders.py::test_get_whatsapp_orders_by_number
FAILED tests/api/test_whatsapp_orders.py::test_get_whatsapp_orders_with_filters
FAILED tests/api/test_whatsapp_orders.py::test_get_whatsapp_orders_invalid_number
FAILED tests/api/test_whatsapp_orders.py::test_get_whatsapp_orders_nonexistent_number
FAILED tests/core/test_response_optimization.py::TestResponseOptimization::test_conditional_response_decorator
FAILED tests/core/test_response_optimization.py::TestResponseOptimization::test_conditional_response_with_304
FAILED tests/integration/test_tenant_rls.py::test_create_tenants - sqlalchemy...
FAILED tests/integration/test_tenant_rls.py::test_tenant_isolation - sqlalche...
FAILED tests/middleware/test_subdomain.py::TestSubdomainMiddleware::test_dispatch_excluded_path
FAILED tests/migration/test_migrations.py::TestAlembicMigrations::test_migration_head_matches_models
FAILED tests/migration/test_migrations.py::TestAlembicMigrations::test_migration_reversibility
FAILED tests/migration/test_migrations.py::TestAlembicMigrations::test_all_tables_have_primary_keys
FAILED tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::test_security_headers_injection
FAILED tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::test_cors_domain_restrictions
FAILED tests/security/test_security_regression.py::TestSecurityMiddlewareRegression::test_domain_specific_cors_middleware
FAILED tests/security/test_security_regression.py::TestSecurityMiddlewareRegression::test_super_admin_security_middleware
FAILED tests/security/test_security_regression.py::TestSecurityConfigurationValidation::test_security_environment_variables
FAILED tests/test_auth.py::test_dashboard_without_token - assert 403 == 401
FAILED tests/test_auth.py::test_dashboard_with_token - assert 403 == 200
FAILED tests/test_auth.py::test_products_without_token - assert 403 == 401
FAILED tests/test_auth.py::test_create_product_with_token - AssertionError: E...
FAILED tests/test_auth.py::test_orders_without_token - assert 403 == 401
FAILED tests/test_auth.py::test_orders_with_token - assert 403 == 200
ERROR app/services/tests/test_seller_onboarding_service.py::test_start_onboarding_happy_path
ERROR app/services/tests/test_seller_onboarding_service.py::test_start_onboarding_domain_conflict
ERROR app/services/tests/test_seller_onboarding_service.py::test_submit_kyc_creates_and_updates
ERROR app/services/tests/test_seller_onboarding_service.py::test_invite_team_member
ERROR app/services/tests/test_seller_onboarding_service.py::test_event_logging_on_onboarding
ERROR app/services/tests/test_seller_onboarding_service.py::test_tenant_isolation
ERROR app/tests/services/test_sendy_shipping.py::TestSendyShippingPlugin::test_get_quote_success
ERROR app/tests/services/test_sendy_shipping.py::TestSendyShippingPlugin::test_get_quote_error
ERROR app/tests/services/test_sendy_shipping.py::TestSendyShippingPlugin::test_create_shipment_success
ERROR app/tests/services/test_sendy_shipping.py::TestSendyShippingPlugin::test_track_shipment
ERROR app/tests/services/test_sendy_shipping.py::TestSendyShippingPlugin::test_shipping_service_registration
ERROR app/tests/test_permissions_refactor.py::TestPermissionsRefactor::test_role_service
ERROR app/tests/test_permissions_refactor.py::TestPermissionsRefactor::test_section_permissions
ERROR app/tests/test_permissions_refactor.py::TestPermissionsRefactor::test_component_permissions
ERROR tests/api/test_address_book.py::test_address_book_crud - AttributeError...
ERROR tests/api/test_buyer_orders.py::test_buyer_cross_tenant_forbidden - Run...
ERROR tests/api/test_create_order.py::test_create_order_minimum_fields
ERROR tests/api/test_create_order.py::test_create_order_all_fields
ERROR tests/api/test_create_order.py::test_create_order_all_fields - RuntimeE...
ERROR tests/api/test_create_order.py::test_create_order_different_sources
ERROR tests/api/test_create_order.py::test_create_order_different_sources - R...
ERROR tests/api/test_create_order.py::test_create_order_missing_required_fields
ERROR tests/api/test_create_order.py::test_create_order_missing_required_fields
ERROR tests/api/test_create_order.py::test_create_order_invalid_product_id - ...
ERROR tests/api/test_create_order.py::test_create_order_invalid_data_types
ERROR tests/api/test_create_order.py::test_create_order_invalid_data_types - ...
ERROR tests/api/test_create_order.py::test_create_website_order_without_email
ERROR tests/api/test_create_order.py::test_create_website_order_without_email
ERROR tests/api/test_create_order.py::test_create_order_unauthorized
ERROR tests/api/test_create_order.py::test_create_order_unauthorized - Runtim...
ERROR tests/api/test_cross_domain_auth.py::test_admin_cors_headers - RuntimeE...
ERROR tests/api/test_cross_domain_auth.py::test_admin_login_from_admin_domain
ERROR tests/api/test_cross_domain_auth.py::test_admin_login_from_admin_domain
ERROR tests/api/test_cross_domain_auth.py::test_admin_login_from_main_domain_blocked
ERROR tests/api/test_cross_domain_auth.py::test_admin_login_from_main_domain_blocked
ERROR tests/api/test_cross_domain_auth.py::test_tenant_api_from_tenant_subdomain
ERROR tests/api/test_cross_domain_auth.py::test_tenant_api_from_tenant_subdomain
ERROR tests/api/test_cross_domain_auth.py::test_admin_token_audience_validation
ERROR tests/api/test_cross_domain_auth.py::test_admin_token_audience_validation
ERROR tests/api/test_cross_domain_auth.py::test_admin_token_rejected_for_main_app
ERROR tests/api/test_cross_domain_auth.py::test_admin_token_rejected_for_main_app
ERROR tests/api/test_cross_domain_auth.py::test_main_app_token_rejected_for_admin
ERROR tests/api/test_cross_domain_auth.py::test_main_app_token_rejected_for_admin
ERROR tests/api/test_dashboard_stats.py::test_get_stats_empty_tenant - Runtim...
ERROR tests/api/test_dashboard_stats.py::test_get_stats_with_data - RuntimeEr...
ERROR tests/api/test_dashboard_stats.py::test_stats_tenant_isolation - Runtim...
ERROR tests/api/test_impersonation_flow.py::test_impersonation_token_creation
ERROR tests/api/test_impersonation_flow.py::test_impersonation_token_creation
ERROR tests/api/test_impersonation_flow.py::test_impersonation_token_verification
ERROR tests/api/test_impersonation_flow.py::test_impersonation_token_verification
ERROR tests/api/test_impersonation_flow.py::test_impersonation_token_end_session
ERROR tests/api/test_impersonation_flow.py::test_impersonation_token_end_session
ERROR tests/api/test_impersonation_flow.py::test_non_super_admin_cannot_impersonate
ERROR tests/api/test_impersonation_flow.py::test_non_super_admin_cannot_impersonate
ERROR tests/api/test_impersonation_flow.py::test_impersonation_token_invalid_tenant
ERROR tests/api/test_impersonation_flow.py::test_impersonation_token_invalid_tenant
ERROR tests/api/test_impersonation_flow.py::test_impersonation_integration_flow
ERROR tests/api/test_impersonation_flow.py::test_impersonation_integration_flow
ERROR tests/api/test_order_error_handling.py::test_error_format_consistency
ERROR tests/api/test_order_error_handling.py::test_authentication_error_consistency
ERROR tests/api/test_order_error_handling.py::test_optimistic_locking - Runti...
ERROR tests/api/test_order_error_handling.py::test_transaction_rollback - Run...
ERROR tests/api/test_order_operations.py::test_get_orders_list - RuntimeError...
ERROR tests/api/test_order_operations.py::test_get_orders_with_status_filter
ERROR tests/api/test_order_operations.py::test_get_orders_with_source_filter
ERROR tests/api/test_order_operations.py::test_get_orders_with_combined_filters
ERROR tests/api/test_order_operations.py::test_get_orders_with_search - Runti...
ERROR tests/api/test_order_operations.py::test_get_orders_with_pagination - R...
ERROR tests/api/test_order_operations.py::test_get_order_by_id - RuntimeError...
ERROR tests/api/test_order_operations.py::test_get_nonexistent_order - Runtim...
ERROR tests/api/test_order_operations.py::test_get_order_invalid_uuid - Runti...
ERROR tests/api/test_order_operations.py::test_update_order_status - RuntimeE...
ERROR tests/api/test_order_operations.py::test_update_order_multiple_fields
ERROR tests/api/test_order_operations.py::test_update_nonexistent_order - Run...
ERROR tests/api/test_order_operations.py::test_update_order_invalid_status - ...
ERROR tests/api/test_order_operations.py::test_update_order_invalid_status - ...
ERROR tests/api/test_order_operations.py::test_delete_order - RuntimeError: <...
ERROR tests/api/test_order_operations.py::test_delete_nonexistent_order - Run...
ERROR tests/api/test_order_operations.py::test_delete_already_deleted_order
ERROR tests/api/test_order_operations.py::test_authentication_required - sqla...
ERROR tests/api/test_order_operations.py::test_authentication_required - Runt...
ERROR tests/api/test_orders.py::test_create_order - RuntimeError: <asyncio.lo...
ERROR tests/api/test_orders.py::test_create_whatsapp_order - RuntimeError: <a...
ERROR tests/api/test_orders.py::test_get_orders_list - RuntimeError: <asyncio...
ERROR tests/api/test_orders.py::test_get_order_by_id - RuntimeError: <asyncio...
ERROR tests/api/test_orders.py::test_update_order_status - RuntimeError: <asy...
ERROR tests/api/test_orders.py::test_delete_order - RuntimeError: <asyncio.lo...
ERROR tests/api/test_orders.py::test_order_dashboard_stats - RuntimeError: <a...
ERROR tests/api/test_orders.py::test_order_notification_marking - RuntimeErro...
ERROR tests/api/test_products.py::test_create_product - RuntimeError: <asynci...
ERROR tests/api/test_products.py::test_create_product_validation - RuntimeErr...
ERROR tests/api/test_products.py::test_get_product - RuntimeError: <asyncio.l...
ERROR tests/api/test_products.py::test_get_product_not_found - RuntimeError: ...
ERROR tests/api/test_products.py::test_list_products - RuntimeError: <asyncio...
ERROR tests/api/test_products.py::test_list_products_with_filters - RuntimeEr...
ERROR tests/api/test_products.py::test_update_product - RuntimeError: <asynci...
ERROR tests/api/test_products.py::test_update_product_unauthorized - RuntimeE...
ERROR tests/api/test_products.py::test_delete_product - RuntimeError: <asynci...
ERROR tests/api/test_products.py::test_delete_product_unauthorized - RuntimeE...
ERROR tests/api/test_products.py::test_list_products_pagination - RuntimeErro...
ERROR tests/api/test_products.py::test_list_products_filters - RuntimeError: ...
ERROR tests/api/test_products.py::test_soft_delete - RuntimeError: <asyncio.l...
ERROR tests/api/test_products.py::test_rate_limiting - RuntimeError: <asyncio...
ERROR tests/api/test_products.py::test_create_product_with_all_fields - Runti...
ERROR tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data0-201]
ERROR tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data1-422]
ERROR tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data2-422]
ERROR tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data3-422]
ERROR tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data4-422]
ERROR tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data5-422]
ERROR tests/api/test_products_parameterized.py::test_create_product_validation_cases[product_data6-422]
ERROR tests/api/test_products_parameterized.py::test_list_products_with_filters_parameterized[filter_params0-2]
ERROR tests/api/test_products_parameterized.py::test_list_products_with_filters_parameterized[filter_params1-2]
ERROR tests/api/test_products_parameterized.py::test_list_products_with_filters_parameterized[filter_params2-1]
ERROR tests/api/test_products_parameterized.py::test_list_products_with_filters_parameterized[filter_params3-3]
ERROR tests/api/test_products_parameterized.py::test_list_products_with_filters_parameterized[filter_params4-1]
ERROR tests/api/test_products_parameterized.py::test_list_products_with_filters_parameterized[filter_params5-1]
ERROR tests/api/test_whatsapp_orders.py::test_create_whatsapp_order_success
ERROR tests/api/test_whatsapp_orders.py::test_create_whatsapp_order_missing_whatsapp_fields
ERROR tests/api/test_whatsapp_orders.py::test_create_whatsapp_order_invalid_phone
ERROR tests/api/test_whatsapp_orders.py::test_get_whatsapp_orders_by_number
ERROR tests/api/test_whatsapp_orders.py::test_get_whatsapp_orders_with_filters
ERROR tests/api/test_whatsapp_orders.py::test_get_whatsapp_orders_invalid_number
ERROR tests/api/test_whatsapp_orders.py::test_get_whatsapp_orders_nonexistent_number
ERROR tests/conversation/test_order_intent_handler.py::test_checkout_intent_creates_proper_channel_metadata
ERROR tests/integration/test_whatsapp_webhook_order_flow.py::test_whatsapp_webhook_to_order_creation
ERROR tests/integration/test_whatsapp_webhook_order_flow.py::test_whatsapp_webhook_to_order_creation
ERROR tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::test_clerk_organization_membership_validation
ERROR tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::test_ip_allowlist_enforcement
ERROR tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::test_session_management_security
ERROR tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::test_two_factor_authentication
ERROR tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::test_brute_force_protection
ERROR tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::test_security_headers_injection
ERROR tests/security/test_security_regression.py::TestSuperAdminSecurityRegression::test_cors_domain_restrictions
ERROR tests/security/test_security_regression.py::TestSecurityMiddlewareRegression::test_domain_specific_cors_middleware
ERROR tests/security/test_security_regression.py::TestSecurityMiddlewareRegression::test_super_admin_security_middleware
ERROR tests/security/test_security_regression.py::TestSecurityEventLogging::test_security_event_audit_logging
ERROR tests/services/test_order_service_web.py::test_web_order_creation_channel_metadata
ERROR tests/services/test_order_service_whatsapp.py::test_whatsapp_order_creation_channel_metadata
ERROR tests/test_auth.py::test_dashboard_without_token - RuntimeError: <async...
ERROR tests/test_auth.py::test_dashboard_with_token - RuntimeError: <asyncio....
ERROR tests/test_auth.py::test_products_without_token - RuntimeError: <asynci...
ERROR tests/test_auth.py::test_create_product_with_token - RuntimeError: <asy...
ERROR tests/test_auth.py::test_orders_without_token - RuntimeError: <asyncio....
ERROR tests/test_auth.py::test_orders_with_token - RuntimeError: <asyncio.loc...
ERROR tests/test_db.py::test_db_connection
===== 124 failed, 68 passed, 1 skipped, 58 warnings, 146 errors in 24.03s ======
