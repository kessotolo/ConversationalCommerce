'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { ArrowLeft } from 'lucide-react';
import { useUser } from '@clerk/nextjs';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { Badge } from '@/components/ui/Badge';
import { useToast, ToastProvider } from '@/components/ui/ToastProvider';

interface ActivityEvent {
  id: string;
  user_id: string;
  tenant_id: string;
  action: string;
  resource_type: string;
  resource_id: string;
  details: {
    path: string;
    method: string;
    status_code: number;
    duration: number;
    ip_address: string;
    user_agent: string;
  };
  severity: 'low' | 'medium' | 'high';
  timestamp: string;
  userName?: string;
}

const severityColors = {
  low: 'bg-blue-100 text-blue-800 border-blue-200',
  medium: 'bg-yellow-100 text-yellow-800 border-yellow-200',
  high: 'bg-red-100 text-red-800 border-red-200'
};

export default function Page() {
  const router = useRouter();
  const { user } = useUser();
  const { toast } = useToast();
  const [activities, setActivities] = useState<ActivityEvent[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!user) return;

    // Simulate fetching data
    setTimeout(() => {
      setActivities([
        {
          id: '1',
          user_id: 'user123',
          tenant_id: 'tenant456',
          action: 'login',
          resource_type: 'user',
          resource_id: 'user123',
          details: {
            path: '/login',
            method: 'POST',
            status_code: 200,
            duration: 0.5,
            ip_address: '192.168.1.1',
            user_agent: 'Chrome'
          },
          severity: 'low',
          timestamp: new Date().toISOString(),
          userName: user.fullName || 'User'
        }
      ]);
      setLoading(false);

      // Show sample toast
      toast({
        title: 'Monitoring Active',
        description: 'Real-time activity monitoring is now active',
        variant: 'default'
      });
    }, 1000);

    return () => {};
  }, [user, toast]);

  const renderActivity = (activity: ActivityEvent) => (
    <div
      key={activity.id}
      className={`mb-2 p-3 rounded-md border ${severityColors[activity.severity]}`}
    >
      <div className="flex items-start justify-between">
        <div>
          <div className="font-medium">{activity.action} {activity.resource_type}</div>
          <div className="text-sm text-gray-600">
            {activity.userName || activity.user_id} â€¢ {new Date(activity.timestamp).toLocaleTimeString()}
          </div>
        </div>
        <div>
          {activity.details.status_code && (
            <Badge variant={activity.details.status_code < 400 ? 'outline' : 'destructive'}>
              {activity.details.status_code}
            </Badge>
          )}
        </div>
      </div>
    </div>
  );

  return (
    <ToastProvider>
      <div className="min-h-screen bg-gray-50">
        <div className="container mx-auto px-4 py-8">
          <div className="mb-6">
            <Button variant="ghost" className="mb-4" onClick={() => router.push('/dashboard')}>
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Dashboard
            </Button>
          </div>

          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold">Activity Monitoring</h1>
          </div>

          <div className="bg-white p-6 rounded-lg shadow-sm mb-6">
            <h2 className="text-xl font-semibold mb-4">Activity Log</h2>

            {loading ? (
              <div className="text-center py-8">Loading...</div>
            ) : activities.length > 0 ? (
              <div className="space-y-2">
                {activities.map(renderActivity)}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                No activities to display.
              </div>
            )}
          </div>
        </div>
                      if (!searchTerm) return true;
                      const searchLower = searchTerm.toLowerCase();
                      return (
                        activity.action.toLowerCase().includes(searchLower) ||
                        activity.resource_type.toLowerCase().includes(searchLower) ||
                        activity.resource_id.toLowerCase().includes(searchLower)
                      );
                    })
                    .map(activity => renderActivityItem(activity, true))}
                </div>
              )}
            </TabsContent>
            
            <TabsContent value="alerts" className="p-4">
              {activities.filter(a => a.severity === 'high').length === 0 ? (
                <div className="text-center py-10">
                  <AlertTriangle className="h-10 w-10 text-gray-400 mx-auto mb-4" />
                  <p className="text-lg font-medium text-gray-900">No alerts found</p>
                  <p className="text-gray-500">
                    No high severity events have been detected
                  </p>
                </div>
              ) : (
                <div className="space-y-3">
                  {activities
                    .filter(a => a.severity === 'high')
                    .map(activity => renderActivityItem(activity))}
                </div>
              )}
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
}
